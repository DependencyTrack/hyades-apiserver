<?xml version="1.1" encoding="UTF-8" standalone="no"?>
<databaseChangeLog
        objectQuotingStrategy="QUOTE_ALL_OBJECTS"
        xmlns="http://www.liquibase.org/xml/ns/dbchangelog"
        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xsi:schemaLocation="http://www.liquibase.org/xml/ns/dbchangelog
            http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-latest.xsd">

    <changeSet id="v5.6.0-1" author="sahibamittal">
        <modifyDataType tableName="AFFECTEDVERSIONATTRIBUTION" columnName="UUID" newDataType="UUID"/>
        <modifyDataType tableName="BOM" columnName="UUID" newDataType="UUID"/>
        <modifyDataType tableName="COMPONENT" columnName="UUID" newDataType="UUID"/>
        <modifyDataType tableName="COMPONENT_PROPERTY" columnName="UUID" newDataType="UUID"/>
        <modifyDataType tableName="FINDINGATTRIBUTION" columnName="UUID" newDataType="UUID"/>
        <modifyDataType tableName="LICENSE" columnName="UUID" newDataType="UUID"/>
        <modifyDataType tableName="LICENSEGROUP" columnName="UUID" newDataType="UUID"/>
        <modifyDataType tableName="NOTIFICATIONPUBLISHER" columnName="UUID" newDataType="UUID"/>
        <modifyDataType tableName="NOTIFICATIONRULE" columnName="UUID" newDataType="UUID"/>
        <modifyDataType tableName="POLICY" columnName="UUID" newDataType="UUID"/>
        <modifyDataType tableName="POLICYCONDITION" columnName="UUID" newDataType="UUID"/>
        <modifyDataType tableName="POLICYVIOLATION" columnName="UUID" newDataType="UUID"/>
        <modifyDataType tableName="PROJECT" columnName="UUID" newDataType="UUID"/>
        <modifyDataType tableName="REPOSITORY" columnName="UUID" newDataType="UUID"/>
        <modifyDataType tableName="SERVICECOMPONENT" columnName="UUID" newDataType="UUID"/>
        <modifyDataType tableName="VEX" columnName="UUID" newDataType="UUID"/>
        <modifyDataType tableName="VULNERABILITY" columnName="UUID" newDataType="UUID"/>
        <modifyDataType tableName="VULNERABILITYALIAS" columnName="UUID" newDataType="UUID"/>
        <modifyDataType tableName="VULNERABILITYSCAN" columnName="TARGET_IDENTIFIER" newDataType="UUID"/>
        <modifyDataType tableName="VULNERABILITYSCAN" columnName="TOKEN" newDataType="UUID"/>
        <modifyDataType tableName="VULNERABLESOFTWARE" columnName="UUID" newDataType="UUID"/>
        <modifyDataType tableName="WORKFLOW_STATE" columnName="TOKEN" newDataType="UUID"/>
    </changeSet>

    <changeSet id="v5.6.0-2" author="nscuro">
        <modifyDataType tableName="TEAM" columnName="NAME" newDataType="VARCHAR(255)"/>
    </changeSet>

    <changeSet id="v5.6.0-3" author="rossmurphy974@gmail.com">
        <addColumn tableName="PROJECT">
            <column name="AUTHORS" type="TEXT"/>
        </addColumn>
        <addColumn tableName="COMPONENT">
            <column name="AUTHORS" type="TEXT"/>
        </addColumn>

        <sql>
            UPDATE "PROJECT"
            SET "AUTHORS" = JSON_BUILD_ARRAY(JSON_BUILD_OBJECT('name', "AUTHOR"))::TEXT
            WHERE "AUTHOR" IS NOT NULL;
        </sql>
        <sql>
            UPDATE "COMPONENT"
            SET "AUTHORS" = JSON_BUILD_ARRAY(JSON_BUILD_OBJECT('name', "AUTHOR"))::TEXT
            WHERE "AUTHOR" IS NOT NULL;
        </sql>

        <dropColumn tableName="PROJECT">
            <column name="AUTHOR"/>
        </dropColumn>
        <dropColumn tableName="COMPONENT">
            <column name="AUTHOR"/>
        </dropColumn>
    </changeSet>

    <changeSet id="v5.6.0-4" author="nscuro">
        <dropIndex tableName="COMPONENT" indexName="COMPONENT_DIRECT_DEPENDENCIES_GIN_IDX"/>
        <modifyDataType tableName="COMPONENT" columnName="DIRECT_DEPENDENCIES" newDataType="JSONB"/>
        <modifyDataType tableName="PROJECT" columnName="DIRECT_DEPENDENCIES" newDataType="JSONB"/>
        <sql splitStatements="true">
            CREATE
             INDEX "COMPONENT_DIRECT_DEPENDENCIES_JSONB_IDX"
                ON "COMPONENT"
             USING GIN("DIRECT_DEPENDENCIES" JSONB_PATH_OPS);
        </sql>
    </changeSet>

    <changeSet id="v5.6.0-5" author="sahibamittal">
        <sql>
            DELETE FROM "CONFIGPROPERTY"
            WHERE "GROUPNAME" = 'artifact'
            AND "PROPERTYNAME" = 'bom.validation.enabled';
        </sql>
    </changeSet>

    <changeSet id="v5.6.0-6" author="sahibamittal">
        <createTable tableName="NOTIFICATIONRULE_TAGS">
            <column name="NOTIFICATIONRULE_ID" type="BIGINT">
                <constraints nullable="false"/>
            </column>
            <column name="TAG_ID" type="BIGINT"/>
        </createTable>

        <createIndex indexName="NOTIFICATIONRULE_TAGS_NOTIFICATIONRULE_ID_IDX" tableName="NOTIFICATIONRULE_TAGS">
            <column name="NOTIFICATIONRULE_ID"/>
        </createIndex>
        <createIndex indexName="NOTIFICATIONRULE_TAGS_TAG_ID_IDX" tableName="NOTIFICATIONRULE_TAGS">
            <column name="TAG_ID"/>
        </createIndex>

        <addForeignKeyConstraint baseColumnNames="NOTIFICATIONRULE_ID" baseTableName="NOTIFICATIONRULE_TAGS"
                                 constraintName="NOTIFICATIONRULE_TAGS_NOTIFICATIONRULE_FK" deferrable="true" initiallyDeferred="true"
                                 onDelete="NO ACTION" onUpdate="NO ACTION" referencedColumnNames="ID"
                                 referencedTableName="NOTIFICATIONRULE" validate="true"/>

        <addForeignKeyConstraint baseColumnNames="TAG_ID" baseTableName="NOTIFICATIONRULE_TAGS"
                                 constraintName="NOTIFICATIONRULE_TAGS_TAG_FK" deferrable="true" initiallyDeferred="true"
                                 onDelete="NO ACTION" onUpdate="NO ACTION" referencedColumnNames="ID"
                                 referencedTableName="TAG" validate="true"/>
    </changeSet>

    <changeSet id="v5.6.0-7" author="sahibamittal">
        <addColumn tableName="PROJECT">
            <column name="IS_LATEST" type="BOOLEAN" defaultValueBoolean="false">
                <constraints nullable="false"/>
            </column>
        </addColumn>
        <addColumn tableName="POLICY">
            <column name="ONLY_LATEST_PROJECT_VERSION" type="BOOLEAN" defaultValueBoolean="false">
                <constraints nullable="false"/>
            </column>
        </addColumn>
        <createIndex indexName="PROJECT_IS_LATEST_IDX" tableName="PROJECT">
            <column name="IS_LATEST"/>
        </createIndex>
    </changeSet>

    <changeSet id="v5.6.0-8" author="nscuro">
        <sql>
            DELETE
              FROM "CONFIGPROPERTY"
             WHERE "GROUPNAME" = 'vuln-source'
               AND "PROPERTYNAME" = 'nvd.feeds.url';
        </sql>
    </changeSet>

    <changeSet id="v5.6.0-9" author="nscuro">
        <sql>
            CREATE INDEX "COMPONENT_PROPERTY_COMPONENT_ID_IDX"
                ON "COMPONENT_PROPERTY" ("COMPONENT_ID");
        </sql>
    </changeSet>

    <changeSet id="v5.6.0-9" author="sahibamittal">
        <addColumn tableName="PROJECT">
            <column name="INACTIVE_SINCE" type="TIMESTAMP WITH TIME ZONE">
                <constraints nullable="true"/>
            </column>
        </addColumn>

        <sql>UPDATE "PROJECT" SET "INACTIVE_SINCE" = NOW() WHERE "ACTIVE" IS FALSE</sql>

        <dropColumn tableName="PROJECT">
            <column name="ACTIVE" type="BOOLEAN"/>
        </dropColumn>
    </changeSet>

    <changeSet id="v5.6.0-10" author="nscuro">
        <createIndex tableName="PROJECT_METADATA" indexName="PROJECT_METADATA_PROJECT_ID_IDX" unique="true">
            <column name="PROJECT_ID"/>
        </createIndex>
    </changeSet>

    <changeSet id="v5.6.0-11" author="nscuro">
        <dropIndex tableName="COMPONENT" indexName="COMPONENT_BLAKE2B_256_IDX"/>
        <dropIndex tableName="COMPONENT" indexName="COMPONENT_BLAKE2B_384_IDX"/>
        <dropIndex tableName="COMPONENT" indexName="COMPONENT_BLAKE2B_512_IDX"/>
        <dropIndex tableName="COMPONENT" indexName="COMPONENT_BLAKE3_IDX"/>
        <dropIndex tableName="COMPONENT" indexName="COMPONENT_MD5_IDX"/>
        <dropIndex tableName="COMPONENT" indexName="COMPONENT_SHA1_IDX"/>
        <dropIndex tableName="COMPONENT" indexName="COMPONENT_SHA3_256_IDX"/>
        <dropIndex tableName="COMPONENT" indexName="COMPONENT_SHA3_384_IDX"/>
        <dropIndex tableName="COMPONENT" indexName="COMPONENT_SHA3_512_IDX"/>
        <dropIndex tableName="COMPONENT" indexName="COMPONENT_SHA256_IDX"/>
        <dropIndex tableName="COMPONENT" indexName="COMPONENT_SHA384_IDX"/>
        <dropIndex tableName="COMPONENT" indexName="COMPONENT_SHA512_IDX"/>

        <sql splitStatements="true">
            CREATE INDEX "COMPONENT_BLAKE2B_256_IDX" ON "COMPONENT" ("BLAKE2B_256") WHERE "BLAKE2B_256" IS NOT NULL;
            CREATE INDEX "COMPONENT_BLAKE2B_384_IDX" ON "COMPONENT" ("BLAKE2B_384") WHERE "BLAKE2B_384" IS NOT NULL;
            CREATE INDEX "COMPONENT_BLAKE2B_512_IDX" ON "COMPONENT" ("BLAKE2B_512") WHERE "BLAKE2B_512" IS NOT NULL;
            CREATE INDEX "COMPONENT_BLAKE3_IDX" ON "COMPONENT" ("BLAKE3") WHERE "BLAKE3" IS NOT NULL;
            CREATE INDEX "COMPONENT_MD5_IDX" ON "COMPONENT" ("MD5") WHERE "MD5" IS NOT NULL;
            CREATE INDEX "COMPONENT_SHA1_IDX" ON "COMPONENT" ("SHA1") WHERE "SHA1" IS NOT NULL;
            CREATE INDEX "COMPONENT_SHA_256_IDX" ON "COMPONENT" ("SHA_256") WHERE "SHA_256" IS NOT NULL;
            CREATE INDEX "COMPONENT_SHA_384_IDX" ON "COMPONENT" ("SHA_384") WHERE "SHA_384" IS NOT NULL;
            CREATE INDEX "COMPONENT_SHA_512_IDX" ON "COMPONENT" ("SHA_512") WHERE "SHA_512" IS NOT NULL;
            CREATE INDEX "COMPONENT_SHA3_256_IDX" ON "COMPONENT" ("SHA3_256") WHERE "SHA3_256" IS NOT NULL;
            CREATE INDEX "COMPONENT_SHA3_384_IDX" ON "COMPONENT" ("SHA3_384") WHERE "SHA3_384" IS NOT NULL;
            CREATE INDEX "COMPONENT_SHA3_512_IDX" ON "COMPONENT" ("SHA3_512") WHERE "SHA3_512" IS NOT NULL;
        </sql>
    </changeSet>

    <changeSet id="v5.6.0-12" author="sahibamittal">
        <dropForeignKeyConstraint baseTableName="AFFECTEDVERSIONATTRIBUTION" constraintName="AFFECTEDVERSIONATTRIBUTION_VULNERABILITY_FK"/>
        <addForeignKeyConstraint baseColumnNames="VULNERABILITY" baseTableName="AFFECTEDVERSIONATTRIBUTION"
             constraintName="AFFECTEDVERSIONATTRIBUTION_VULNERABILITY_FK" deferrable="true"
             initiallyDeferred="true" onDelete="CASCADE" onUpdate="NO ACTION"
             referencedColumnNames="ID" referencedTableName="VULNERABILITY" validate="true"/>

        <dropForeignKeyConstraint baseTableName="AFFECTEDVERSIONATTRIBUTION" constraintName="AFFECTEDVERSIONATTRIBUTION_VULNERABLESOFTWARE_FK"/>
        <addForeignKeyConstraint baseColumnNames="VULNERABLE_SOFTWARE" baseTableName="AFFECTEDVERSIONATTRIBUTION"
                                 constraintName="AFFECTEDVERSIONATTRIBUTION_VULNERABLESOFTWARE_FK" deferrable="true"
                                 initiallyDeferred="true" onDelete="CASCADE" onUpdate="NO ACTION"
                                 referencedColumnNames="ID" referencedTableName="VULNERABLESOFTWARE" validate="true"/>

        <dropForeignKeyConstraint baseTableName="ANALYSISCOMMENT" constraintName="ANALYSISCOMMENT_ANALYSIS_FK"/>
        <addForeignKeyConstraint baseColumnNames="ANALYSIS_ID" baseTableName="ANALYSISCOMMENT"
                                 constraintName="ANALYSISCOMMENT_ANALYSIS_FK" deferrable="true" initiallyDeferred="true"
                                 onDelete="CASCADE" onUpdate="NO ACTION" referencedColumnNames="ID"
                                 referencedTableName="ANALYSIS" validate="true"/>

        <dropForeignKeyConstraint baseTableName="ANALYSIS" constraintName="ANALYSIS_COMPONENT_FK"/>
        <addForeignKeyConstraint baseColumnNames="COMPONENT_ID" baseTableName="ANALYSIS" constraintName="ANALYSIS_COMPONENT_FK"
                                 deferrable="true" initiallyDeferred="true" onDelete="CASCADE" onUpdate="NO ACTION"
                                 referencedColumnNames="ID" referencedTableName="COMPONENT" validate="true"/>

        <dropForeignKeyConstraint baseTableName="ANALYSIS" constraintName="ANALYSIS_PROJECT_FK"/>
        <addForeignKeyConstraint baseColumnNames="PROJECT_ID" baseTableName="ANALYSIS" constraintName="ANALYSIS_PROJECT_FK"
                                 deferrable="true" initiallyDeferred="true" onDelete="CASCADE" onUpdate="NO ACTION"
                                 referencedColumnNames="ID" referencedTableName="PROJECT" validate="true"/>

        <dropForeignKeyConstraint baseTableName="ANALYSIS" constraintName="ANALYSIS_VULNERABILITY_FK"/>
        <addForeignKeyConstraint baseColumnNames="VULNERABILITY_ID" baseTableName="ANALYSIS"
                                 constraintName="ANALYSIS_VULNERABILITY_FK" deferrable="true" initiallyDeferred="true"
                                 onDelete="CASCADE" onUpdate="NO ACTION" referencedColumnNames="ID"
                                 referencedTableName="VULNERABILITY" validate="true"/>

        <dropForeignKeyConstraint baseTableName="APIKEYS_TEAMS" constraintName="APIKEYS_TEAMS_TEAM_FK"/>
        <addForeignKeyConstraint baseColumnNames="TEAM_ID" baseTableName="APIKEYS_TEAMS"
                                 constraintName="APIKEYS_TEAMS_TEAM_FK" deferrable="true" initiallyDeferred="true"
                                 onDelete="CASCADE" onUpdate="NO ACTION" referencedColumnNames="ID"
                                 referencedTableName="TEAM" validate="true"/>

        <dropForeignKeyConstraint baseTableName="APIKEYS_TEAMS" constraintName="APIKEYS_TEAMS_APIKEY_FK"/>
        <addForeignKeyConstraint baseColumnNames="APIKEY_ID" baseTableName="APIKEYS_TEAMS"
                                 constraintName="APIKEYS_TEAMS_APIKEY_FK" deferrable="true" initiallyDeferred="true"
                                 onDelete="CASCADE" onUpdate="NO ACTION" referencedColumnNames="ID"
                                 referencedTableName="APIKEY" validate="true"/>

        <dropForeignKeyConstraint baseTableName="BOM" constraintName="BOM_PROJECT_FK"/>
        <addForeignKeyConstraint baseColumnNames="PROJECT_ID" baseTableName="BOM" constraintName="BOM_PROJECT_FK"
                                 deferrable="true" initiallyDeferred="true" onDelete="CASCADE" onUpdate="NO ACTION"
                                 referencedColumnNames="ID" referencedTableName="PROJECT" validate="true"/>

        <dropForeignKeyConstraint baseTableName="COMPONENTS_VULNERABILITIES" constraintName="COMPONENTS_VULNERABILITIES_COMPONENT_FK"/>
        <addForeignKeyConstraint baseColumnNames="COMPONENT_ID" baseTableName="COMPONENTS_VULNERABILITIES"
                                 constraintName="COMPONENTS_VULNERABILITIES_COMPONENT_FK" deferrable="true"
                                 initiallyDeferred="true" onDelete="CASCADE" onUpdate="NO ACTION"
                                 referencedColumnNames="ID" referencedTableName="COMPONENT" validate="true"/>

        <dropForeignKeyConstraint baseTableName="COMPONENTS_VULNERABILITIES" constraintName="COMPONENTS_VULNERABILITIES_VULNERABILITY_FK"/>
        <addForeignKeyConstraint baseColumnNames="VULNERABILITY_ID" baseTableName="COMPONENTS_VULNERABILITIES"
                                 constraintName="COMPONENTS_VULNERABILITIES_VULNERABILITY_FK" deferrable="true"
                                 initiallyDeferred="true" onDelete="CASCADE" onUpdate="NO ACTION"
                                 referencedColumnNames="ID" referencedTableName="VULNERABILITY" validate="true"/>

        <dropForeignKeyConstraint baseTableName="COMPONENT" constraintName="COMPONENT_COMPONENT_FK"/>
        <addForeignKeyConstraint baseColumnNames="PARENT_COMPONENT_ID" baseTableName="COMPONENT"
                                 constraintName="COMPONENT_COMPONENT_FK" deferrable="true" initiallyDeferred="true"
                                 onDelete="CASCADE" onUpdate="NO ACTION" referencedColumnNames="ID"
                                 referencedTableName="COMPONENT" validate="true"/>

        <dropForeignKeyConstraint baseTableName="COMPONENT" constraintName="COMPONENT_PROJECT_FK"/>
        <addForeignKeyConstraint baseColumnNames="PROJECT_ID" baseTableName="COMPONENT" constraintName="COMPONENT_PROJECT_FK"
                                 deferrable="true" initiallyDeferred="true" onDelete="CASCADE" onUpdate="NO ACTION"
                                 referencedColumnNames="ID" referencedTableName="PROJECT" validate="true"/>

        <dropForeignKeyConstraint baseTableName="DEPENDENCYMETRICS" constraintName="DEPENDENCYMETRICS_COMPONENT_FK"/>
        <addForeignKeyConstraint baseColumnNames="COMPONENT_ID" baseTableName="DEPENDENCYMETRICS"
                                 constraintName="DEPENDENCYMETRICS_COMPONENT_FK" deferrable="true" initiallyDeferred="true"
                                 onDelete="CASCADE" onUpdate="NO ACTION" referencedColumnNames="ID"
                                 referencedTableName="COMPONENT" validate="true"/>

        <dropForeignKeyConstraint baseTableName="DEPENDENCYMETRICS" constraintName="DEPENDENCYMETRICS_PROJECT_FK"/>
        <addForeignKeyConstraint baseColumnNames="PROJECT_ID" baseTableName="DEPENDENCYMETRICS"
                                 constraintName="DEPENDENCYMETRICS_PROJECT_FK" deferrable="true" initiallyDeferred="true"
                                 onDelete="CASCADE" onUpdate="NO ACTION" referencedColumnNames="ID"
                                 referencedTableName="PROJECT" validate="true"/>

        <dropForeignKeyConstraint baseTableName="FINDINGATTRIBUTION" constraintName="FINDINGATTRIBUTION_COMPONENT_FK"/>
        <addForeignKeyConstraint baseColumnNames="COMPONENT_ID" baseTableName="FINDINGATTRIBUTION"
                                 constraintName="FINDINGATTRIBUTION_COMPONENT_FK" deferrable="true" initiallyDeferred="true"
                                 onDelete="CASCADE" onUpdate="NO ACTION" referencedColumnNames="ID"
                                 referencedTableName="COMPONENT" validate="true"/>

        <dropForeignKeyConstraint baseTableName="FINDINGATTRIBUTION" constraintName="FINDINGATTRIBUTION_PROJECT_FK"/>
        <addForeignKeyConstraint baseColumnNames="PROJECT_ID" baseTableName="FINDINGATTRIBUTION"
                                 constraintName="FINDINGATTRIBUTION_PROJECT_FK" deferrable="true" initiallyDeferred="true"
                                 onDelete="CASCADE" onUpdate="NO ACTION" referencedColumnNames="ID"
                                 referencedTableName="PROJECT" validate="true"/>

        <dropForeignKeyConstraint baseTableName="FINDINGATTRIBUTION" constraintName="FINDINGATTRIBUTION_VULNERABILITY_FK"/>
        <addForeignKeyConstraint baseColumnNames="VULNERABILITY_ID" baseTableName="FINDINGATTRIBUTION"
                                 constraintName="FINDINGATTRIBUTION_VULNERABILITY_FK" deferrable="true" initiallyDeferred="true"
                                 onDelete="CASCADE" onUpdate="NO ACTION" referencedColumnNames="ID"
                                 referencedTableName="VULNERABILITY" validate="true"/>

        <dropForeignKeyConstraint baseTableName="INTEGRITY_ANALYSIS" constraintName="INTEGRITY_ANALYSIS_COMPONENT_FK"/>
        <addForeignKeyConstraint baseColumnNames="COMPONENT_ID" baseTableName="INTEGRITY_ANALYSIS"
                                 constraintName="INTEGRITY_ANALYSIS_COMPONENT_FK" deferrable="true" initiallyDeferred="true"
                                 onDelete="CASCADE" onUpdate="NO ACTION" referencedColumnNames="ID"
                                 referencedTableName="COMPONENT" validate="true"/>

        <dropForeignKeyConstraint baseTableName="LDAPUSERS_PERMISSIONS" constraintName="LDAPUSERS_PERMISSIONS_LDAPUSER_FK"/>
        <addForeignKeyConstraint baseColumnNames="LDAPUSER_ID" baseTableName="LDAPUSERS_PERMISSIONS"
                                 constraintName="LDAPUSERS_PERMISSIONS_LDAPUSER_FK" deferrable="true" initiallyDeferred="true"
                                 onDelete="CASCADE" onUpdate="NO ACTION" referencedColumnNames="ID"
                                 referencedTableName="LDAPUSER" validate="true"/>

        <dropForeignKeyConstraint baseTableName="LDAPUSERS_PERMISSIONS" constraintName="LDAPUSERS_PERMISSIONS_PERMISSION_FK"/>
        <addForeignKeyConstraint baseColumnNames="PERMISSION_ID" baseTableName="LDAPUSERS_PERMISSIONS"
                                 constraintName="LDAPUSERS_PERMISSIONS_PERMISSION_FK" deferrable="true" initiallyDeferred="true"
                                 onDelete="CASCADE" onUpdate="NO ACTION" referencedColumnNames="ID"
                                 referencedTableName="PERMISSION" validate="true"/>

        <dropForeignKeyConstraint baseTableName="LDAPUSERS_TEAMS" constraintName="LDAPUSERS_TEAMS_TEAM_FK"/>
        <addForeignKeyConstraint baseColumnNames="TEAM_ID" baseTableName="LDAPUSERS_TEAMS"
                                 constraintName="LDAPUSERS_TEAMS_TEAM_FK" deferrable="true" initiallyDeferred="true"
                                 onDelete="CASCADE" onUpdate="NO ACTION" referencedColumnNames="ID"
                                 referencedTableName="TEAM" validate="true"/>

        <dropForeignKeyConstraint baseTableName="LDAPUSERS_TEAMS" constraintName="LDAPUSERS_TEAMS_LDAPUSER_FK"/>
        <addForeignKeyConstraint baseColumnNames="LDAPUSER_ID" baseTableName="LDAPUSERS_TEAMS"
                                 constraintName="LDAPUSERS_TEAMS_LDAPUSER_FK" deferrable="true" initiallyDeferred="true"
                                 onDelete="CASCADE" onUpdate="NO ACTION" referencedColumnNames="ID"
                                 referencedTableName="LDAPUSER" validate="true"/>

        <dropForeignKeyConstraint baseTableName="LICENSEGROUP_LICENSE" constraintName="LICENSEGROUP_LICENSE_LICENSEGROUP_FK"/>
        <addForeignKeyConstraint baseColumnNames="LICENSEGROUP_ID" baseTableName="LICENSEGROUP_LICENSE"
                                 constraintName="LICENSEGROUP_LICENSE_LICENSEGROUP_FK" deferrable="true" initiallyDeferred="true"
                                 onDelete="CASCADE" onUpdate="NO ACTION" referencedColumnNames="ID"
                                 referencedTableName="LICENSEGROUP" validate="true"/>

        <dropForeignKeyConstraint baseTableName="LICENSEGROUP_LICENSE" constraintName="LICENSEGROUP_LICENSE_LICENSE_FK"/>
        <addForeignKeyConstraint baseColumnNames="LICENSE_ID" baseTableName="LICENSEGROUP_LICENSE"
                                 constraintName="LICENSEGROUP_LICENSE_LICENSE_FK" deferrable="true" initiallyDeferred="true"
                                 onDelete="CASCADE" onUpdate="NO ACTION" referencedColumnNames="ID"
                                 referencedTableName="LICENSE" validate="true"/>

        <dropForeignKeyConstraint baseTableName="MANAGEDUSERS_PERMISSIONS" constraintName="MANAGEDUSERS_PERMISSIONS_MANAGEDUSER_FK"/>
        <addForeignKeyConstraint baseColumnNames="MANAGEDUSER_ID" baseTableName="MANAGEDUSERS_PERMISSIONS"
                                 constraintName="MANAGEDUSERS_PERMISSIONS_MANAGEDUSER_FK" deferrable="true"
                                 initiallyDeferred="true" onDelete="CASCADE" onUpdate="NO ACTION"
                                 referencedColumnNames="ID" referencedTableName="MANAGEDUSER" validate="true"/>

        <dropForeignKeyConstraint baseTableName="MANAGEDUSERS_PERMISSIONS" constraintName="MANAGEDUSERS_PERMISSIONS_PERMISSION_FK"/>
        <addForeignKeyConstraint baseColumnNames="PERMISSION_ID" baseTableName="MANAGEDUSERS_PERMISSIONS"
                                 constraintName="MANAGEDUSERS_PERMISSIONS_PERMISSION_FK" deferrable="true"
                                 initiallyDeferred="true" onDelete="CASCADE" onUpdate="NO ACTION"
                                 referencedColumnNames="ID" referencedTableName="PERMISSION" validate="true"/>

        <dropForeignKeyConstraint baseTableName="MANAGEDUSERS_TEAMS" constraintName="MANAGEDUSERS_TEAMS_TEAM_FK"/>
        <addForeignKeyConstraint baseColumnNames="TEAM_ID" baseTableName="MANAGEDUSERS_TEAMS"
                                 constraintName="MANAGEDUSERS_TEAMS_TEAM_FK" deferrable="true" initiallyDeferred="true"
                                 onDelete="CASCADE" onUpdate="NO ACTION" referencedColumnNames="ID"
                                 referencedTableName="TEAM" validate="true"/>

        <dropForeignKeyConstraint baseTableName="MANAGEDUSERS_TEAMS" constraintName="MANAGEDUSERS_TEAMS_MANAGEDUSER_FK"/>
        <addForeignKeyConstraint baseColumnNames="MANAGEDUSER_ID" baseTableName="MANAGEDUSERS_TEAMS"
                                 constraintName="MANAGEDUSERS_TEAMS_MANAGEDUSER_FK" deferrable="true" initiallyDeferred="true"
                                 onDelete="CASCADE" onUpdate="NO ACTION" referencedColumnNames="ID"
                                 referencedTableName="MANAGEDUSER" validate="true"/>

        <dropForeignKeyConstraint baseTableName="MAPPEDLDAPGROUP" constraintName="MAPPEDLDAPGROUP_TEAM_FK"/>
        <addForeignKeyConstraint baseColumnNames="TEAM_ID" baseTableName="MAPPEDLDAPGROUP"
                                 constraintName="MAPPEDLDAPGROUP_TEAM_FK" deferrable="true" initiallyDeferred="true"
                                 onDelete="CASCADE" onUpdate="NO ACTION" referencedColumnNames="ID"
                                 referencedTableName="TEAM" validate="true"/>

        <dropForeignKeyConstraint baseTableName="MAPPEDOIDCGROUP" constraintName="MAPPEDOIDCGROUP_OIDCGROUP_FK"/>
        <addForeignKeyConstraint baseColumnNames="GROUP_ID" baseTableName="MAPPEDOIDCGROUP"
                                 constraintName="MAPPEDOIDCGROUP_OIDCGROUP_FK" deferrable="true" initiallyDeferred="true"
                                 onDelete="CASCADE" onUpdate="NO ACTION" referencedColumnNames="ID"
                                 referencedTableName="OIDCGROUP" validate="true"/>

        <dropForeignKeyConstraint baseTableName="MAPPEDOIDCGROUP" constraintName="MAPPEDOIDCGROUP_TEAM_FK"/>
        <addForeignKeyConstraint baseColumnNames="TEAM_ID" baseTableName="MAPPEDOIDCGROUP"
                                 constraintName="MAPPEDOIDCGROUP_TEAM_FK" deferrable="true" initiallyDeferred="true"
                                 onDelete="CASCADE" onUpdate="NO ACTION" referencedColumnNames="ID"
                                 referencedTableName="TEAM" validate="true"/>

        <dropForeignKeyConstraint baseTableName="NOTIFICATIONRULE" constraintName="NOTIFICATIONRULE_NOTIFICATIONPUBLISHER_FK"/>
        <addForeignKeyConstraint baseColumnNames="PUBLISHER" baseTableName="NOTIFICATIONRULE"
                                 constraintName="NOTIFICATIONRULE_NOTIFICATIONPUBLISHER_FK" deferrable="true" initiallyDeferred="true"
                                 onDelete="CASCADE" onUpdate="NO ACTION" referencedColumnNames="ID"
                                 referencedTableName="NOTIFICATIONPUBLISHER" validate="true"/>

        <dropForeignKeyConstraint baseTableName="NOTIFICATIONRULE_PROJECTS" constraintName="NOTIFICATIONRULE_PROJECTS_NOTIFICATIONRULE_FK"/>
        <addForeignKeyConstraint baseColumnNames="NOTIFICATIONRULE_ID" baseTableName="NOTIFICATIONRULE_PROJECTS"
                                 constraintName="NOTIFICATIONRULE_PROJECTS_NOTIFICATIONRULE_FK" deferrable="true"
                                 initiallyDeferred="true" onDelete="CASCADE" onUpdate="NO ACTION"
                                 referencedColumnNames="ID" referencedTableName="NOTIFICATIONRULE" validate="true"/>

        <dropForeignKeyConstraint baseTableName="NOTIFICATIONRULE_PROJECTS" constraintName="NOTIFICATIONRULE_PROJECTS_PROJECT_FK"/>
        <addForeignKeyConstraint baseColumnNames="PROJECT_ID" baseTableName="NOTIFICATIONRULE_PROJECTS"
                                 constraintName="NOTIFICATIONRULE_PROJECTS_PROJECT_FK" deferrable="true"
                                 initiallyDeferred="true" onDelete="CASCADE" onUpdate="NO ACTION"
                                 referencedColumnNames="ID" referencedTableName="PROJECT" validate="true"/>

        <dropForeignKeyConstraint baseTableName="NOTIFICATIONRULE_TAGS" constraintName="NOTIFICATIONRULE_TAGS_TAG_FK"/>
        <addForeignKeyConstraint baseColumnNames="TAG_ID" baseTableName="NOTIFICATIONRULE_TAGS"
                                 constraintName="NOTIFICATIONRULE_TAGS_TAG_FK" deferrable="true" initiallyDeferred="true"
                                 onDelete="CASCADE" onUpdate="NO ACTION" referencedColumnNames="ID"
                                 referencedTableName="TAG" validate="true"/>

        <dropForeignKeyConstraint baseTableName="NOTIFICATIONRULE_TAGS" constraintName="NOTIFICATIONRULE_TAGS_NOTIFICATIONRULE_FK"/>
        <addForeignKeyConstraint baseColumnNames="NOTIFICATIONRULE_ID" baseTableName="NOTIFICATIONRULE_TAGS"
                                 constraintName="NOTIFICATIONRULE_TAGS_NOTIFICATIONRULE_FK" deferrable="true" initiallyDeferred="true"
                                 onDelete="CASCADE" onUpdate="NO ACTION" referencedColumnNames="ID"
                                 referencedTableName="NOTIFICATIONRULE" validate="true"/>

        <dropForeignKeyConstraint baseTableName="NOTIFICATIONRULE_TEAMS" constraintName="NOTIFICATIONRULE_TEAMS_NOTIFICATIONRULE_FK"/>
        <addForeignKeyConstraint baseColumnNames="NOTIFICATIONRULE_ID" baseTableName="NOTIFICATIONRULE_TEAMS"
                                 constraintName="NOTIFICATIONRULE_TEAMS_NOTIFICATIONRULE_FK" deferrable="true" initiallyDeferred="true"
                                 onDelete="CASCADE" onUpdate="NO ACTION" referencedColumnNames="ID"
                                 referencedTableName="NOTIFICATIONRULE" validate="true"/>

        <dropForeignKeyConstraint baseTableName="NOTIFICATIONRULE_TEAMS" constraintName="NOTIFICATIONRULE_TEAMS_TEAM_FK"/>
        <addForeignKeyConstraint baseColumnNames="TEAM_ID" baseTableName="NOTIFICATIONRULE_TEAMS"
                                 constraintName="NOTIFICATIONRULE_TEAMS_TEAM_FK" deferrable="true" initiallyDeferred="true"
                                 onDelete="CASCADE" onUpdate="NO ACTION" referencedColumnNames="ID"
                                 referencedTableName="TEAM" validate="true"/>

        <dropForeignKeyConstraint baseTableName="OIDCUSERS_PERMISSIONS" constraintName="OIDCUSERS_PERMISSIONS_PERMISSION_FK"/>
        <addForeignKeyConstraint baseColumnNames="PERMISSION_ID" baseTableName="OIDCUSERS_PERMISSIONS"
                                 constraintName="OIDCUSERS_PERMISSIONS_PERMISSION_FK" deferrable="true" initiallyDeferred="true"
                                 onDelete="CASCADE" onUpdate="NO ACTION" referencedColumnNames="ID"
                                 referencedTableName="PERMISSION" validate="true"/>

        <dropForeignKeyConstraint baseTableName="OIDCUSERS_PERMISSIONS" constraintName="OIDCUSERS_PERMISSIONS_OIDCUSER_FK"/>
        <addForeignKeyConstraint baseColumnNames="OIDCUSER_ID" baseTableName="OIDCUSERS_PERMISSIONS"
                                 constraintName="OIDCUSERS_PERMISSIONS_OIDCUSER_FK" deferrable="true" initiallyDeferred="true"
                                 onDelete="CASCADE" onUpdate="NO ACTION" referencedColumnNames="ID"
                                 referencedTableName="OIDCUSER" validate="true"/>

        <dropForeignKeyConstraint baseTableName="OIDCUSERS_TEAMS" constraintName="OIDCUSERS_TEAMS_OIDCUSER_FK"/>
        <addForeignKeyConstraint baseColumnNames="OIDCUSERS_ID" baseTableName="OIDCUSERS_TEAMS"
                                 constraintName="OIDCUSERS_TEAMS_OIDCUSER_FK" deferrable="true" initiallyDeferred="true"
                                 onDelete="CASCADE" onUpdate="NO ACTION" referencedColumnNames="ID"
                                 referencedTableName="OIDCUSER" validate="true"/>

        <dropForeignKeyConstraint baseTableName="OIDCUSERS_TEAMS" constraintName="OIDCUSERS_TEAMS_TEAM_FK"/>
        <addForeignKeyConstraint baseColumnNames="TEAM_ID" baseTableName="OIDCUSERS_TEAMS"
                                 constraintName="OIDCUSERS_TEAMS_TEAM_FK" deferrable="true" initiallyDeferred="true"
                                 onDelete="CASCADE" onUpdate="NO ACTION" referencedColumnNames="ID"
                                 referencedTableName="TEAM" validate="true"/>

        <dropForeignKeyConstraint baseTableName="POLICYCONDITION" constraintName="POLICYCONDITION_POLICY_FK"/>
        <addForeignKeyConstraint baseColumnNames="POLICY_ID" baseTableName="POLICYCONDITION"
                                 constraintName="POLICYCONDITION_POLICY_FK" deferrable="true" initiallyDeferred="true"
                                 onDelete="CASCADE" onUpdate="NO ACTION" referencedColumnNames="ID"
                                 referencedTableName="POLICY" validate="true"/>

        <dropForeignKeyConstraint baseTableName="POLICYVIOLATION" constraintName="POLICYVIOLATION_COMPONENT_FK"/>
        <addForeignKeyConstraint baseColumnNames="COMPONENT_ID" baseTableName="POLICYVIOLATION"
                                 constraintName="POLICYVIOLATION_COMPONENT_FK" deferrable="true" initiallyDeferred="true"
                                 onDelete="CASCADE" onUpdate="NO ACTION" referencedColumnNames="ID"
                                 referencedTableName="COMPONENT" validate="true"/>

        <dropForeignKeyConstraint baseTableName="POLICYVIOLATION" constraintName="POLICYVIOLATION_POLICYCONDITION_FK"/>
        <addForeignKeyConstraint baseColumnNames="POLICYCONDITION_ID" baseTableName="POLICYVIOLATION"
                                 constraintName="POLICYVIOLATION_POLICYCONDITION_FK" deferrable="true" initiallyDeferred="true"
                                 onDelete="CASCADE" onUpdate="NO ACTION" referencedColumnNames="ID"
                                 referencedTableName="POLICYCONDITION" validate="true"/>

        <dropForeignKeyConstraint baseTableName="POLICYVIOLATION" constraintName="POLICYVIOLATION_PROJECT_FK"/>
        <addForeignKeyConstraint baseColumnNames="PROJECT_ID" baseTableName="POLICYVIOLATION"
                                 constraintName="POLICYVIOLATION_PROJECT_FK" deferrable="true" initiallyDeferred="true"
                                 onDelete="CASCADE" onUpdate="NO ACTION" referencedColumnNames="ID"
                                 referencedTableName="PROJECT" validate="true"/>

        <dropForeignKeyConstraint baseTableName="POLICY_PROJECTS" constraintName="POLICY_PROJECTS_POLICY_FK"/>
        <addForeignKeyConstraint baseColumnNames="POLICY_ID" baseTableName="POLICY_PROJECTS"
                                 constraintName="POLICY_PROJECTS_POLICY_FK" deferrable="true" initiallyDeferred="true"
                                 onDelete="CASCADE" onUpdate="NO ACTION" referencedColumnNames="ID"
                                 referencedTableName="POLICY" validate="true"/>

        <dropForeignKeyConstraint baseTableName="POLICY_PROJECTS" constraintName="POLICY_PROJECTS_PROJECT_FK"/>
        <addForeignKeyConstraint baseColumnNames="PROJECT_ID" baseTableName="POLICY_PROJECTS"
                                 constraintName="POLICY_PROJECTS_PROJECT_FK" deferrable="true" initiallyDeferred="true"
                                 onDelete="CASCADE" onUpdate="NO ACTION" referencedColumnNames="ID"
                                 referencedTableName="PROJECT" validate="true"/>

        <dropForeignKeyConstraint baseTableName="POLICY_TAGS" constraintName="POLICY_TAGS_POLICY_FK"/>
        <addForeignKeyConstraint baseColumnNames="POLICY_ID" baseTableName="POLICY_TAGS"
                                 constraintName="POLICY_TAGS_POLICY_FK" deferrable="true" initiallyDeferred="true"
                                 onDelete="CASCADE" onUpdate="NO ACTION" referencedColumnNames="ID"
                                 referencedTableName="POLICY" validate="true"/>

        <dropForeignKeyConstraint baseTableName="POLICY_TAGS" constraintName="POLICY_TAGS_TAG_FK"/>
        <addForeignKeyConstraint baseColumnNames="TAG_ID" baseTableName="POLICY_TAGS" constraintName="POLICY_TAGS_TAG_FK"
                                 deferrable="true" initiallyDeferred="true" onDelete="CASCADE" onUpdate="NO ACTION"
                                 referencedColumnNames="ID" referencedTableName="TAG" validate="true"/>

        <dropForeignKeyConstraint baseTableName="PROJECT" constraintName="PROJECT_PROJECT_FK"/>
        <addForeignKeyConstraint baseColumnNames="PARENT_PROJECT_ID" baseTableName="PROJECT"
                                 constraintName="PROJECT_PROJECT_FK" deferrable="true" initiallyDeferred="true"
                                 onDelete="CASCADE" onUpdate="NO ACTION" referencedColumnNames="ID"
                                 referencedTableName="PROJECT" validate="true"/>

        <dropForeignKeyConstraint baseTableName="PROJECTMETRICS" constraintName="PROJECTMETRICS_PROJECT_FK"/>
        <addForeignKeyConstraint baseColumnNames="PROJECT_ID" baseTableName="PROJECTMETRICS"
                                 constraintName="PROJECTMETRICS_PROJECT_FK" deferrable="true" initiallyDeferred="true"
                                 onDelete="CASCADE" onUpdate="NO ACTION" referencedColumnNames="ID"
                                 referencedTableName="PROJECT" validate="true"/>

        <dropForeignKeyConstraint baseTableName="PROJECTS_TAGS" constraintName="PROJECTS_TAGS_TAG_FK"/>
        <addForeignKeyConstraint baseColumnNames="TAG_ID" baseTableName="PROJECTS_TAGS"
                                 constraintName="PROJECTS_TAGS_TAG_FK" deferrable="true" initiallyDeferred="true"
                                 onDelete="CASCADE" onUpdate="NO ACTION" referencedColumnNames="ID"
                                 referencedTableName="TAG" validate="true"/>

        <dropForeignKeyConstraint baseTableName="PROJECTS_TAGS" constraintName="PROJECTS_TAGS_PROJECT_FK"/>
        <addForeignKeyConstraint baseColumnNames="PROJECT_ID" baseTableName="PROJECTS_TAGS"
                                 constraintName="PROJECTS_TAGS_PROJECT_FK" deferrable="true" initiallyDeferred="true"
                                 onDelete="CASCADE" onUpdate="NO ACTION" referencedColumnNames="ID"
                                 referencedTableName="PROJECT" validate="true"/>

        <dropForeignKeyConstraint baseTableName="PROJECT_ACCESS_TEAMS" constraintName="PROJECT_ACCESS_TEAMS_PROJECT_FK"/>
        <addForeignKeyConstraint baseColumnNames="PROJECT_ID" baseTableName="PROJECT_ACCESS_TEAMS"
                                 constraintName="PROJECT_ACCESS_TEAMS_PROJECT_FK" deferrable="true" initiallyDeferred="true"
                                 onDelete="CASCADE" onUpdate="NO ACTION" referencedColumnNames="ID"
                                 referencedTableName="PROJECT" validate="true"/>

        <dropForeignKeyConstraint baseTableName="PROJECT_ACCESS_TEAMS" constraintName="PROJECT_ACCESS_TEAMS_TEAM_FK"/>
        <addForeignKeyConstraint baseColumnNames="TEAM_ID" baseTableName="PROJECT_ACCESS_TEAMS"
                                 constraintName="PROJECT_ACCESS_TEAMS_TEAM_FK" deferrable="true" initiallyDeferred="true"
                                 onDelete="CASCADE" onUpdate="NO ACTION" referencedColumnNames="ID"
                                 referencedTableName="TEAM" validate="true"/>

        <dropForeignKeyConstraint baseTableName="PROJECT_METADATA" constraintName="PROJECT_METADATA_PROJECT_ID_FK"/>
        <addForeignKeyConstraint baseTableName="PROJECT_METADATA" baseColumnNames="PROJECT_ID"
                                 constraintName="PROJECT_METADATA_PROJECT_ID_FK" deferrable="true" initiallyDeferred="true"
                                 referencedTableName="PROJECT" referencedColumnNames="ID"
                                 onDelete="CASCADE" onUpdate="NO ACTION" validate="true"/>

        <dropForeignKeyConstraint baseTableName="PROJECT_PROPERTY" constraintName="PROJECT_PROPERTY_PROJECT_FK"/>
        <addForeignKeyConstraint baseColumnNames="PROJECT_ID" baseTableName="PROJECT_PROPERTY"
                                 constraintName="PROJECT_PROPERTY_PROJECT_FK" deferrable="true" initiallyDeferred="true"
                                 onDelete="CASCADE" onUpdate="NO ACTION" referencedColumnNames="ID"
                                 referencedTableName="PROJECT" validate="true"/>

        <dropForeignKeyConstraint baseTableName="SERVICECOMPONENTS_VULNERABILITIES" constraintName="SERVICECOMPONENTS_VULNERABILITIES_VULNERABILITY_FK"/>
        <addForeignKeyConstraint baseColumnNames="VULNERABILITY_ID" baseTableName="SERVICECOMPONENTS_VULNERABILITIES"
                                 constraintName="SERVICECOMPONENTS_VULNERABILITIES_VULNERABILITY_FK" deferrable="true"
                                 initiallyDeferred="true" onDelete="CASCADE" onUpdate="NO ACTION"
                                 referencedColumnNames="ID" referencedTableName="VULNERABILITY" validate="true"/>

        <dropForeignKeyConstraint baseTableName="SERVICECOMPONENTS_VULNERABILITIES" constraintName="SERVICECOMPONENTS_VULNERABILITIES_SERVICECOMPONENT_FK"/>
        <addForeignKeyConstraint baseColumnNames="SERVICECOMPONENT_ID" baseTableName="SERVICECOMPONENTS_VULNERABILITIES"
                                 constraintName="SERVICECOMPONENTS_VULNERABILITIES_SERVICECOMPONENT_FK" deferrable="true"
                                 initiallyDeferred="true" onDelete="CASCADE" onUpdate="NO ACTION"
                                 referencedColumnNames="ID" referencedTableName="SERVICECOMPONENT" validate="true"/>

        <dropForeignKeyConstraint baseTableName="SERVICECOMPONENT" constraintName="SERVICECOMPONENT_SERVICECOMPONENT_FK"/>
        <addForeignKeyConstraint baseColumnNames="PARENT_SERVICECOMPONENT_ID" baseTableName="SERVICECOMPONENT"
                                 constraintName="SERVICECOMPONENT_SERVICECOMPONENT_FK" deferrable="true" initiallyDeferred="true"
                                 onDelete="CASCADE" onUpdate="NO ACTION" referencedColumnNames="ID"
                                 referencedTableName="SERVICECOMPONENT" validate="true"/>

        <dropForeignKeyConstraint baseTableName="SERVICECOMPONENT" constraintName="SERVICECOMPONENT_PROJECT_FK"/>
        <addForeignKeyConstraint baseColumnNames="PROJECT_ID" baseTableName="SERVICECOMPONENT"
                                 constraintName="SERVICECOMPONENT_PROJECT_FK" deferrable="true" initiallyDeferred="true"
                                 onDelete="CASCADE" onUpdate="NO ACTION" referencedColumnNames="ID"
                                 referencedTableName="PROJECT" validate="true"/>

        <dropForeignKeyConstraint baseTableName="TEAMS_PERMISSIONS" constraintName="TEAMS_PERMISSIONS_TEAM_FK"/>
        <addForeignKeyConstraint baseColumnNames="TEAM_ID" baseTableName="TEAMS_PERMISSIONS"
                                 constraintName="TEAMS_PERMISSIONS_TEAM_FK" deferrable="true" initiallyDeferred="true"
                                 onDelete="CASCADE" onUpdate="NO ACTION" referencedColumnNames="ID"
                                 referencedTableName="TEAM" validate="true"/>

        <dropForeignKeyConstraint baseTableName="TEAMS_PERMISSIONS" constraintName="TEAMS_PERMISSIONS_PERMISSION_FK"/>
        <addForeignKeyConstraint baseColumnNames="PERMISSION_ID" baseTableName="TEAMS_PERMISSIONS"
                                 constraintName="TEAMS_PERMISSIONS_PERMISSION_FK" deferrable="true" initiallyDeferred="true"
                                 onDelete="CASCADE" onUpdate="NO ACTION" referencedColumnNames="ID"
                                 referencedTableName="PERMISSION" validate="true"/>

        <dropForeignKeyConstraint baseTableName="VEX" constraintName="VEX_PROJECT_FK"/>
        <addForeignKeyConstraint baseColumnNames="PROJECT_ID" baseTableName="VEX" constraintName="VEX_PROJECT_FK"
                                 deferrable="true" initiallyDeferred="true" onDelete="CASCADE" onUpdate="NO ACTION"
                                 referencedColumnNames="ID" referencedTableName="PROJECT" validate="true"/>

        <dropForeignKeyConstraint baseTableName="VIOLATIONANALYSISCOMMENT" constraintName="VIOLATIONANALYSISCOMMENT_VIOLATIONANALYSIS_FK"/>
        <addForeignKeyConstraint baseColumnNames="VIOLATIONANALYSIS_ID" baseTableName="VIOLATIONANALYSISCOMMENT"
                                 constraintName="VIOLATIONANALYSISCOMMENT_VIOLATIONANALYSIS_FK" deferrable="true"
                                 initiallyDeferred="true" onDelete="CASCADE" onUpdate="NO ACTION"
                                 referencedColumnNames="ID" referencedTableName="VIOLATIONANALYSIS" validate="true"/>

        <dropForeignKeyConstraint baseTableName="VIOLATIONANALYSIS" constraintName="VIOLATIONANALYSIS_COMPONENT_FK"/>
        <addForeignKeyConstraint baseColumnNames="COMPONENT_ID" baseTableName="VIOLATIONANALYSIS"
                                 constraintName="VIOLATIONANALYSIS_COMPONENT_FK" deferrable="true" initiallyDeferred="true"
                                 onDelete="CASCADE" onUpdate="NO ACTION" referencedColumnNames="ID"
                                 referencedTableName="COMPONENT" validate="true"/>

        <dropForeignKeyConstraint baseTableName="VIOLATIONANALYSIS" constraintName="VIOLATIONANALYSIS_POLICYVIOLATION_FK"/>
        <addForeignKeyConstraint baseColumnNames="POLICYVIOLATION_ID" baseTableName="VIOLATIONANALYSIS"
                                 constraintName="VIOLATIONANALYSIS_POLICYVIOLATION_FK" deferrable="true" initiallyDeferred="true"
                                 onDelete="CASCADE" onUpdate="NO ACTION" referencedColumnNames="ID"
                                 referencedTableName="POLICYVIOLATION" validate="true"/>

        <dropForeignKeyConstraint baseTableName="VIOLATIONANALYSIS" constraintName="VIOLATIONANALYSIS_PROJECT_FK"/>
        <addForeignKeyConstraint baseColumnNames="PROJECT_ID" baseTableName="VIOLATIONANALYSIS"
                                 constraintName="VIOLATIONANALYSIS_PROJECT_FK" deferrable="true" initiallyDeferred="true"
                                 onDelete="CASCADE" onUpdate="NO ACTION" referencedColumnNames="ID"
                                 referencedTableName="PROJECT" validate="true"/>

        <dropForeignKeyConstraint baseTableName="VULNERABILITIES_TAGS" constraintName="VULNERABILITIES_TAGS_TAG_FK"/>
        <addForeignKeyConstraint baseColumnNames="TAG_ID" baseTableName="VULNERABILITIES_TAGS"
                                 constraintName="VULNERABILITIES_TAGS_TAG_FK" deferrable="true" initiallyDeferred="true"
                                 onDelete="CASCADE" onUpdate="NO ACTION" referencedColumnNames="ID"
                                 referencedTableName="TAG" validate="true"/>

        <dropForeignKeyConstraint baseTableName="VULNERABILITIES_TAGS" constraintName="VULNERABILITIES_TAGS_VULNERABILITY_FK"/>
        <addForeignKeyConstraint baseColumnNames="VULNERABILITY_ID" baseTableName="VULNERABILITIES_TAGS"
                                 constraintName="VULNERABILITIES_TAGS_VULNERABILITY_FK" deferrable="true" initiallyDeferred="true"
                                 onDelete="CASCADE" onUpdate="NO ACTION" referencedColumnNames="ID"
                                 referencedTableName="VULNERABILITY" validate="true"/>

        <dropForeignKeyConstraint baseTableName="VULNERABLESOFTWARE_VULNERABILITIES" constraintName="VULNERABLESOFTWARE_VULNERABILITIES_VULNERABILITY_FK"/>
        <addForeignKeyConstraint baseColumnNames="VULNERABILITY_ID" baseTableName="VULNERABLESOFTWARE_VULNERABILITIES"
                                 constraintName="VULNERABLESOFTWARE_VULNERABILITIES_VULNERABILITY_FK" deferrable="true"
                                 initiallyDeferred="true" onDelete="CASCADE" onUpdate="NO ACTION"
                                 referencedColumnNames="ID" referencedTableName="VULNERABILITY" validate="true"/>

        <dropForeignKeyConstraint baseTableName="VULNERABLESOFTWARE_VULNERABILITIES" constraintName="VULNERABLESOFTWARE_VULNERABILITIES_VULNERABLESOFTWARE_FK"/>
        <addForeignKeyConstraint baseColumnNames="VULNERABLESOFTWARE_ID"
                                 baseTableName="VULNERABLESOFTWARE_VULNERABILITIES"
                                 constraintName="VULNERABLESOFTWARE_VULNERABILITIES_VULNERABLESOFTWARE_FK" deferrable="true"
                                 initiallyDeferred="true" onDelete="CASCADE" onUpdate="NO ACTION"
                                 referencedColumnNames="ID" referencedTableName="VULNERABLESOFTWARE" validate="true"/>

        <dropForeignKeyConstraint baseTableName="WORKFLOW_STATE" constraintName="WORKFLOW_STATE_WORKFLOW_STATE_FK"/>
        <addForeignKeyConstraint baseColumnNames="PARENT_STEP_ID" baseTableName="WORKFLOW_STATE"
                                 constraintName="WORKFLOW_STATE_WORKFLOW_STATE_FK" deferrable="true" initiallyDeferred="true"
                                 onDelete="CASCADE" onUpdate="NO ACTION" referencedColumnNames="ID"
                                 referencedTableName="WORKFLOW_STATE" validate="true"/>
    </changeSet>

    <changeSet id="v5.6.0-13" author="nscuro">
        <createTable tableName="COMPONENT_OCCURRENCE">
            <column name="ID" type="UUID">
                <constraints primaryKey="true" primaryKeyName="COMPONENT_OCCURRENCE_PK"/>
            </column>
            <column name="COMPONENT_ID" type="BIGINT">
                <constraints nullable="false"/>
            </column>
            <column name="LOCATION" type="TEXT">
                <constraints nullable="false"/>
            </column>
            <column name="LINE" type="INT"/>
            <column name="OFFSET" type="INT"/>
            <column name="SYMBOL" type="TEXT"/>
            <column name="CREATED_AT" type="TIMESTAMPTZ(3)" defaultValue="NOW()">
                <constraints nullable="false"/>
            </column>
        </createTable>

        <addForeignKeyConstraint
                baseTableName="COMPONENT_OCCURRENCE"
                baseColumnNames="COMPONENT_ID"
                constraintName="COMPONENT_OCCURRENCE_COMPONENT_FK"
                referencedTableName="COMPONENT"
                referencedColumnNames="ID"
                deferrable="true"
                initiallyDeferred="true"
                onDelete="CASCADE"
                onUpdate="NO ACTION"
                validate="true"/>

        <createIndex
                tableName="COMPONENT_OCCURRENCE"
                indexName="COMPONENT_OCCURRENCE_COMPONENT_ID_IDX">
            <column name="COMPONENT_ID"/>
        </createIndex>
    </changeSet>

    <changeSet id="v5.6.0-14" author="nscuro">
        <dropIndex tableName="PROJECT_ACCESS_TEAMS" indexName="PROJECT_ACCESS_TEAMS_PROJECT_ID_IDX"/>
        <dropIndex tableName="PROJECT_ACCESS_TEAMS" indexName="PROJECT_ACCESS_TEAMS_TEAM_ID_IDX"/>
        <sql>
            WITH
            cte_duplicate AS (
               SELECT "PROJECT_ID"
                    , "TEAM_ID"
                 FROM "PROJECT_ACCESS_TEAMS"
                GROUP BY "PROJECT_ID"
                       , "TEAM_ID"
               HAVING COUNT(*) > 1
            ),
            cte_deleted_duplicate AS (
              DELETE FROM "PROJECT_ACCESS_TEAMS"
               USING cte_duplicate
               WHERE cte_duplicate."PROJECT_ID" = "PROJECT_ACCESS_TEAMS"."PROJECT_ID"
                 AND cte_duplicate."TEAM_ID" = "PROJECT_ACCESS_TEAMS"."TEAM_ID"
            )
            INSERT INTO "PROJECT_ACCESS_TEAMS" ("PROJECT_ID", "TEAM_ID")
            SELECT "PROJECT_ID", "TEAM_ID" FROM cte_duplicate
        </sql>
        <addPrimaryKey
                tableName="PROJECT_ACCESS_TEAMS"
                columnNames="PROJECT_ID, TEAM_ID"
                constraintName="PROJECT_ACCESS_TEAMS_PK"/>
    </changeSet>

    <changeSet id="v5.6.0-15" author="nscuro">
        <!--
          Previous version of this changeset failed if projects without parent existed.
          Deployments that successfully executed this changeset are in a valid state though.
          https://github.com/DependencyTrack/hyades/issues/1737
        -->
        <validCheckSum>9:e7ba3d0bcd5751d57ada707ec0ffc449</validCheckSum>

        <createTable tableName="PROJECT_HIERARCHY">
            <column name="PARENT_PROJECT_ID" type="BIGINT"/>
            <column name="CHILD_PROJECT_ID" type="BIGINT"/>
            <column name="DEPTH" type="SMALLINT">
                <constraints nullable="false"/>
            </column>
        </createTable>

        <addPrimaryKey
                tableName="PROJECT_HIERARCHY"
                columnNames="PARENT_PROJECT_ID, CHILD_PROJECT_ID"
                constraintName="PROJECT_HIERARCHY_PK"/>
        <addForeignKeyConstraint
                baseTableName="PROJECT_HIERARCHY"
                baseColumnNames="PARENT_PROJECT_ID"
                constraintName="PROJECT_HIERARCHY_PARENT_PROJECT_FK"
                referencedTableName="PROJECT"
                referencedColumnNames="ID"
                deferrable="true"
                initiallyDeferred="true"/>
        <addForeignKeyConstraint
                baseTableName="PROJECT_HIERARCHY"
                baseColumnNames="CHILD_PROJECT_ID"
                constraintName="PROJECT_HIERARCHY_CHILD_PROJECT_FK"
                referencedTableName="PROJECT"
                referencedColumnNames="ID"
                deferrable="true"
                initiallyDeferred="true"/>

        <sql splitStatements="false">
            CREATE FUNCTION project_hierarchy_maintenance_on_project_insert()
            RETURNS TRIGGER AS $$
            BEGIN
              INSERT INTO "PROJECT_HIERARCHY" ("PARENT_PROJECT_ID", "CHILD_PROJECT_ID", "DEPTH")
              VALUES(NEW."ID", NEW."ID", 0);

              INSERT INTO "PROJECT_HIERARCHY" ("PARENT_PROJECT_ID", "CHILD_PROJECT_ID", "DEPTH")
              SELECT "PARENT_PROJECT_ID", NEW."ID", "DEPTH" + 1
                FROM "PROJECT_HIERARCHY"
               WHERE "CHILD_PROJECT_ID" = NEW."PARENT_PROJECT_ID";

              RETURN NEW;
            END;
            $$ LANGUAGE plpgsql;
        </sql>

        <sql splitStatements="false">
            CREATE FUNCTION project_hierarchy_maintenance_on_project_update()
            RETURNS TRIGGER AS $$
            BEGIN
              DELETE FROM "PROJECT_HIERARCHY" WHERE "CHILD_PROJECT_ID" = old."ID";

              INSERT INTO "PROJECT_HIERARCHY" ("PARENT_PROJECT_ID", "CHILD_PROJECT_ID", "DEPTH")
              VALUES (NEW."ID", NEW."ID", 0);

              INSERT INTO "PROJECT_HIERARCHY" ("PARENT_PROJECT_ID", "CHILD_PROJECT_ID", "DEPTH")
              SELECT "PARENT_PROJECT_ID", NEW."ID", "DEPTH" + 1
                FROM "PROJECT_HIERARCHY"
               WHERE "CHILD_PROJECT_ID" = NEW."PARENT_PROJECT_ID";

              RETURN NEW;
            END;
            $$ LANGUAGE plpgsql;
        </sql>

        <sql splitStatements="false">
            CREATE FUNCTION project_hierarchy_maintenance_on_project_delete()
            RETURNS TRIGGER AS $$
            BEGIN
              DELETE FROM "PROJECT_HIERARCHY"
               WHERE "PARENT_PROJECT_ID" IN (SELECT "ID" FROM old_table)
                  OR "CHILD_PROJECT_ID" IN (SELECT "ID" FROM old_table);

              RETURN NULL;
            END;
            $$ LANGUAGE plpgsql;
        </sql>

        <sql splitStatements="true">
            CREATE TRIGGER trigger_project_hierarchy_maintenance_on_project_insert
              AFTER INSERT ON "PROJECT"
              FOR EACH ROW
              EXECUTE FUNCTION project_hierarchy_maintenance_on_project_insert();

            CREATE TRIGGER trigger_project_hierarchy_maintenance_on_project_update
              AFTER UPDATE OF "PARENT_PROJECT_ID" ON "PROJECT"
              FOR EACH ROW
              WHEN (OLD."PARENT_PROJECT_ID" IS DISTINCT FROM NEW."PARENT_PROJECT_ID")
              EXECUTE FUNCTION project_hierarchy_maintenance_on_project_update();

            CREATE TRIGGER trigger_project_hierarchy_maintenance_on_project_delete
              AFTER DELETE ON "PROJECT"
              REFERENCING OLD TABLE AS old_table
              FOR EACH STATEMENT
              EXECUTE FUNCTION project_hierarchy_maintenance_on_project_delete();
        </sql>

        <sql splitStatements="true">
            INSERT INTO "PROJECT_HIERARCHY" ("PARENT_PROJECT_ID", "CHILD_PROJECT_ID", "DEPTH")
            SELECT "ID", "ID", 0 FROM "PROJECT";

            WITH RECURSIVE cte_project_hierarchy AS (
              SELECT "ID" AS child_id
                   , "PARENT_PROJECT_ID" AS parent_id
                   , 1 AS depth
                FROM "PROJECT"
               WHERE "PARENT_PROJECT_ID" IS NOT NULL
               UNION ALL
              SELECT child_id
                   , "PARENT_PROJECT_ID" AS parent_id
                   , depth + 1 AS depth
                FROM cte_project_hierarchy
               INNER JOIN "PROJECT"
                  ON "PROJECT"."ID" = cte_project_hierarchy.parent_id
               WHERE "PROJECT"."PARENT_PROJECT_ID" IS NOT NULL
            )
            INSERT INTO "PROJECT_HIERARCHY" ("PARENT_PROJECT_ID", "CHILD_PROJECT_ID", "DEPTH")
            SELECT parent_id, child_id, depth FROM cte_project_hierarchy;
        </sql>
    </changeSet>

    <changeSet id="v5.6.0-16" author="jhoward-lm">
        <createTable ifNotExists="true" tableName="USER_PROJECT_EFFECTIVE_PERMISSIONS">
            <column name="LDAPUSER_ID" type="BIGINT">
                <constraints nullable="true"
                    foreignKeyName="USER_PROJECT_EFFECTIVE_PERMISSIONS_LDAPUSER_FK"
                    referencedTableName="LDAPUSER" referencedColumnNames="ID"
                    deferrable="true" initiallyDeferred="true" deleteCascade="false"
                    validateForeignKey="true" />
            </column>

            <column name="MANAGEDUSER_ID" type="BIGINT">
                <constraints nullable="true"
                    foreignKeyName="USER_PROJECT_EFFECTIVE_PERMISSIONS_MANAGEDUSER_FK"
                    referencedTableName="MANAGEDUSER" referencedColumnNames="ID"
                    deferrable="true" initiallyDeferred="true" deleteCascade="false"
                    validateForeignKey="true" />
            </column>

            <column name="OIDCUSER_ID" type="BIGINT">
                <constraints nullable="true"
                    foreignKeyName="USER_PROJECT_EFFECTIVE_PERMISSIONS_OIDCUSER_FK"
                    referencedTableName="OIDCUSER" referencedColumnNames="ID"
                    deferrable="true" initiallyDeferred="true" deleteCascade="false"
                    validateForeignKey="true" />
            </column>

            <column name="PROJECT_ID" type="BIGINT">
                <constraints nullable="false"
                    foreignKeyName="USER_PROJECT_EFFECTIVE_PERMISSIONS_PROJECT_FK"
                    referencedTableName="PROJECT" referencedColumnNames="ID"
                    deferrable="true" initiallyDeferred="true" deleteCascade="true"
                    validateForeignKey="true" />
            </column>

            <column name="PERMISSION_ID" type="BIGINT">
                <constraints nullable="false"
                    foreignKeyName="USER_PROJECT_EFFECTIVE_PERMISSIONS_PERMISSION_ID_FK"
                    referencedTableName="PERMISSION" referencedColumnNames="ID"
                    deferrable="true" initiallyDeferred="true" deleteCascade="true"
                    validateForeignKey="true" />
            </column>

            <column name="PERMISSION_NAME" type="VARCHAR(255)">
                <constraints nullable="false"
                    foreignKeyName="USER_PROJECT_EFFECTIVE_PERMISSIONS_PERMISSION_NAME_FK"
                    referencedTableName="PERMISSION" referencedColumnNames="NAME"
                    deferrable="true" initiallyDeferred="true" deleteCascade="true"
                    validateForeignKey="true" />
            </column>
        </createTable>

        <sql splitStatements="true">
            -- Constraint to ensure one and only one of "LDAPUSER_ID", "MANAGEDUSER_ID", and "OIDCUSER_ID" is set
            ALTER TABLE "USER_PROJECT_EFFECTIVE_PERMISSIONS"
              ADD CHECK (
                ("LDAPUSER_ID" IS NOT NULL)::INTEGER +
                ("MANAGEDUSER_ID" IS NOT NULL)::INTEGER +
                ("OIDCUSER_ID" IS NOT NULL)::INTEGER = 1);

            -- Composite unique index on "LDAPUSER_ID", "PROJECT_ID", and "PERMISSION_ID" columns
            CREATE UNIQUE INDEX "USER_PROJECT_EFFECTIVE_PERMISSIONS_LDAPUSERS_IDX"
                ON "USER_PROJECT_EFFECTIVE_PERMISSIONS"
             USING btree ("LDAPUSER_ID", "PROJECT_ID", "PERMISSION_ID")
             WHERE "LDAPUSER_ID" IS NOT NULL;

            -- Composite unique index on "MANAGEDUSER_ID", "PROJECT_ID", and "PERMISSION_ID" columns
            CREATE UNIQUE INDEX "USER_PROJECT_EFFECTIVE_PERMISSIONS_MANAGEDUSERS_IDX"
                ON "USER_PROJECT_EFFECTIVE_PERMISSIONS"
             USING btree ("MANAGEDUSER_ID", "PROJECT_ID", "PERMISSION_ID")
             WHERE "MANAGEDUSER_ID" IS NOT NULL;

            -- Composite unique index on "OIDCUSER_ID", "PROJECT_ID", and "PERMISSION_ID" columns
            CREATE UNIQUE INDEX "USER_PROJECT_EFFECTIVE_PERMISSIONS_OIDCUSERS_IDX"
                ON "USER_PROJECT_EFFECTIVE_PERMISSIONS"
             USING btree ("OIDCUSER_ID", "PROJECT_ID", "PERMISSION_ID")
             WHERE "OIDCUSER_ID" IS NOT NULL;
        </sql>

        <sql splitStatements="false">
            -- Helper function to recalculate all user permissions for a project.
            -- Called by trigger functions to update the values in the USER_PROJECT_EFFECTIVE_PERMISSIONS table.
            CREATE OR REPLACE FUNCTION recalc_user_project_effective_permissions(project_ids BIGINT[])
            RETURNS void AS $$
            BEGIN
              -- Remove any existing effective permissions for this project.
              DELETE FROM "USER_PROJECT_EFFECTIVE_PERMISSIONS"
              WHERE "PROJECT_ID" = ANY(project_ids);

              -- Rebuild effective permissions for LDAP users
              INSERT INTO "USER_PROJECT_EFFECTIVE_PERMISSIONS"
                ("LDAPUSER_ID", "PROJECT_ID", "PERMISSION_ID", "PERMISSION_NAME")
              SELECT DISTINCT lt."LDAPUSER_ID", pat."PROJECT_ID", tp."PERMISSION_ID", p."NAME"
                FROM "PROJECT_ACCESS_TEAMS" pat
               INNER JOIN "TEAMS_PERMISSIONS" tp
                  ON tp."TEAM_ID" = pat."TEAM_ID"
               INNER JOIN "PERMISSION" p
                  ON p."ID" = tp."PERMISSION_ID"
               INNER JOIN "LDAPUSERS_TEAMS" lt
                  ON lt."TEAM_ID" = pat."TEAM_ID"
               WHERE pat."PROJECT_ID" = ANY(project_ids);

              -- Rebuild effective permissions for managed users
              INSERT INTO "USER_PROJECT_EFFECTIVE_PERMISSIONS"
                ("MANAGEDUSER_ID", "PROJECT_ID", "PERMISSION_ID", "PERMISSION_NAME")
              SELECT DISTINCT mt."MANAGEDUSER_ID", pat."PROJECT_ID", tp."PERMISSION_ID", p."NAME"
                FROM "PROJECT_ACCESS_TEAMS" pat
               INNER JOIN "TEAMS_PERMISSIONS" tp
                  ON tp."TEAM_ID" = pat."TEAM_ID"
               INNER JOIN "PERMISSION" p
                  ON p."ID" = tp."PERMISSION_ID"
               INNER JOIN "MANAGEDUSERS_TEAMS" mt
                  ON mt."TEAM_ID" = pat."TEAM_ID"
               WHERE pat."PROJECT_ID" = ANY(project_ids);

              -- Rebuild effective permissions for OIDC users
              INSERT INTO "USER_PROJECT_EFFECTIVE_PERMISSIONS"
                ("OIDCUSER_ID", "PROJECT_ID", "PERMISSION_ID", "PERMISSION_NAME")
              SELECT DISTINCT ot."OIDCUSERS_ID", pat."PROJECT_ID", tp."PERMISSION_ID", p."NAME"
                FROM "PROJECT_ACCESS_TEAMS" pat
               INNER JOIN "TEAMS_PERMISSIONS" tp
                  ON tp."TEAM_ID" = pat."TEAM_ID"
               INNER JOIN "PERMISSION" p
                  ON p."ID" = tp."PERMISSION_ID"
               INNER JOIN "OIDCUSERS_TEAMS" ot
                  ON ot."TEAM_ID" = pat."TEAM_ID"
               WHERE pat."PROJECT_ID" = ANY(project_ids);
            END;
            $$ LANGUAGE plpgsql;
        </sql>

        <sql splitStatements="false">
            CREATE OR REPLACE FUNCTION effective_permissions_mx_on_delete()
            RETURNS TRIGGER AS $$
            DECLARE
              project_ids BIGINT[];
            BEGIN
              IF TG_TABLE_NAME = 'PROJECT_ACCESS_TEAMS' THEN
                PERFORM recalc_user_project_effective_permissions(
                  (SELECT ARRAY_AGG(DISTINCT "PROJECT_ID") FROM old_table)
                );
              ELSIF TG_TABLE_NAME IN (
                'LDAPUSERS_TEAMS', 'MANAGEDUSERS_TEAMS', 'OIDCUSERS_TEAMS', 'TEAMS_PERMISSIONS'
              ) THEN
                PERFORM recalc_user_project_effective_permissions((
                  SELECT ARRAY_AGG(DISTINCT pat."PROJECT_ID")
                    FROM "PROJECT_ACCESS_TEAMS" AS pat
                   INNER JOIN old_table
                      ON old_table."TEAM_ID" = pat."TEAM_ID"
                ));
              END IF;
              RETURN NULL;
            END;
            $$ LANGUAGE plpgsql;
        </sql>

        <sql splitStatements="false">
            CREATE OR REPLACE FUNCTION effective_permissions_mx_on_insert()
            RETURNS TRIGGER AS $$
            DECLARE
              project_ids BIGINT[];
            BEGIN
              IF TG_TABLE_NAME = 'PROJECT_ACCESS_TEAMS' THEN
                PERFORM recalc_user_project_effective_permissions(
                  (SELECT ARRAY_AGG(DISTINCT "PROJECT_ID") FROM new_table)
                );
              ELSIF TG_TABLE_NAME IN (
                'LDAPUSERS_TEAMS', 'MANAGEDUSERS_TEAMS', 'OIDCUSERS_TEAMS', 'TEAMS_PERMISSIONS'
              ) THEN
                PERFORM recalc_user_project_effective_permissions((
                  SELECT ARRAY_AGG(DISTINCT pat."PROJECT_ID")
                    FROM "PROJECT_ACCESS_TEAMS" AS pat
                   INNER JOIN new_table
                      ON new_table."TEAM_ID" = pat."TEAM_ID"
                ));
              END IF;
              RETURN NULL;
            END;
            $$ LANGUAGE plpgsql;
        </sql>

        <sql splitStatements="false">
            CREATE OR REPLACE FUNCTION effective_permissions_mx_on_update()
            RETURNS TRIGGER AS $$
            DECLARE
              project_ids BIGINT[];
            BEGIN
              IF TG_TABLE_NAME = 'PROJECT_ACCESS_TEAMS' THEN
                PERFORM recalc_user_project_effective_permissions((
                  SELECT ARRAY_AGG("PROJECT_ID")
                    FROM (
                      SELECT "PROJECT_ID" FROM old_table
                      UNION
                      SELECT "PROJECT_ID" FROM new_table
                    ) AS combined_projects
                ));
              ELSIF TG_TABLE_NAME IN (
                'LDAPUSERS_TEAMS', 'MANAGEDUSERS_TEAMS', 'OIDCUSERS_TEAMS', 'TEAMS_PERMISSIONS'
              ) THEN
                PERFORM recalc_user_project_effective_permissions((
                  SELECT ARRAY_AGG(DISTINCT pat."PROJECT_ID")
                    FROM "PROJECT_ACCESS_TEAMS" pat
                    JOIN (
                      SELECT "TEAM_ID" FROM old_table
                      UNION
                      SELECT "TEAM_ID" FROM new_table
                    ) AS teams
                      ON pat."TEAM_ID" = teams."TEAM_ID"
                ));
              END IF;
              RETURN NULL;
            END;
            $$ LANGUAGE plpgsql;
        </sql>

        <sql splitStatements="false">
            CREATE OR REPLACE FUNCTION prevent_direct_effective_permissions_writes()
            RETURNS TRIGGER AS $$
            BEGIN
              -- Depth of 1 means this trigger was fired by an attempted direct
              -- insert, update, or delete on USER_PROJECT_EFFECTIVE_PERMISSIONS.
              -- Depth should be 2, meaning this trigger was fired from another trigger.
              IF pg_trigger_depth() &lt; 2 THEN
                RAISE EXCEPTION 'Direct modifications to USER_PROJECT_EFFECTIVE_PERMISSIONS are not allowed.';
              END IF;
              RETURN NEW;
            END;
            $$ LANGUAGE plpgsql;
        </sql>

        <sql splitStatements="true">
            -- INSERT trigger for PROJECT_ACCESS_TEAMS
            CREATE TRIGGER trigger_effective_permissions_mx_on_project_access_teams_insert
            AFTER INSERT ON "PROJECT_ACCESS_TEAMS"
            REFERENCING NEW TABLE AS new_table
            FOR EACH STATEMENT
            EXECUTE FUNCTION effective_permissions_mx_on_insert();

            -- DELETE trigger for PROJECT_ACCESS_TEAMS
            CREATE TRIGGER trigger_effective_permissions_mx_on_project_access_teams_delete
            AFTER DELETE ON "PROJECT_ACCESS_TEAMS"
            REFERENCING OLD TABLE AS old_table
            FOR EACH STATEMENT
            EXECUTE FUNCTION effective_permissions_mx_on_delete();

            -- UPDATE trigger for PROJECT_ACCESS_TEAMS
            CREATE TRIGGER trigger_effective_permissions_mx_on_project_access_teams_update
            AFTER UPDATE ON "PROJECT_ACCESS_TEAMS"
            REFERENCING OLD TABLE AS old_table NEW TABLE AS new_table
            FOR EACH STATEMENT
            EXECUTE FUNCTION effective_permissions_mx_on_update();

            -- INSERT trigger for LDAPUSERS_TEAMS
            CREATE TRIGGER trigger_effective_permissions_mx_on_ldapusers_teams_insert
            AFTER INSERT ON "LDAPUSERS_TEAMS"
            REFERENCING NEW TABLE AS new_table
            FOR EACH STATEMENT
            EXECUTE FUNCTION effective_permissions_mx_on_insert();

            -- DELETE trigger for LDAPUSERS_TEAMS
            CREATE TRIGGER trigger_effective_permissions_mx_on_ldapusers_teams_delete
            AFTER DELETE ON "LDAPUSERS_TEAMS"
            REFERENCING OLD TABLE AS old_table
            FOR EACH STATEMENT
            EXECUTE FUNCTION effective_permissions_mx_on_delete();

            -- UPDATE trigger for LDAPUSERS_TEAMS
            CREATE TRIGGER trigger_effective_permissions_mx_on_ldapusers_teams_update
            AFTER UPDATE ON "LDAPUSERS_TEAMS"
            REFERENCING OLD TABLE AS old_table NEW TABLE AS new_table
            FOR EACH STATEMENT
            EXECUTE FUNCTION effective_permissions_mx_on_update();

            -- INSERT trigger for MANAGEDUSERS_TEAMS
            CREATE TRIGGER trigger_effective_permissions_mx_on_managedusers_teams_insert
            AFTER INSERT ON "MANAGEDUSERS_TEAMS"
            REFERENCING NEW TABLE AS new_table
            FOR EACH STATEMENT
            EXECUTE FUNCTION effective_permissions_mx_on_insert();

            -- DELETE trigger for MANAGEDUSERS_TEAMS
            CREATE TRIGGER trigger_effective_permissions_mx_on_managedusers_teams_delete
            AFTER DELETE ON "MANAGEDUSERS_TEAMS"
            REFERENCING OLD TABLE AS old_table
            FOR EACH STATEMENT
            EXECUTE FUNCTION effective_permissions_mx_on_delete();

            -- UPDATE trigger for MANAGEDUSERS_TEAMS
            CREATE TRIGGER trigger_effective_permissions_mx_on_managedusers_teams_update
            AFTER UPDATE ON "MANAGEDUSERS_TEAMS"
            REFERENCING OLD TABLE AS old_table NEW TABLE AS new_table
            FOR EACH STATEMENT
            EXECUTE FUNCTION effective_permissions_mx_on_update();

            -- INSERT trigger for OIDCUSERS_TEAMS
            CREATE TRIGGER trigger_effective_permissions_mx_on_oidcusers_teams_insert
            AFTER INSERT ON "OIDCUSERS_TEAMS"
            REFERENCING NEW TABLE AS new_table
            FOR EACH STATEMENT
            EXECUTE FUNCTION effective_permissions_mx_on_insert();

            -- DELETE trigger for OIDCUSERS_TEAMS
            CREATE TRIGGER trigger_effective_permissions_mx_on_oidcusers_teams_delete
            AFTER DELETE ON "OIDCUSERS_TEAMS"
            REFERENCING OLD TABLE AS old_table
            FOR EACH STATEMENT
            EXECUTE FUNCTION effective_permissions_mx_on_delete();

            -- UPDATE trigger for OIDCUSERS_TEAMS
            CREATE TRIGGER trigger_effective_permissions_mx_on_oidcusers_teams_update
            AFTER UPDATE ON "OIDCUSERS_TEAMS"
            REFERENCING OLD TABLE AS old_table NEW TABLE AS new_table
            FOR EACH STATEMENT
            EXECUTE FUNCTION effective_permissions_mx_on_update();

            -- INSERT trigger for TEAMS_PERMISSIONS
            CREATE TRIGGER trigger_effective_permissions_mx_on_teams_permissions_insert
            AFTER INSERT ON "TEAMS_PERMISSIONS"
            REFERENCING NEW TABLE AS new_table
            FOR EACH STATEMENT
            EXECUTE FUNCTION effective_permissions_mx_on_insert();

            -- DELETE trigger for TEAMS_PERMISSIONS
            CREATE TRIGGER trigger_effective_permissions_mx_on_teams_permissions_delete
            AFTER DELETE ON "TEAMS_PERMISSIONS"
            REFERENCING OLD TABLE AS old_table
            FOR EACH STATEMENT
            EXECUTE FUNCTION effective_permissions_mx_on_delete();

            -- UPDATE trigger for TEAMS_PERMISSIONS
            CREATE TRIGGER trigger_effective_permissions_mx_on_teams_permissions_update
            AFTER UPDATE ON "TEAMS_PERMISSIONS"
            REFERENCING OLD TABLE AS old_table NEW TABLE AS new_table
            FOR EACH STATEMENT
            EXECUTE FUNCTION effective_permissions_mx_on_update();
        </sql>

        <sql splitStatements="false">
            -- Backfill the USER_PROJECT_EFFECTIVE_PERMISSIONS table for existing PROJECT_ACCESS_TEAMS entries
            DO $$
            BEGIN
              PERFORM recalc_user_project_effective_permissions(
                (SELECT ARRAY_AGG(DISTINCT "PROJECT_ID") FROM "PROJECT_ACCESS_TEAMS")
              );
            END;
            $$;
        </sql>

        <sql splitStatements="true">
            -- Prevent direct inserts/updates/writes to USER_PROJECT_EFFECTIVE_PERMISSIONS
            CREATE TRIGGER trigger_prevent_direct_effective_permissions_writes
            BEFORE DELETE OR INSERT OR UPDATE ON "USER_PROJECT_EFFECTIVE_PERMISSIONS"
            FOR EACH STATEMENT
            EXECUTE FUNCTION prevent_direct_effective_permissions_writes();
        </sql>
    </changeSet>

    <changeSet id="v5.6.0-17" author="jhoward-lm">
        <!--
          A previous version of this changeset was missing immediate constraint checking,
          had a syntax issue when looping over duplicate teams, and did not properly clean
          up duplicate relationship records after updating FK references of duplicate teams.
          Deployments that did not have duplicate teams at the time of the execution
          were able to successfully complete this changeset and do not have to repeat it.
        -->
        <validCheckSum>9:75a5b859b6131f15a841804da10c14dc</validCheckSum>

        <!--
          Disable deferred constraint checking during this transaction.
          Without this, we would not be able to add primary keys after
          having deleted records from a table before.
        -->
        <sql>SET CONSTRAINTS ALL IMMEDIATE</sql>

        <sql splitStatements="false">
            CREATE OR REPLACE FUNCTION remove_duplicate_rows(
              table_name TEXT,
              column_1   TEXT,
              column_2   TEXT
            )
            RETURNS void AS $$
            BEGIN
              EXECUTE format($q$
                DELETE FROM %I a
                 USING %I b
                 WHERE a.%I = b.%I
                   AND a.%I = b.%I
                   AND a.ctid &lt; b.ctid
                $q$, table_name, table_name, column_1, column_1, column_2, column_2
              );
            END;
            $$ LANGUAGE plpgsql;
        </sql>

        <dropIndex tableName="APIKEYS_TEAMS" indexName="APIKEYS_TEAMS_TEAM_ID_IDX" />
        <dropIndex tableName="APIKEYS_TEAMS" indexName="APIKEYS_TEAMS_APIKEY_ID_IDX" />
        <dropIndex tableName="LDAPUSERS_PERMISSIONS" indexName="LDAPUSERS_PERMISSIONS_PERMISSION_ID_IDX" />
        <dropIndex tableName="LDAPUSERS_PERMISSIONS" indexName="LDAPUSERS_PERMISSIONS_LDAPUSER_ID_IDX" />
        <dropIndex tableName="LDAPUSERS_TEAMS" indexName="LDAPUSERS_TEAMS_TEAM_ID_IDX" />
        <dropIndex tableName="LDAPUSERS_TEAMS" indexName="LDAPUSERS_TEAMS_LDAPUSER_ID_IDX" />
        <dropIndex tableName="MANAGEDUSERS_PERMISSIONS" indexName="MANAGEDUSERS_PERMISSIONS_PERMISSION_ID_IDX" />
        <dropIndex tableName="MANAGEDUSERS_PERMISSIONS" indexName="MANAGEDUSERS_PERMISSIONS_MANAGEDUSER_ID_IDX" />
        <dropIndex tableName="MANAGEDUSERS_TEAMS" indexName="MANAGEDUSERS_TEAMS_TEAM_ID_IDX" />
        <dropIndex tableName="MANAGEDUSERS_TEAMS" indexName="MANAGEDUSERS_TEAMS_MANAGEDUSER_ID_IDX" />
        <dropIndex tableName="OIDCUSERS_PERMISSIONS" indexName="OIDCUSERS_PERMISSIONS_PERMISSION_ID_IDX" />
        <dropIndex tableName="OIDCUSERS_PERMISSIONS" indexName="OIDCUSERS_PERMISSIONS_OIDCUSER_ID_IDX" />
        <dropIndex tableName="OIDCUSERS_TEAMS" indexName="OIDCUSERS_TEAMS_TEAM_ID_IDX" />
        <dropIndex tableName="OIDCUSERS_TEAMS" indexName="OIDCUSERS_TEAMS_OIDCUSERS_ID_IDX" />
        <dropIndex tableName="NOTIFICATIONRULE_TEAMS" indexName="NOTIFICATIONRULE_TEAMS_NOTIFICATIONRULE_ID_IDX" />
        <dropIndex tableName="NOTIFICATIONRULE_TEAMS" indexName="NOTIFICATIONRULE_TEAMS_TEAM_ID_IDX" />
        <dropIndex tableName="TEAMS_PERMISSIONS" indexName="TEAMS_PERMISSIONS_TEAM_ID_IDX" />
        <dropIndex tableName="TEAMS_PERMISSIONS" indexName="TEAMS_PERMISSIONS_PERMISSION_ID_IDX" />

        <sql splitStatements="false">
            DO $$
            BEGIN
              PERFORM remove_duplicate_rows('APIKEYS_TEAMS', 'TEAM_ID', 'APIKEY_ID');
              PERFORM remove_duplicate_rows('LDAPUSERS_PERMISSIONS', 'LDAPUSER_ID', 'PERMISSION_ID');
              PERFORM remove_duplicate_rows('LDAPUSERS_TEAMS', 'TEAM_ID', 'LDAPUSER_ID');
              PERFORM remove_duplicate_rows('MANAGEDUSERS_PERMISSIONS', 'MANAGEDUSER_ID', 'PERMISSION_ID');
              PERFORM remove_duplicate_rows('MANAGEDUSERS_TEAMS', 'TEAM_ID', 'MANAGEDUSER_ID');
              PERFORM remove_duplicate_rows('NOTIFICATIONRULE_TEAMS', 'NOTIFICATIONRULE_ID', 'TEAM_ID');
              PERFORM remove_duplicate_rows('OIDCUSERS_PERMISSIONS', 'OIDCUSER_ID', 'PERMISSION_ID');
              PERFORM remove_duplicate_rows('OIDCUSERS_TEAMS', 'TEAM_ID', 'OIDCUSERS_ID');
              PERFORM remove_duplicate_rows('TEAMS_PERMISSIONS', 'TEAM_ID', 'PERMISSION_ID');
            END
            $$;
        </sql>

        <sql splitStatements="false">
            -- Remove all duplicates from TEAM table, updating foreign
            -- keys in other tables referencing the removed entries
            DO $$
            DECLARE
              referencing_tables TEXT[] := ARRAY[
                'APIKEYS_TEAMS',
                'LDAPUSERS_TEAMS',
                'MANAGEDUSERS_TEAMS',
                'NOTIFICATIONRULE_TEAMS',
                'OIDCUSERS_TEAMS',
                'TEAMS_PERMISSIONS'
              ];
              tbl_name TEXT;
              rec      RECORD;
              dup_id   INTEGER;
            BEGIN
            -- Loop over each team name group that has duplicates.
              FOR rec IN
              SELECT
                  "NAME" AS name,
                  MIN("ID") AS canonical_id,
                  ARRAY_AGG("ID") AS all_ids
                FROM "TEAM"
               GROUP BY "NAME"
              HAVING COUNT(*) &gt; 1
              LOOP
                RAISE NOTICE 'Processing team "%" with canonical ID %', rec.name, rec.canonical_id;

                -- For every duplicate row in the group, update references and delete the duplicate.
                FOREACH dup_id IN ARRAY rec.all_ids
                LOOP
                  -- Skip the chosen canonical row
                  CONTINUE WHEN dup_id = rec.canonical_id;

                  RAISE NOTICE 'Updating foreign key references from duplicate ID % to canonical ID %', dup_id, rec.canonical_id;

                  FOREACH tbl_name IN ARRAY referencing_tables
                  LOOP
                    EXECUTE format($update$
                      UPDATE %I
                         SET "TEAM_ID" = %s
                       WHERE "TEAM_ID" = %s
                      $update$, tbl_name, rec.canonical_id, dup_id);
                  END LOOP;

                  -- After reassigning foreign keys, delete the duplicate row from TEAM
                  RAISE NOTICE 'Deleting duplicate TEAM row with ID % for team "%" ', dup_id, rec.name;
                  EXECUTE format($delete$
                    DELETE FROM "TEAM"
                     WHERE "ID" = %s
                    $delete$, dup_id);
                END LOOP;
              END LOOP;

              PERFORM remove_duplicate_rows('APIKEYS_TEAMS', 'TEAM_ID', 'APIKEY_ID');
              PERFORM remove_duplicate_rows('LDAPUSERS_TEAMS', 'TEAM_ID', 'LDAPUSER_ID');
              PERFORM remove_duplicate_rows('MANAGEDUSERS_TEAMS', 'TEAM_ID', 'MANAGEDUSER_ID');
              PERFORM remove_duplicate_rows('NOTIFICATIONRULE_TEAMS', 'NOTIFICATIONRULE_ID', 'TEAM_ID');
              PERFORM remove_duplicate_rows('OIDCUSERS_TEAMS', 'TEAM_ID', 'OIDCUSERS_ID');
              PERFORM remove_duplicate_rows('TEAMS_PERMISSIONS', 'TEAM_ID', 'PERMISSION_ID');
              DROP FUNCTION remove_duplicate_rows;
            END $$;
        </sql>

        <addPrimaryKey tableName="APIKEYS_TEAMS"
            columnNames="TEAM_ID, APIKEY_ID"
            constraintName="APIKEYS_TEAMS_PK" />
        <addPrimaryKey tableName="LDAPUSERS_PERMISSIONS"
            columnNames="LDAPUSER_ID, PERMISSION_ID"
            constraintName="LDAPUSERS_PERMISSIONS_PK" />
        <addPrimaryKey tableName="LDAPUSERS_TEAMS"
            columnNames="TEAM_ID, LDAPUSER_ID"
            constraintName="LDAPUSERS_TEAMS_PK" />
        <addPrimaryKey tableName="MANAGEDUSERS_PERMISSIONS"
            columnNames="MANAGEDUSER_ID, PERMISSION_ID"
            constraintName="MANAGEDUSERS_PERMISSIONS_PK" />
        <addPrimaryKey tableName="MANAGEDUSERS_TEAMS"
            columnNames="TEAM_ID, MANAGEDUSER_ID"
            constraintName="MANAGEDUSERS_TEAMS_PK" />
        <addPrimaryKey tableName="OIDCUSERS_PERMISSIONS"
            columnNames="OIDCUSER_ID, PERMISSION_ID"
            constraintName="OIDCUSERS_PERMISSIONS_PK" />
        <addPrimaryKey tableName="OIDCUSERS_TEAMS"
            columnNames="TEAM_ID, OIDCUSERS_ID"
            constraintName="OIDCUSERS_TEAMS_PK" />
        <addPrimaryKey tableName="NOTIFICATIONRULE_TEAMS"
            columnNames="NOTIFICATIONRULE_ID, TEAM_ID"
            constraintName="NOTIFICATIONRULE_TEAMS_PK" />
        <addPrimaryKey tableName="TEAMS_PERMISSIONS"
            columnNames="TEAM_ID, PERMISSION_ID"
            constraintName="TEAMS_PERMISSIONS_PK" />
        <addUniqueConstraint tableName="TEAM"
            columnNames="NAME"
            constraintName="TEAM_NAME_IDX" />
    </changeSet>

    <changeSet id="v5.6.0-18" author="sahibamittal">
        <sql splitStatements="false">
            CREATE TYPE severity AS ENUM (
                'UNASSIGNED'
                , 'INFO'
                , 'LOW'
                , 'MEDIUM'
                , 'HIGH'
                , 'CRITICAL'
            );
            ALTER TABLE "ANALYSIS" ALTER COLUMN "SEVERITY" TYPE severity USING "SEVERITY"::severity;
            ALTER TABLE "VULNERABILITY" ALTER COLUMN "SEVERITY" TYPE severity USING "SEVERITY"::severity;
        </sql>
    </changeSet>

    <changeSet id="v5.6.0-19" author="nscuro">
        <sql>
            -- Identify OIDC groups with duplicate names.
            WITH cte_duplicate_group AS (
              SELECT "NAME" AS name
                   , MIN("ID") AS canonical_id
                FROM "OIDCGROUP"
               GROUP BY "NAME"
              HAVING COUNT(*) &gt; 1
            ),
            -- Delete mappings of duplicate OIDC groups.
            cte_deleted_mapping AS (
              DELETE FROM "MAPPEDOIDCGROUP"
               USING cte_duplicate_group
                   , "OIDCGROUP"
               WHERE "MAPPEDOIDCGROUP"."GROUP_ID" = "OIDCGROUP"."ID"
                 AND "OIDCGROUP"."NAME" = cte_duplicate_group.name
                 AND "OIDCGROUP"."ID" != cte_duplicate_group.canonical_id
              RETURNING "OIDCGROUP"."NAME" AS group_name
                      , "MAPPEDOIDCGROUP"."TEAM_ID" AS team_id
                      , "MAPPEDOIDCGROUP"."UUID" AS uuid
            ),
            -- Delete duplicate OIDC groups.
            cte_deleted_group AS (
              DELETE FROM "OIDCGROUP"
               USING cte_duplicate_group
               WHERE "OIDCGROUP"."NAME" = cte_duplicate_group.name
                 AND "OIDCGROUP"."ID" != cte_duplicate_group.canonical_id
              RETURNING "OIDCGROUP"."ID" AS id
            )
            -- Re-create deleted mappings, but using the canonical group ID.
            INSERT INTO "MAPPEDOIDCGROUP" ("GROUP_ID", "TEAM_ID", "UUID")
            SELECT "OIDCGROUP"."ID"
                 , cte_deleted_mapping.team_id
                 , cte_deleted_mapping.uuid
              FROM cte_deleted_mapping
             INNER JOIN "OIDCGROUP"
                ON "OIDCGROUP"."NAME" = cte_deleted_mapping.group_name
             -- This condition mostly just forces evaluation of cte_deleted_group.
             WHERE "OIDCGROUP"."ID" NOT IN (SELECT id FROM cte_deleted_group)
            -- If the duplicate groups had overlapping mappings, we'll get conflicts here.
            ON CONFLICT ("TEAM_ID", "GROUP_ID") DO NOTHING
        </sql>

        <createIndex tableName="OIDCGROUP" indexName="OIDCGROUP_NAME_IDX" unique="true">
            <column name="NAME"/>
        </createIndex>
    </changeSet>

    <changeSet id="v5.6.0-20" author="nscuro">
        <!-- Create new columns, leaving them nullable to allow for migration. -->
        <addColumn tableName="APIKEY">
            <column name="SECRET_HASH" type="VARCHAR(64)"/>
            <column name="PUBLIC_ID" type="VARCHAR(8)"/>
            <column name="IS_LEGACY" type="BOOL" defaultValueBoolean="false">
                <constraints nullable="false"/>
            </column>
        </addColumn>

        <!-- Migrate API keys by assigning public IDs and hashing their secrets. -->
        <customChange class="org.dependencytrack.persistence.migration.change.v560.ApiKeyMigrationChange"/>
    </changeSet>

    <changeSet id="v5.6.0-21" author="nscuro">
        <!--
          These must run in a separate transaction from the key migration to avoid
          "cannot ALTER TABLE because it is being used by active queries in this session" errors.
        -->
        <dropColumn tableName="APIKEY" columnName="APIKEY"/>
        <addNotNullConstraint tableName="APIKEY" columnName="SECRET_HASH"/>
        <addNotNullConstraint tableName="APIKEY" columnName="PUBLIC_ID"/>
        <createIndex tableName="APIKEY" indexName="APIKEY_PUBLIC_ID_IDX" unique="true">
            <column name="PUBLIC_ID"/>
        </createIndex>
    </changeSet>

    <changeSet id="v5.6.0-22" author="nscuro">
        <dropTable tableName="INSTALLEDUPGRADES"/>
        <dropTable tableName="SCHEMAVERSION"/>
    </changeSet>

    <changeSet id="v5.6.0-23" author="jhoward-lm">
        <!--
          A previous version of this changeset did not cater to duplicate usernames existing
          across the MANAGEDUSER, LDAPUSER, and OIDCUSER tables.
          Deployments that did not have duplicate usernames across user tables at the time
          of the execution were able to successfully complete this changeset and do not have
          to repeat it.
        -->
        <validCheckSum>9:aa6e0cecae0b4f050a56eb1bbcb686be</validCheckSum>

        <createTable ifNotExists="true" tableName="USER">
            <column autoIncrement="true" name="ID" type="BIGINT">
                <constraints nullable="false" primaryKey="true" primaryKeyName="USER_PK" />
            </column>
            <column name="USERNAME" type="TEXT">
                <constraints nullable="false" validateNullable="true" />
            </column>
            <column name="EMAIL" type="TEXT" />
            <column name="TYPE" type="TEXT">
                <constraints nullable="false" validateNullable="true" />
            </column>

            <!-- Columns specific to LDAP users -->
            <column name="DN" type="TEXT" />

            <!-- Columns specific to managed users -->
            <column name="FULLNAME" type="TEXT" />
            <column name="FORCE_PASSWORD_CHANGE" type="BOOLEAN" />
            <column name="SUSPENDED" type="BOOLEAN" />
            <column name="NON_EXPIRY_PASSWORD" type="BOOLEAN" />
            <column name="LAST_PASSWORD_CHANGE" type="TIMESTAMP WITH TIME ZONE" />
            <column name="PASSWORD" type="TEXT" />

            <!-- Columns specific to OIDC users -->
            <column name="SUBJECT_IDENTIFIER" type="TEXT" />
        </createTable>

        <createIndex unique="true" tableName="USER" indexName="USER_USERNAME_IDX">
            <column name="USERNAME" />
        </createIndex>

        <createTable tableName="USERS_PERMISSIONS">
            <column name="USER_ID" type="BIGINT">
                <constraints
                        nullable="false"
                        primaryKey="true"
                        primaryKeyName="USERS_PERMISSIONS_PK"
                        foreignKeyName="USERS_PERMISSIONS_USER_FK"
                        referencedTableName="USER"
                        referencedColumnNames="ID"
                        validateNullable="true"
                        validateForeignKey="true"
                        deleteCascade="true"/>
            </column>

            <column name="PERMISSION_ID" type="BIGINT">
                <constraints
                        nullable="false"
                        primaryKey="true"
                        primaryKeyName="USERS_PERMISSIONS_PK"
                        foreignKeyName="USERS_PERMISSIONS_PERMISSION_FK"
                        referencedTableName="PERMISSION"
                        referencedColumnNames="ID"
                        validateNullable="true"
                        validateForeignKey="true"
                        deleteCascade="true"/>
            </column>
        </createTable>

        <createTable tableName="USERS_TEAMS">
            <column name="USER_ID" type="BIGINT">
                <constraints
                        nullable="false"
                        primaryKey="true"
                        primaryKeyName="USERS_TEAMS_PK"
                        foreignKeyName="USERS_TEAMS_USER_FK"
                        referencedTableName="USER"
                        referencedColumnNames="ID"
                        validateNullable="true"
                        validateForeignKey="true"
                        deleteCascade="true"/>
            </column>

            <column name="TEAM_ID" type="BIGINT">
                <constraints
                        nullable="false"
                        primaryKey="true"
                        primaryKeyName="USERS_TEAMS_PK"
                        foreignKeyName="USERS_TEAMS_TEAM_FK"
                        referencedTableName="TEAM"
                        referencedColumnNames="ID"
                        validateNullable="true"
                        validateForeignKey="true"
                        deleteCascade="true"/>
            </column>
        </createTable>

        <sql splitStatements="true">
            ALTER TABLE "USER"
              ADD CONSTRAINT user_type_check
            CHECK ("TYPE" IN ('MANAGED', 'LDAP', 'OIDC'));

            ALTER TABLE "USER"
              ADD CONSTRAINT user_managed_check
            CHECK (
                ("TYPE" = 'MANAGED'
                    AND "FORCE_PASSWORD_CHANGE" IS NOT NULL
                    AND "LAST_PASSWORD_CHANGE" IS NOT NULL
                    AND "NON_EXPIRY_PASSWORD" IS NOT NULL
                    AND "PASSWORD" IS NOT NULL
                    AND "SUSPENDED" IS NOT NULL)
                OR
                ("TYPE" != 'MANAGED'
                    AND "FORCE_PASSWORD_CHANGE" IS NULL
                    AND "FULLNAME" IS NULL
                    AND "LAST_PASSWORD_CHANGE" IS NULL
                    AND "NON_EXPIRY_PASSWORD" IS NULL
                    AND "PASSWORD" IS NULL
                    AND "SUSPENDED" IS NULL)
            );

            ALTER TABLE "USER"
              ADD CONSTRAINT user_ldap_check
            CHECK (
                ("TYPE" = 'LDAP' AND "DN" IS NOT NULL)
                OR ("TYPE" != 'LDAP' AND "DN" IS NULL)
            );

            ALTER TABLE "USER"
              ADD CONSTRAINT user_oidc_check
            CHECK ("TYPE" = 'OIDC' OR "SUBJECT_IDENTIFIER" IS NULL);
        </sql>

        <!-- Migrate existing managed users. -->
        <sql splitStatements="true">
            INSERT INTO "USER" (
              "TYPE"
            , "USERNAME"
            , "EMAIL"
            , "PASSWORD"
            , "LAST_PASSWORD_CHANGE"
            , "FULLNAME"
            , "SUSPENDED"
            , "FORCE_PASSWORD_CHANGE"
            , "NON_EXPIRY_PASSWORD"
            )
            SELECT 'MANAGED'
                 , "USERNAME"
                 , "EMAIL"
                 , "PASSWORD"
                 , "LAST_PASSWORD_CHANGE"
                 , "FULLNAME"
                 , "SUSPENDED"
                 , "FORCE_PASSWORD_CHANGE"
                 , "NON_EXPIRY_PASSWORD"
              FROM "MANAGEDUSER";

            INSERT INTO "USERS_PERMISSIONS" ("PERMISSION_ID", "USER_ID")
            SELECT "MANAGEDUSERS_PERMISSIONS"."PERMISSION_ID"
                 , "USER"."ID"
              FROM "MANAGEDUSERS_PERMISSIONS"
             INNER JOIN "MANAGEDUSER"
                ON "MANAGEDUSER"."ID" = "MANAGEDUSERS_PERMISSIONS"."MANAGEDUSER_ID"
             INNER JOIN "USER"
                ON "USER"."USERNAME" = "MANAGEDUSER"."USERNAME"
               AND "USER"."TYPE" = 'MANAGED'
            ON CONFLICT ("PERMISSION_ID", "USER_ID") DO NOTHING;

            INSERT INTO "USERS_TEAMS" ("TEAM_ID", "USER_ID")
            SELECT "MANAGEDUSERS_TEAMS"."TEAM_ID"
                 , "USER"."ID"
              FROM "MANAGEDUSERS_TEAMS"
             INNER JOIN "MANAGEDUSER"
                ON "MANAGEDUSER"."ID" = "MANAGEDUSERS_TEAMS"."MANAGEDUSER_ID"
             INNER JOIN "USER"
                ON "USER"."USERNAME" = "MANAGEDUSER"."USERNAME"
               AND "USER"."TYPE" = 'MANAGED'
            ON CONFLICT ("TEAM_ID", "USER_ID") DO NOTHING;
        </sql>

        <!-- Migrate existing LDAP users. -->
        <sql splitStatements="true">
            WITH cte_created_user AS (
              INSERT INTO "USER" ("TYPE", "USERNAME", "EMAIL", "DN")
              SELECT 'LDAP', "USERNAME", "EMAIL", "DN"
                FROM "LDAPUSER"
              ON CONFLICT ("USERNAME") DO NOTHING
              RETURNING "USERNAME"
            )
            INSERT INTO "USER" ("TYPE", "USERNAME", "EMAIL", "DN")
            SELECT 'LDAP', ("USERNAME" || '-CONFLICT-LDAP') AS "USERNAME", "EMAIL", "DN"
              FROM "LDAPUSER"
             WHERE "USERNAME" NOT IN (SELECT "USERNAME" FROM cte_created_user);

            INSERT INTO "USERS_PERMISSIONS" ("PERMISSION_ID", "USER_ID")
            SELECT "LDAPUSERS_PERMISSIONS"."PERMISSION_ID"
                 , "USER"."ID"
              FROM "LDAPUSERS_PERMISSIONS"
             INNER JOIN "LDAPUSER"
                ON "LDAPUSER"."ID" = "LDAPUSERS_PERMISSIONS"."LDAPUSER_ID"
             INNER JOIN "USER"
                ON ("USER"."USERNAME" = "LDAPUSER"."USERNAME"
                    OR "USER"."USERNAME" = ("LDAPUSER"."USERNAME" || '-CONFLICT-LDAP'))
               AND "USER"."TYPE" = 'LDAP'
            ON CONFLICT ("PERMISSION_ID", "USER_ID") DO NOTHING;

            INSERT INTO "USERS_TEAMS" ("TEAM_ID", "USER_ID")
            SELECT "LDAPUSERS_TEAMS"."TEAM_ID"
                 , "USER"."ID"
              FROM "LDAPUSERS_TEAMS"
             INNER JOIN "LDAPUSER"
                ON "LDAPUSER"."ID" = "LDAPUSERS_TEAMS"."LDAPUSER_ID"
             INNER JOIN "USER"
                ON ("USER"."USERNAME" = "LDAPUSER"."USERNAME"
                    OR "USER"."USERNAME" = ("LDAPUSER"."USERNAME" || '-CONFLICT-LDAP'))
               AND "USER"."TYPE" = 'LDAP'
            ON CONFLICT ("TEAM_ID", "USER_ID") DO NOTHING;
        </sql>

        <!-- Migrate existing OIDC users. -->
        <sql splitStatements="true">
            WITH cte_created_user AS (
              INSERT INTO "USER" ("TYPE", "USERNAME", "EMAIL", "SUBJECT_IDENTIFIER")
              SELECT 'OIDC', "USERNAME", "EMAIL", "SUBJECT_IDENTIFIER"
                FROM "OIDCUSER"
              ON CONFLICT ("USERNAME") DO NOTHING
              RETURNING "USERNAME"
            )
            INSERT INTO "USER" ("TYPE", "USERNAME", "EMAIL", "SUBJECT_IDENTIFIER")
            SELECT 'OIDC', ("USERNAME" || '-CONFLICT-OIDC') AS "USERNAME", "EMAIL", "SUBJECT_IDENTIFIER"
              FROM "OIDCUSER"
            WHERE "USERNAME" NOT IN (SELECT "USERNAME" FROM cte_created_user);

            INSERT INTO "USERS_PERMISSIONS" ("PERMISSION_ID", "USER_ID")
            SELECT "OIDCUSERS_PERMISSIONS"."PERMISSION_ID"
                 , "USER"."ID"
              FROM "OIDCUSERS_PERMISSIONS"
             INNER JOIN "OIDCUSER"
                ON "OIDCUSER"."ID" = "OIDCUSERS_PERMISSIONS"."OIDCUSER_ID"
             INNER JOIN "USER"
                ON ("USER"."USERNAME" = "OIDCUSER"."USERNAME"
                    OR "USER"."USERNAME" = ("OIDCUSER"."USERNAME" || '-CONFLICT-OIDC'))
               AND "USER"."TYPE" = 'OIDC'
            ON CONFLICT ("PERMISSION_ID", "USER_ID") DO NOTHING;

            INSERT INTO "USERS_TEAMS" ("TEAM_ID", "USER_ID")
            SELECT "OIDCUSERS_TEAMS"."TEAM_ID"
                 , "USER"."ID"
              FROM "OIDCUSERS_TEAMS"
             INNER JOIN "OIDCUSER"
                ON "OIDCUSER"."ID" = "OIDCUSERS_TEAMS"."OIDCUSERS_ID"
             INNER JOIN "USER"
                ON ("USER"."USERNAME" = "OIDCUSER"."USERNAME"
                    OR "USER"."USERNAME" = ("OIDCUSER"."USERNAME" || '-CONFLICT-OIDC'))
               AND "USER"."TYPE" = 'OIDC'
            ON CONFLICT ("TEAM_ID", "USER_ID") DO NOTHING;
        </sql>

        <dropTable tableName="LDAPUSERS_TEAMS" cascadeConstraints="true" />
        <dropTable tableName="LDAPUSERS_PERMISSIONS" cascadeConstraints="true" />
        <dropTable tableName="LDAPUSER" cascadeConstraints="true" />
        <dropTable tableName="MANAGEDUSERS_TEAMS" cascadeConstraints="true" />
        <dropTable tableName="MANAGEDUSERS_PERMISSIONS" cascadeConstraints="true" />
        <dropTable tableName="MANAGEDUSER" cascadeConstraints="true" />
        <dropTable tableName="OIDCUSERS_TEAMS" cascadeConstraints="true" />
        <dropTable tableName="OIDCUSERS_PERMISSIONS" cascadeConstraints="true" />
        <dropTable tableName="OIDCUSER" cascadeConstraints="true" />
    </changeSet>

    <changeSet id="v5.6.0-24" author="jhoward-lm">
        <dropTable tableName="USER_PROJECT_EFFECTIVE_PERMISSIONS" cascadeConstraints="true" />

        <createTable ifNotExists="true" tableName="USER_PROJECT_EFFECTIVE_PERMISSIONS">
            <column name="PROJECT_ID" type="BIGINT">
                <constraints
                        nullable="false"
                        primaryKey="true"
                        primaryKeyName="USER_PROJECT_EFFECTIVE_PERMISSIONS_PK"
                        foreignKeyName="USER_PROJECT_EFFECTIVE_PERMISSIONS_PROJECT_FK"
                        referencedTableName="PROJECT"
                        referencedColumnNames="ID"
                        deferrable="true"
                        initiallyDeferred="true"
                        deleteCascade="true"
                        validateForeignKey="true"/>
            </column>

            <column name="USER_ID" type="BIGINT">
                <constraints
                        nullable="false"
                        primaryKey="true"
                        primaryKeyName="USER_PROJECT_EFFECTIVE_PERMISSIONS_PK"
                        foreignKeyName="USER_PROJECT_EFFECTIVE_PERMISSIONS_USER_FK"
                        referencedTableName="USER"
                        referencedColumnNames="ID"
                        deferrable="true"
                        initiallyDeferred="true"
                        deleteCascade="true"
                        validateForeignKey="true"/>
            </column>

            <column name="PERMISSION_ID" type="BIGINT">
                <constraints
                        nullable="false"
                        primaryKey="true"
                        primaryKeyName="USER_PROJECT_EFFECTIVE_PERMISSIONS_PK"
                        foreignKeyName="USER_PROJECT_EFFECTIVE_PERMISSIONS_PERMISSION_ID_FK"
                        referencedTableName="PERMISSION"
                        referencedColumnNames="ID"
                        deferrable="true"
                        initiallyDeferred="true"
                        deleteCascade="true"
                        validateForeignKey="true"/>
            </column>

            <column name="PERMISSION_NAME" type="VARCHAR(255)">
                <constraints
                        nullable="false"
                        foreignKeyName="USER_PROJECT_EFFECTIVE_PERMISSIONS_PERMISSION_NAME_FK"
                        referencedTableName="PERMISSION"
                        referencedColumnNames="NAME"
                        deferrable="true"
                        initiallyDeferred="true"
                        deleteCascade="true"
                        validateForeignKey="true"/>
            </column>
        </createTable>

        <sql splitStatements="false">
            -- Helper function to recalculate all user permissions for a project.
            -- Called by trigger functions to update the values in the USER_PROJECT_EFFECTIVE_PERMISSIONS table.
            CREATE OR REPLACE FUNCTION recalc_user_project_effective_permissions(project_ids BIGINT[])
            RETURNS void AS $$
            BEGIN
              -- Remove any existing effective permissions for this project.
              DELETE FROM "USER_PROJECT_EFFECTIVE_PERMISSIONS"
              WHERE "PROJECT_ID" = ANY(project_ids);

              -- Rebuild effective permissions for users
              INSERT INTO "USER_PROJECT_EFFECTIVE_PERMISSIONS"
                ("USER_ID", "PROJECT_ID", "PERMISSION_ID", "PERMISSION_NAME")
              SELECT DISTINCT ut."USER_ID", pat."PROJECT_ID", tp."PERMISSION_ID", p."NAME"
                FROM "PROJECT_ACCESS_TEAMS" pat
               INNER JOIN "TEAMS_PERMISSIONS" tp
                  ON tp."TEAM_ID" = pat."TEAM_ID"
               INNER JOIN "PERMISSION" p
                  ON p."ID" = tp."PERMISSION_ID"
               INNER JOIN "USERS_TEAMS" ut
                  ON ut."TEAM_ID" = pat."TEAM_ID"
               WHERE pat."PROJECT_ID" = ANY(project_ids);
            END;
            $$ LANGUAGE plpgsql;
        </sql>

        <sql splitStatements="false">
            CREATE OR REPLACE FUNCTION effective_permissions_mx_on_delete()
            RETURNS TRIGGER AS $$
            DECLARE
              project_ids BIGINT[];
            BEGIN
              IF TG_TABLE_NAME = 'PROJECT_ACCESS_TEAMS' THEN
                PERFORM recalc_user_project_effective_permissions(
                  (SELECT ARRAY_AGG(DISTINCT "PROJECT_ID") FROM old_table)
                );
              ELSIF TG_TABLE_NAME IN ('USERS_TEAMS', 'TEAMS_PERMISSIONS') THEN
                PERFORM recalc_user_project_effective_permissions((
                  SELECT ARRAY_AGG(DISTINCT pat."PROJECT_ID")
                    FROM "PROJECT_ACCESS_TEAMS" AS pat
                   INNER JOIN old_table
                      ON old_table."TEAM_ID" = pat."TEAM_ID"
                ));
              END IF;
              RETURN NULL;
            END;
            $$ LANGUAGE plpgsql;
        </sql>

        <sql splitStatements="false">
            CREATE OR REPLACE FUNCTION effective_permissions_mx_on_insert()
            RETURNS TRIGGER AS $$
            DECLARE
              project_ids BIGINT[];
            BEGIN
              IF TG_TABLE_NAME = 'PROJECT_ACCESS_TEAMS' THEN
                PERFORM recalc_user_project_effective_permissions(
                  (SELECT ARRAY_AGG(DISTINCT "PROJECT_ID") FROM new_table)
                );
              ELSIF TG_TABLE_NAME IN ('USERS_TEAMS', 'TEAMS_PERMISSIONS') THEN
                PERFORM recalc_user_project_effective_permissions((
                  SELECT ARRAY_AGG(DISTINCT pat."PROJECT_ID")
                    FROM "PROJECT_ACCESS_TEAMS" AS pat
                   INNER JOIN new_table
                      ON new_table."TEAM_ID" = pat."TEAM_ID"
                ));
              END IF;
              RETURN NULL;
            END;
            $$ LANGUAGE plpgsql;
        </sql>

        <sql splitStatements="false">
            CREATE OR REPLACE FUNCTION effective_permissions_mx_on_update()
            RETURNS TRIGGER AS $$
            DECLARE
              project_ids BIGINT[];
            BEGIN
              IF TG_TABLE_NAME = 'PROJECT_ACCESS_TEAMS' THEN
                PERFORM recalc_user_project_effective_permissions((
                  SELECT ARRAY_AGG("PROJECT_ID")
                    FROM (
                      SELECT "PROJECT_ID" FROM old_table
                      UNION
                      SELECT "PROJECT_ID" FROM new_table
                    ) AS combined_projects
                ));
              ELSIF TG_TABLE_NAME IN ('USERS_TEAMS', 'TEAMS_PERMISSIONS') THEN
                PERFORM recalc_user_project_effective_permissions((
                  SELECT ARRAY_AGG(DISTINCT pat."PROJECT_ID")
                    FROM "PROJECT_ACCESS_TEAMS" pat
                    JOIN (
                      SELECT "TEAM_ID" FROM old_table
                      UNION
                      SELECT "TEAM_ID" FROM new_table
                    ) AS teams
                      ON pat."TEAM_ID" = teams."TEAM_ID"
                ));
              END IF;
              RETURN NULL;
            END;
            $$ LANGUAGE plpgsql;
        </sql>

        <sql splitStatements="false">
            CREATE OR REPLACE FUNCTION prevent_direct_effective_permissions_writes()
            RETURNS TRIGGER AS $$
            BEGIN
              -- Depth of 1 means this trigger was fired by an attempted direct
              -- insert, update, or delete on USER_PROJECT_EFFECTIVE_PERMISSIONS.
              -- Depth should be 2, meaning this trigger was fired from another trigger.
              IF pg_trigger_depth() &lt; 2 THEN
                RAISE EXCEPTION 'Direct modifications to USER_PROJECT_EFFECTIVE_PERMISSIONS are not allowed.';
              END IF;
              RETURN NEW;
            END;
            $$ LANGUAGE plpgsql;
        </sql>

        <sql splitStatements="true">
            -- INSERT trigger for USERS_TEAMS
            CREATE TRIGGER trigger_effective_permissions_mx_on_users_teams_insert
            AFTER INSERT ON "USERS_TEAMS"
            REFERENCING NEW TABLE AS new_table
            FOR EACH STATEMENT
            EXECUTE FUNCTION effective_permissions_mx_on_insert();

            -- DELETE trigger for USERS_TEAMS
            CREATE TRIGGER trigger_effective_permissions_mx_on_users_teams_delete
            AFTER DELETE ON "USERS_TEAMS"
            REFERENCING OLD TABLE AS old_table
            FOR EACH STATEMENT
            EXECUTE FUNCTION effective_permissions_mx_on_delete();

            -- UPDATE trigger for USERS_TEAMS
            CREATE TRIGGER trigger_effective_permissions_mx_on_users_teams_update
            AFTER UPDATE ON "USERS_TEAMS"
            REFERENCING OLD TABLE AS old_table NEW TABLE AS new_table
            FOR EACH STATEMENT
            EXECUTE FUNCTION effective_permissions_mx_on_update();
        </sql>

        <sql splitStatements="false">
            -- Backfill the USER_PROJECT_EFFECTIVE_PERMISSIONS table for existing PROJECT_ACCESS_TEAMS entries
            DO $$
            BEGIN
              PERFORM recalc_user_project_effective_permissions(
                (SELECT ARRAY_AGG(DISTINCT "PROJECT_ID") FROM "PROJECT_ACCESS_TEAMS")
              );
            END;
            $$;
        </sql>

        <sql splitStatements="true">
            -- Prevent direct inserts/updates/writes to USER_PROJECT_EFFECTIVE_PERMISSIONS
            CREATE TRIGGER trigger_prevent_direct_effective_permissions_writes
            BEFORE DELETE OR INSERT OR UPDATE ON "USER_PROJECT_EFFECTIVE_PERMISSIONS"
            FOR EACH STATEMENT
            EXECUTE FUNCTION prevent_direct_effective_permissions_writes();
        </sql>
    </changeSet>

    <changeSet id="v5.6.0-25.1" author="sahibamittal">
        <!-- Step 1: Create procedure to migrate metrics to partitions-->
        <sql splitStatements="false">
            <![CDATA[
            CREATE OR REPLACE PROCEDURE "MIGRATE_METRICS_TO_PARTITIONS"(
                target_table TEXT,
                source_table TEXT,
                columns TEXT
            )
            LANGUAGE plpgsql
            AS $$
            DECLARE
                retention_days INTEGER := 90;
                configured_start_date DATE;
                actual_data_start_date DATE;
                start_date DATE;
                end_date DATE := current_date + INTERVAL '1 day';
                partition_date DATE;
                partition_name TEXT;
                partition_exists BOOLEAN;
                next_day DATE;
            BEGIN
                -- Fetch retention value from config
                SELECT COALESCE((
                    SELECT cp."PROPERTYVALUE"::INTEGER
                    FROM "CONFIGPROPERTY" cp
                    WHERE cp."GROUPNAME" = 'maintenance'
                    AND cp."PROPERTYNAME" = 'metrics.retention.days'
                ), 90)
                INTO retention_days;

                -- Calculate configured start date
                configured_start_date := current_date - (retention_days * INTERVAL '1 day');

                -- Get earliest date in source_table
                EXECUTE format('SELECT MIN("LAST_OCCURRENCE") FROM %I', source_table)
                INTO actual_data_start_date;

                IF actual_data_start_date IS NULL THEN
                    start_date := current_date;
                ELSE
                    start_date := GREATEST(configured_start_date, actual_data_start_date);
                END IF;

                partition_date := start_date;

                -- Create partitions for each day starting from retention period
                WHILE partition_date < end_date LOOP
                    next_day := partition_date + INTERVAL '1 day';
                    partition_name := format('%s_%s', source_table, to_char(partition_date, 'YYYYMMDD'));

                    SELECT EXISTS (
                        SELECT 1 FROM pg_class WHERE relname = partition_name
                    ) INTO partition_exists;

                    -- Create partition if it doesn't exist already.
                    IF NOT partition_exists THEN
                        EXECUTE format(
                            'CREATE TABLE IF NOT EXISTS %I (LIKE %I INCLUDING ALL);',
                            partition_name,
                            target_table
                        );
                        EXECUTE format(
                            'ALTER TABLE %I ATTACH PARTITION %I FOR VALUES FROM (%L) TO (%L);',
                            target_table,
                            partition_name,
                            partition_date,
                            next_day
                        );
                    END IF;

                    -- Insert data from existing table into this partition
                    EXECUTE format(
                        'INSERT INTO %I (%s) SELECT %s FROM %I WHERE "LAST_OCCURRENCE" >= %L AND "LAST_OCCURRENCE" < %L;',
                        target_table,
                        columns,
                        columns,
                        source_table,
                        partition_date,
                        next_day
                    );

                    partition_date := next_day;
                END LOOP;
            END;
            $$;
            ]]>
        </sql>
        <!-- Step 2: Create partitioned table PORTFOLIOMETRICS_NEW -->
        <sql>
            CREATE TABLE "PORTFOLIOMETRICS_NEW"
            (
            "COMPONENTS" int4 NOT NULL,
            "CRITICAL" int4 NOT NULL,
            "FINDINGS_AUDITED" int4 NULL,
            "FINDINGS_TOTAL" int4 NULL,
            "FINDINGS_UNAUDITED" int4 NULL,
            "FIRST_OCCURRENCE" timestamptz NOT NULL,
            "HIGH" int4 NOT NULL,
            "RISKSCORE" float8 NOT NULL,
            "LAST_OCCURRENCE" timestamptz NOT NULL,
            "LOW" int4 NOT NULL,
            "MEDIUM" int4 NOT NULL,
            "POLICYVIOLATIONS_AUDITED" int4 NULL,
            "POLICYVIOLATIONS_FAIL" int4 NULL,
            "POLICYVIOLATIONS_INFO" int4 NULL,
            "POLICYVIOLATIONS_LICENSE_AUDITED" int4 NULL,
            "POLICYVIOLATIONS_LICENSE_TOTAL" int4 NULL,
            "POLICYVIOLATIONS_LICENSE_UNAUDITED" int4 NULL,
            "POLICYVIOLATIONS_OPERATIONAL_AUDITED" int4 NULL,
            "POLICYVIOLATIONS_OPERATIONAL_TOTAL" int4 NULL,
            "POLICYVIOLATIONS_OPERATIONAL_UNAUDITED" int4 NULL,
            "POLICYVIOLATIONS_SECURITY_AUDITED" int4 NULL,
            "POLICYVIOLATIONS_SECURITY_TOTAL" int4 NULL,
            "POLICYVIOLATIONS_SECURITY_UNAUDITED" int4 NULL,
            "POLICYVIOLATIONS_TOTAL" int4 NULL,
            "POLICYVIOLATIONS_UNAUDITED" int4 NULL,
            "POLICYVIOLATIONS_WARN" int4 NULL,
            "PROJECTS" int4 NOT NULL,
            "SUPPRESSED" int4 NOT NULL,
            "UNASSIGNED_SEVERITY" int4 NULL,
            "VULNERABILITIES" int4 NOT NULL,
            "VULNERABLECOMPONENTS" int4 NOT NULL,
            "VULNERABLEPROJECTS" int4 NOT NULL,
            CONSTRAINT "PORTFOLIOMETRICS_NEW_PK" PRIMARY KEY ("LAST_OCCURRENCE")
            ) PARTITION BY RANGE ("LAST_OCCURRENCE");
        </sql>
        <!-- Step 3: Create partitioned table PROJECTMETRICS_NEW -->
        <sql>
            CREATE TABLE "PROJECTMETRICS_NEW"
            (
            "COMPONENTS" int4 NOT NULL,
            "CRITICAL" int4 NOT NULL,
            "FINDINGS_AUDITED" int4 NULL,
            "FINDINGS_TOTAL" int4 NULL,
            "FINDINGS_UNAUDITED" int4 NULL,
            "FIRST_OCCURRENCE" timestamptz NOT NULL,
            "HIGH" int4 NOT NULL,
            "RISKSCORE" float8 NOT NULL,
            "LAST_OCCURRENCE" timestamptz NOT NULL,
            "LOW" int4 NOT NULL,
            "MEDIUM" int4 NOT NULL,
            "POLICYVIOLATIONS_AUDITED" int4 NULL,
            "POLICYVIOLATIONS_FAIL" int4 NULL,
            "POLICYVIOLATIONS_INFO" int4 NULL,
            "POLICYVIOLATIONS_LICENSE_AUDITED" int4 NULL,
            "POLICYVIOLATIONS_LICENSE_TOTAL" int4 NULL,
            "POLICYVIOLATIONS_LICENSE_UNAUDITED" int4 NULL,
            "POLICYVIOLATIONS_OPERATIONAL_AUDITED" int4 NULL,
            "POLICYVIOLATIONS_OPERATIONAL_TOTAL" int4 NULL,
            "POLICYVIOLATIONS_OPERATIONAL_UNAUDITED" int4 NULL,
            "POLICYVIOLATIONS_SECURITY_AUDITED" int4 NULL,
            "POLICYVIOLATIONS_SECURITY_TOTAL" int4 NULL,
            "POLICYVIOLATIONS_SECURITY_UNAUDITED" int4 NULL,
            "POLICYVIOLATIONS_TOTAL" int4 NULL,
            "POLICYVIOLATIONS_UNAUDITED" int4 NULL,
            "POLICYVIOLATIONS_WARN" int4 NULL,
            "PROJECT_ID" int8 NOT NULL,
            "SUPPRESSED" int4 NOT NULL,
            "UNASSIGNED_SEVERITY" int4 NULL,
            "VULNERABILITIES" int4 NOT NULL,
            "VULNERABLECOMPONENTS" int4 NOT NULL,
            CONSTRAINT "PROJECTMETRICS_NEW_PK" PRIMARY KEY ("PROJECT_ID", "LAST_OCCURRENCE")
            ) PARTITION BY RANGE ("LAST_OCCURRENCE");
        </sql>
        <!-- Step 4: Create partitioned table DEPENDENCYMETRICS_NEW -->
        <sql>
            CREATE TABLE "DEPENDENCYMETRICS_NEW"
            (
            "COMPONENT_ID" int8 NOT NULL,
            "CRITICAL" int4 NOT NULL,
            "FINDINGS_AUDITED" int4 NULL,
            "FINDINGS_TOTAL" int4 NULL,
            "FINDINGS_UNAUDITED" int4 NULL,
            "FIRST_OCCURRENCE" timestamptz NOT NULL,
            "HIGH" int4 NOT NULL,
            "RISKSCORE" float8 NOT NULL,
            "LAST_OCCURRENCE" timestamptz NOT NULL,
            "LOW" int4 NOT NULL,
            "MEDIUM" int4 NOT NULL,
            "POLICYVIOLATIONS_AUDITED" int4 NULL,
            "POLICYVIOLATIONS_FAIL" int4 NULL,
            "POLICYVIOLATIONS_INFO" int4 NULL,
            "POLICYVIOLATIONS_LICENSE_AUDITED" int4 NULL,
            "POLICYVIOLATIONS_LICENSE_TOTAL" int4 NULL,
            "POLICYVIOLATIONS_LICENSE_UNAUDITED" int4 NULL,
            "POLICYVIOLATIONS_OPERATIONAL_AUDITED" int4 NULL,
            "POLICYVIOLATIONS_OPERATIONAL_TOTAL" int4 NULL,
            "POLICYVIOLATIONS_OPERATIONAL_UNAUDITED" int4 NULL,
            "POLICYVIOLATIONS_SECURITY_AUDITED" int4 NULL,
            "POLICYVIOLATIONS_SECURITY_TOTAL" int4 NULL,
            "POLICYVIOLATIONS_SECURITY_UNAUDITED" int4 NULL,
            "POLICYVIOLATIONS_TOTAL" int4 NULL,
            "POLICYVIOLATIONS_UNAUDITED" int4 NULL,
            "POLICYVIOLATIONS_WARN" int4 NULL,
            "PROJECT_ID" int8 NOT NULL,
            "SUPPRESSED" int4 NOT NULL,
            "UNASSIGNED_SEVERITY" int4 NULL,
            "VULNERABILITIES" int4 NOT NULL,
            CONSTRAINT "DEPENDENCYMETRICS_NEW_PK" PRIMARY KEY ("PROJECT_ID", "COMPONENT_ID", "LAST_OCCURRENCE")
            ) PARTITION BY RANGE ("LAST_OCCURRENCE");
        </sql>
    </changeSet>

    <changeSet id="v5.6.0-25.2" author="sahibamittal">
        <!-- Step 5: Perform migration for "PORTFOLIOMETRICS" -->
        <sql>
            -- call the migration procedure
            CALL "MIGRATE_METRICS_TO_PARTITIONS"('PORTFOLIOMETRICS_NEW'::TEXT, 'PORTFOLIOMETRICS'::TEXT,
            '"COMPONENTS", "CRITICAL", "FINDINGS_AUDITED", "FINDINGS_TOTAL", "FINDINGS_UNAUDITED", "FIRST_OCCURRENCE", "HIGH", "RISKSCORE", "LAST_OCCURRENCE", "LOW", "MEDIUM", "POLICYVIOLATIONS_AUDITED", "POLICYVIOLATIONS_FAIL", "POLICYVIOLATIONS_INFO", "POLICYVIOLATIONS_LICENSE_AUDITED", "POLICYVIOLATIONS_LICENSE_TOTAL", "POLICYVIOLATIONS_LICENSE_UNAUDITED", "POLICYVIOLATIONS_OPERATIONAL_AUDITED", "POLICYVIOLATIONS_OPERATIONAL_TOTAL", "POLICYVIOLATIONS_OPERATIONAL_UNAUDITED", "POLICYVIOLATIONS_SECURITY_AUDITED", "POLICYVIOLATIONS_SECURITY_TOTAL", "POLICYVIOLATIONS_SECURITY_UNAUDITED", "POLICYVIOLATIONS_TOTAL", "POLICYVIOLATIONS_UNAUDITED", "POLICYVIOLATIONS_WARN", "PROJECTS", "SUPPRESSED", "UNASSIGNED_SEVERITY", "VULNERABILITIES", "VULNERABLECOMPONENTS", "VULNERABLEPROJECTS"');

            -- drop old table
            DROP TABLE "PORTFOLIOMETRICS";

            -- rename partitioned table
            ALTER TABLE "PORTFOLIOMETRICS_NEW" RENAME TO "PORTFOLIOMETRICS";

            -- rename PK
            ALTER TABLE "PORTFOLIOMETRICS" RENAME CONSTRAINT "PORTFOLIOMETRICS_NEW_PK" TO "PORTFOLIOMETRICS_PK";
        </sql>
    </changeSet>

    <changeSet id="v5.6.0-25.3" author="sahibamittal">
        <!-- Step 6: Perform migration for "PROJECTMETRICS" -->
        <sql>
            -- call the migration procedure
            CALL "MIGRATE_METRICS_TO_PARTITIONS"('PROJECTMETRICS_NEW'::TEXT, 'PROJECTMETRICS'::TEXT,
            '"COMPONENTS", "CRITICAL", "FINDINGS_AUDITED", "FINDINGS_TOTAL", "FINDINGS_UNAUDITED", "FIRST_OCCURRENCE", "HIGH", "RISKSCORE", "LAST_OCCURRENCE", "LOW", "MEDIUM", "POLICYVIOLATIONS_AUDITED", "POLICYVIOLATIONS_FAIL", "POLICYVIOLATIONS_INFO", "POLICYVIOLATIONS_LICENSE_AUDITED", "POLICYVIOLATIONS_LICENSE_TOTAL", "POLICYVIOLATIONS_LICENSE_UNAUDITED", "POLICYVIOLATIONS_OPERATIONAL_AUDITED", "POLICYVIOLATIONS_OPERATIONAL_TOTAL", "POLICYVIOLATIONS_OPERATIONAL_UNAUDITED", "POLICYVIOLATIONS_SECURITY_AUDITED", "POLICYVIOLATIONS_SECURITY_TOTAL", "POLICYVIOLATIONS_SECURITY_UNAUDITED", "POLICYVIOLATIONS_TOTAL", "POLICYVIOLATIONS_UNAUDITED", "POLICYVIOLATIONS_WARN", "PROJECT_ID", "SUPPRESSED", "UNASSIGNED_SEVERITY", "VULNERABILITIES", "VULNERABLECOMPONENTS"');

            -- drop old table
            DROP TABLE "PROJECTMETRICS";

            -- rename partitioned table
            ALTER TABLE "PROJECTMETRICS_NEW" RENAME TO "PROJECTMETRICS";

            -- rename PK
            ALTER TABLE "PROJECTMETRICS" RENAME CONSTRAINT "PROJECTMETRICS_NEW_PK" TO "PROJECTMETRICS_PK";
        </sql>
    </changeSet>

    <changeSet id="v5.6.0-25.4" author="sahibamittal">
        <!-- Step 7: Perform migration for "DEPENDENCYMETRICS" -->
        <sql>
            -- call the migration procedure
            CALL "MIGRATE_METRICS_TO_PARTITIONS"('DEPENDENCYMETRICS_NEW'::TEXT, 'DEPENDENCYMETRICS'::TEXT,
            '"COMPONENT_ID", "CRITICAL", "FINDINGS_AUDITED", "FINDINGS_TOTAL", "FINDINGS_UNAUDITED", "FIRST_OCCURRENCE", "HIGH", "RISKSCORE", "LAST_OCCURRENCE", "LOW", "MEDIUM", "POLICYVIOLATIONS_AUDITED", "POLICYVIOLATIONS_FAIL", "POLICYVIOLATIONS_INFO", "POLICYVIOLATIONS_LICENSE_AUDITED", "POLICYVIOLATIONS_LICENSE_TOTAL", "POLICYVIOLATIONS_LICENSE_UNAUDITED", "POLICYVIOLATIONS_OPERATIONAL_AUDITED", "POLICYVIOLATIONS_OPERATIONAL_TOTAL", "POLICYVIOLATIONS_OPERATIONAL_UNAUDITED", "POLICYVIOLATIONS_SECURITY_AUDITED", "POLICYVIOLATIONS_SECURITY_TOTAL", "POLICYVIOLATIONS_SECURITY_UNAUDITED", "POLICYVIOLATIONS_TOTAL", "POLICYVIOLATIONS_UNAUDITED", "POLICYVIOLATIONS_WARN", "PROJECT_ID", "SUPPRESSED", "UNASSIGNED_SEVERITY", "VULNERABILITIES"');

            -- drop old table
            DROP TABLE "DEPENDENCYMETRICS";

            -- rename partitioned table
            ALTER TABLE "DEPENDENCYMETRICS_NEW" RENAME TO "DEPENDENCYMETRICS";

            -- rename PK
            ALTER TABLE "DEPENDENCYMETRICS" RENAME CONSTRAINT "DEPENDENCYMETRICS_NEW_PK" TO "DEPENDENCYMETRICS_PK";
        </sql>
    </changeSet>

    <changeSet id="v5.6.0-25.5" author="sahibamittal">
        <!-- Step 8: Create FK constraints -->
        <addForeignKeyConstraint baseColumnNames="PROJECT_ID" baseTableName="PROJECTMETRICS"
                                 constraintName="PROJECTMETRICS_PROJECT_FK" deferrable="true" initiallyDeferred="true"
                                 onDelete="CASCADE" onUpdate="NO ACTION" referencedColumnNames="ID"
                                 referencedTableName="PROJECT" validate="true"/>
        <addForeignKeyConstraint baseColumnNames="PROJECT_ID" baseTableName="DEPENDENCYMETRICS"
                                 constraintName="DEPENDENCYMETRICS_PROJECT_FK" deferrable="true" initiallyDeferred="true"
                                 onDelete="CASCADE" onUpdate="NO ACTION" referencedColumnNames="ID"
                                 referencedTableName="PROJECT" validate="true"/>
        <addForeignKeyConstraint baseColumnNames="COMPONENT_ID" baseTableName="DEPENDENCYMETRICS"
                                 constraintName="DEPENDENCYMETRICS_COMPONENT_FK" deferrable="true" initiallyDeferred="true"
                                 onDelete="CASCADE" onUpdate="NO ACTION" referencedColumnNames="ID"
                                 referencedTableName="COMPONENT" validate="true"/>

        <!-- Step 9: Drop MIGRATE_METRICS_TO_PARTITIONS procedure -->
        <dropProcedure procedureName="MIGRATE_METRICS_TO_PARTITIONS"/>
    </changeSet>

    <changeSet id="v5.6.0-26" author="nscuro">
        <!--
          Disable deferred constraint checking during this transaction.
          Without this, we would not be able to add primary keys after
          having deleted records from a table before.
        -->
        <sql>SET CONSTRAINTS ALL IMMEDIATE</sql>

        <dropIndex tableName="NOTIFICATIONRULE_TAGS" indexName="NOTIFICATIONRULE_TAGS_NOTIFICATIONRULE_ID_IDX"/>
        <dropIndex tableName="NOTIFICATIONRULE_TAGS" indexName="NOTIFICATIONRULE_TAGS_TAG_ID_IDX"/>
        <dropIndex tableName="POLICY_TAGS" indexName="POLICY_TAGS_POLICY_ID_IDX"/>
        <dropIndex tableName="POLICY_TAGS" indexName="POLICY_TAGS_TAG_ID_IDX"/>
        <dropIndex tableName="PROJECTS_TAGS" indexName="PROJECTS_TAGS_PROJECT_ID_IDX"/>
        <dropIndex tableName="PROJECTS_TAGS" indexName="PROJECTS_TAGS_TAG_ID_IDX"/>
        <dropIndex tableName="VULNERABILITIES_TAGS" indexName="VULNERABILITIES_TAGS_TAG_ID_IDX"/>
        <dropIndex tableName="VULNERABILITIES_TAGS" indexName="VULNERABILITIES_TAGS_VULNERABILITY_ID_IDX"/>
        <sql>DROP INDEX IF EXISTS "TAG_NAME_IDX"</sql> <!-- dropIndex doesn't support IF EXISTS -->

        <!-- Collect all tags with duplicate names into a temporary table for reuse. -->
        <sql splitStatements="false">
            CREATE TEMPORARY TABLE tmp_duplicate_tag
              ON COMMIT DROP
            AS
              SELECT "NAME" AS name
                   , MIN("ID") AS canonical_id
                FROM "TAG"
               GROUP BY "NAME"
              HAVING COUNT(*) &gt; 1;
        </sql>

        <!--
          To avoid excessive repetition, define a function to re-wire relationships of
          duplicate tags, and to ensure that there exist no duplicates in relationship
          tables either.
        -->
        <sql splitStatements="false">
            CREATE FUNCTION cleanup_duplicate_tag_relationships(
              table_name         TEXT,
              relation_id_column TEXT
            )
            RETURNS void AS $$
            BEGIN
              EXECUTE format($q$
                UPDATE %1$I AS tag_relationship
                   SET "TAG_ID" = tmp_duplicate_tag.canonical_id
                  FROM tmp_duplicate_tag
                 INNER JOIN "TAG"
                    ON "TAG"."NAME" = tmp_duplicate_tag.name
                   AND "TAG"."ID" != tmp_duplicate_tag.canonical_id
                 WHERE tag_relationship."TAG_ID" = "TAG"."ID";
                $q$, table_name, relation_id_column
              );

              EXECUTE format($q$
                WITH cte_dupe AS (
                  SELECT "TAG_ID"
                       , %2$I
                    FROM %1$I AS tag_relationship
                   GROUP BY "TAG_ID"
                          , %2$I
                  HAVING COUNT(*) &gt; 1
                ),
                cte_deleted_dupe AS (
                  DELETE FROM %1$I AS tag_relationship
                   USING cte_dupe
                   WHERE tag_relationship."TAG_ID" = cte_dupe."TAG_ID"
                     AND tag_relationship.%2$I = cte_dupe.%2$I
                  RETURNING tag_relationship."TAG_ID"
                          , tag_relationship.%2$I
                )
                INSERT INTO %1$I ("TAG_ID", %2$I)
                SELECT DISTINCT "TAG_ID", %2$I FROM cte_deleted_dupe;
              $q$, table_name, relation_id_column
            );
            END;
            $$ LANGUAGE plpgsql;
        </sql>

        <sql splitStatements="false">
            DO $$
            BEGIN
              PERFORM cleanup_duplicate_tag_relationships('NOTIFICATIONRULE_TAGS', 'NOTIFICATIONRULE_ID');
              PERFORM cleanup_duplicate_tag_relationships('POLICY_TAGS', 'POLICY_ID');
              PERFORM cleanup_duplicate_tag_relationships('PROJECTS_TAGS', 'PROJECT_ID');
              PERFORM cleanup_duplicate_tag_relationships('VULNERABILITIES_TAGS', 'VULNERABILITY_ID');
            END
            $$;
        </sql>

        <sql splitStatements="true">
            DROP FUNCTION cleanup_duplicate_tag_relationships;

            DELETE FROM "TAG"
             USING tmp_duplicate_tag
             WHERE "TAG"."NAME" = tmp_duplicate_tag.name
               AND "TAG"."ID" != tmp_duplicate_tag.canonical_id;
        </sql>

        <!-- Ensure no more duplicates can be introduced. -->
        <addPrimaryKey
                tableName="NOTIFICATIONRULE_TAGS"
                columnNames="NOTIFICATIONRULE_ID, TAG_ID"
                constraintName="NOTIFICATIONRULE_TAGS_PK"/>
        <addPrimaryKey
                tableName="POLICY_TAGS"
                columnNames="POLICY_ID, TAG_ID"
                constraintName="POLICY_TAGS_PK"/>
        <addPrimaryKey
                tableName="PROJECTS_TAGS"
                columnNames="PROJECT_ID, TAG_ID"
                constraintName="PROJECTS_TAGS_PK"/>
        <addPrimaryKey
                tableName="VULNERABILITIES_TAGS"
                columnNames="VULNERABILITY_ID, TAG_ID"
                constraintName="VULNERABILITIES_TAGS_PK"/>
        <createIndex tableName="TAG" indexName="TAG_NAME_IDX" unique="true">
            <column name="NAME"/>
        </createIndex>
    </changeSet>

    <changeSet id="v5.6.0-27" author="jhoward-lm">
        <createTable ifNotExists="true" tableName="ROLE">
            <column autoIncrement="true" name="ID" type="BIGINT">
                <constraints nullable="false" primaryKey="true" primaryKeyName="ROLE_PK" />
            </column>

            <column name="NAME" type="VARCHAR(255)">
                <constraints nullable="false" unique="true"
                    uniqueConstraintName="ROLE_NAME_IDX"
                    validateNullable="true" validateUnique="true" />
            </column>

            <column name="UUID" type="UUID">
                <constraints nullable="false" unique="true"
                    uniqueConstraintName="ROLE_UUID_IDX"
                    validateNullable="true" validateUnique="true" />
            </column>
        </createTable>

        <createTable ifNotExists="true" tableName="ROLES_PERMISSIONS">
            <column name="ROLE_ID" type="BIGINT">
                <constraints nullable="false" unique="true"
                    uniqueConstraintName="ROLES_PERMISSIONS_COMPOSITE_IDX"
                    foreignKeyName="ROLES_PERMISSIONS_ROLE_FK"
                    referencedTableName="ROLE" referencedColumnNames="ID"
                    deferrable="true" initiallyDeferred="true" deleteCascade="true"
                    validateUnique="true" validateForeignKey="true" />
            </column>

            <column name="PERMISSION_ID" type="BIGINT">
                <constraints nullable="false" unique="true"
                    uniqueConstraintName="ROLES_PERMISSIONS_COMPOSITE_IDX"
                    foreignKeyName="ROLES_PERMISSIONS_PERMISSION_FK"
                    referencedTableName="PERMISSION" referencedColumnNames="ID"
                    deferrable="true" initiallyDeferred="true" deleteCascade="true"
                    validateUnique="true" validateForeignKey="true" />
            </column>
        </createTable>

        <createIndex indexName="ROLES_PERMISSIONS_ROLE_ID_IDX" tableName="ROLES_PERMISSIONS">
            <column name="ROLE_ID" />
        </createIndex>

        <createIndex indexName="ROLES_PERMISSIONS_PERMISSION_ID_IDX" tableName="ROLES_PERMISSIONS">
            <column name="PERMISSION_ID" />
        </createIndex>

        <createTable ifNotExists="true" tableName="PROJECT_ROLE_BINDING">
            <column name="USER_ID" type="BIGINT">
                <constraints nullable="false"
                    foreignKeyName="PROJECT_ROLE_BINDING_USER_FK"
                    referencedTableName="USER" referencedColumnNames="ID"
                    deferrable="true" initiallyDeferred="true" deleteCascade="true"
                    validateForeignKey="true" />
            </column>

            <column name="PROJECT_ID" type="BIGINT">
                <constraints nullable="false"
                    foreignKeyName="PROJECT_ROLE_BINDING_PROJECT_FK"
                    referencedTableName="PROJECT" referencedColumnNames="ID"
                    deferrable="true" initiallyDeferred="true" deleteCascade="true"
                    validateForeignKey="true" />
            </column>

            <column name="ROLE_ID" type="BIGINT">
                <constraints nullable="false"
                    foreignKeyName="PROJECT_ROLE_BINDING_ROLE_FK"
                    referencedTableName="ROLE" referencedColumnNames="ID"
                    deferrable="true" initiallyDeferred="true" deleteCascade="true"
                    validateForeignKey="true" />
            </column>
        </createTable>

        <createIndex unique="true" indexName="PROJECT_ROLE_BINDING_USER_PROJECT_IDX" tableName="PROJECT_ROLE_BINDING">
            <column name="USER_ID" />
            <column name="PROJECT_ID" />
        </createIndex>

        <createIndex indexName="PROJECT_ROLE_BINDING_ROLE_ID_IDX" tableName="PROJECT_ROLE_BINDING">
            <column name="ROLE_ID" />
        </createIndex>

        <sql splitStatements="false">
            -- Helper function to recalculate all user permissions for a project.
            -- Called by trigger functions to update the values in the USER_PROJECT_EFFECTIVE_PERMISSIONS table.
            CREATE OR REPLACE FUNCTION recalc_user_project_role_effective_permissions(project_ids BIGINT[])
            RETURNS void AS $$
            DECLARE
              tbl_prefix TEXT;
            BEGIN
              -- Remove any existing effective permissions for this project
              DELETE FROM "USER_PROJECT_EFFECTIVE_PERMISSIONS"
              WHERE "PROJECT_ID" = ANY(project_ids);

              -- Rebuild effective permissions for all users
              INSERT INTO "USER_PROJECT_EFFECTIVE_PERMISSIONS"
                ("USER_ID", "PROJECT_ID", "PERMISSION_ID", "PERMISSION_NAME")
              SELECT DISTINCT upr."USER_ID", upr."PROJECT_ID", rp."PERMISSION_ID", p."NAME"
                FROM "PROJECT_ROLE_BINDING" upr
               INNER JOIN "ROLES_PERMISSIONS" rp
                  ON rp."ROLE_ID" = upr."ROLE_ID"
               INNER JOIN "PERMISSION" p
                  ON p."ID" = rp."PERMISSION_ID"
               WHERE upr."PROJECT_ID" = ANY(project_ids);
            END;
            $$ LANGUAGE plpgsql;
        </sql>

        <sql splitStatements="false">
            CREATE OR REPLACE FUNCTION role_effective_permissions_mx_on_delete()
            RETURNS TRIGGER AS $$
            DECLARE
              project_ids BIGINT[];
              role_ids    BIGINT[];
            BEGIN
              SELECT ARRAY_AGG(DISTINCT "ROLE_ID")
                INTO role_ids
                FROM old_table;

              IF TG_TABLE_NAME = 'ROLES_PERMISSIONS' THEN
                SELECT ARRAY_AGG(sub."PROJECT_ID")
                  INTO project_ids
                  FROM (
                    SELECT upr."PROJECT_ID"
                      FROM "PROJECT_ROLE_BINDING" upr
                     INNER JOIN old_table
                        ON old_table."ROLE_ID" = upr."ROLE_ID"
                  ) sub;
              ELSE
                SELECT ARRAY_AGG(DISTINCT "PROJECT_ID")
                  INTO project_ids
                  FROM "PROJECT_ROLE_BINDING"
                 WHERE "ROLE_ID" = ANY(role_ids);
              END IF;

              PERFORM recalc_user_project_role_effective_permissions(project_ids);
              RETURN NULL;
            END;
            $$ LANGUAGE plpgsql;
        </sql>

        <sql splitStatements="false">
            CREATE OR REPLACE FUNCTION role_effective_permissions_mx_on_insert()
            RETURNS TRIGGER AS $$
            DECLARE
              project_ids BIGINT[];
              role_ids    BIGINT[];
            BEGIN
              SELECT ARRAY_AGG(DISTINCT "ROLE_ID")
                INTO role_ids
                FROM new_table;

              IF TG_TABLE_NAME = 'ROLES_PERMISSIONS' THEN
                SELECT ARRAY_AGG(sub."PROJECT_ID")
                  INTO project_ids
                  FROM (
                    SELECT upr."PROJECT_ID"
                      FROM "PROJECT_ROLE_BINDING" upr
                     INNER JOIN new_table
                        ON new_table."ROLE_ID" = upr."ROLE_ID"
                  ) sub;
              ELSE
                SELECT ARRAY_AGG(DISTINCT "PROJECT_ID")
                  INTO project_ids
                  FROM "PROJECT_ROLE_BINDING"
                 WHERE "ROLE_ID" = ANY(role_ids);
              END IF;

              PERFORM recalc_user_project_role_effective_permissions(project_ids);
              RETURN NULL;
            END;
            $$ LANGUAGE plpgsql;
        </sql>

        <sql splitStatements="false">
            CREATE OR REPLACE FUNCTION role_effective_permissions_mx_on_update()
            RETURNS TRIGGER AS $$
            DECLARE
              project_ids BIGINT[];
              role_ids    BIGINT[];
            BEGIN
              SELECT ARRAY_AGG("ROLE_ID")
                INTO role_ids
                FROM (
                  SELECT "ROLE_ID" FROM old_table
                   UNION
                  SELECT "ROLE_ID" FROM new_table
                ) roles;

              IF TG_TABLE_NAME = 'ROLES_PERMISSIONS' THEN
                SELECT ARRAY_AGG(sub."PROJECT_ID")
                  INTO project_ids
                  FROM (
                    SELECT upr."PROJECT_ID"
                      FROM "PROJECT_ROLE_BINDING" upr
                     INNER JOIN new_table
                        ON new_table."ROLE_ID" = upr."ROLE_ID"
                      FULL OUTER JOIN old_table
                        ON new_table."ROLE_ID" = old_table."ROLE_ID"
                  ) sub;
              ELSE
                SELECT ARRAY_AGG(DISTINCT "PROJECT_ID")
                  INTO project_ids
                  FROM "PROJECT_ROLE_BINDING"
                 WHERE "ROLE_ID" = ANY(role_ids);
              END IF;

              PERFORM recalc_user_project_role_effective_permissions(project_ids);
              RETURN NULL;
            END;
            $$ LANGUAGE plpgsql;
        </sql>

        <sql splitStatements="true">
            -- INSERT trigger for PROJECT_ROLE_BINDING
            CREATE TRIGGER trigger_effective_permissions_mx_on_users_roles_insert
            AFTER INSERT ON "PROJECT_ROLE_BINDING"
            REFERENCING NEW TABLE AS new_table
            FOR EACH STATEMENT
            EXECUTE FUNCTION role_effective_permissions_mx_on_insert();

            -- DELETE trigger for PROJECT_ROLE_BINDING
            CREATE TRIGGER trigger_effective_permissions_mx_on_users_roles_delete
            AFTER DELETE ON "PROJECT_ROLE_BINDING"
            REFERENCING OLD TABLE AS old_table
            FOR EACH STATEMENT
            EXECUTE FUNCTION role_effective_permissions_mx_on_delete();

            -- UPDATE trigger for PROJECT_ROLE_BINDING
            CREATE TRIGGER trigger_effective_permissions_mx_on_users_roles_update
            AFTER UPDATE ON "PROJECT_ROLE_BINDING"
            REFERENCING OLD TABLE AS old_table NEW TABLE AS new_table
            FOR EACH STATEMENT
            EXECUTE FUNCTION role_effective_permissions_mx_on_update();

            -- INSERT trigger for ROLES_PERMISSIONS
            CREATE TRIGGER trigger_effective_permissions_mx_on_roles_permissions_insert
            AFTER INSERT ON "ROLES_PERMISSIONS"
            REFERENCING NEW TABLE AS new_table
            FOR EACH STATEMENT
            EXECUTE FUNCTION role_effective_permissions_mx_on_insert();

            -- DELETE trigger for ROLES_PERMISSIONS
            CREATE TRIGGER trigger_effective_permissions_mx_on_roles_permissions_delete
            AFTER DELETE ON "ROLES_PERMISSIONS"
            REFERENCING OLD TABLE AS old_table
            FOR EACH STATEMENT
            EXECUTE FUNCTION role_effective_permissions_mx_on_delete();

            -- UPDATE trigger for ROLES_PERMISSIONS
            CREATE TRIGGER trigger_effective_permissions_mx_on_roles_permissions_update
            AFTER UPDATE ON "ROLES_PERMISSIONS"
            REFERENCING OLD TABLE AS old_table NEW TABLE AS new_table
            FOR EACH STATEMENT
            EXECUTE FUNCTION effective_permissions_mx_on_update();
        </sql>
    </changeSet>
</databaseChangeLog>
