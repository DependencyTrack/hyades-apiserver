<?xml version="1.1" encoding="UTF-8" standalone="no"?>
<databaseChangeLog
        objectQuotingStrategy="QUOTE_ALL_OBJECTS"
        xmlns="http://www.liquibase.org/xml/ns/dbchangelog"
        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xsi:schemaLocation="http://www.liquibase.org/xml/ns/dbchangelog
            http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-latest.xsd">

    <changeSet id="v5.6.0-1" author="sahibamittal">
        <modifyDataType tableName="AFFECTEDVERSIONATTRIBUTION" columnName="UUID" newDataType="UUID"/>
        <modifyDataType tableName="BOM" columnName="UUID" newDataType="UUID"/>
        <modifyDataType tableName="COMPONENT" columnName="UUID" newDataType="UUID"/>
        <modifyDataType tableName="COMPONENT_PROPERTY" columnName="UUID" newDataType="UUID"/>
        <modifyDataType tableName="FINDINGATTRIBUTION" columnName="UUID" newDataType="UUID"/>
        <modifyDataType tableName="LICENSE" columnName="UUID" newDataType="UUID"/>
        <modifyDataType tableName="LICENSEGROUP" columnName="UUID" newDataType="UUID"/>
        <modifyDataType tableName="NOTIFICATIONPUBLISHER" columnName="UUID" newDataType="UUID"/>
        <modifyDataType tableName="NOTIFICATIONRULE" columnName="UUID" newDataType="UUID"/>
        <modifyDataType tableName="POLICY" columnName="UUID" newDataType="UUID"/>
        <modifyDataType tableName="POLICYCONDITION" columnName="UUID" newDataType="UUID"/>
        <modifyDataType tableName="POLICYVIOLATION" columnName="UUID" newDataType="UUID"/>
        <modifyDataType tableName="PROJECT" columnName="UUID" newDataType="UUID"/>
        <modifyDataType tableName="REPOSITORY" columnName="UUID" newDataType="UUID"/>
        <modifyDataType tableName="SERVICECOMPONENT" columnName="UUID" newDataType="UUID"/>
        <modifyDataType tableName="VEX" columnName="UUID" newDataType="UUID"/>
        <modifyDataType tableName="VULNERABILITY" columnName="UUID" newDataType="UUID"/>
        <modifyDataType tableName="VULNERABILITYALIAS" columnName="UUID" newDataType="UUID"/>
        <modifyDataType tableName="VULNERABILITYSCAN" columnName="TARGET_IDENTIFIER" newDataType="UUID"/>
        <modifyDataType tableName="VULNERABILITYSCAN" columnName="TOKEN" newDataType="UUID"/>
        <modifyDataType tableName="VULNERABLESOFTWARE" columnName="UUID" newDataType="UUID"/>
        <modifyDataType tableName="WORKFLOW_STATE" columnName="TOKEN" newDataType="UUID"/>
    </changeSet>

    <changeSet id="v5.6.0-2" author="nscuro">
        <modifyDataType tableName="TEAM" columnName="NAME" newDataType="VARCHAR(255)"/>
    </changeSet>
  
    <changeSet id="v5.6.0-3" author="rossmurphy974@gmail.com">
        <addColumn tableName="PROJECT">
            <column name="AUTHORS" type="TEXT"/>
        </addColumn>
        <addColumn tableName="COMPONENT">
            <column name="AUTHORS" type="TEXT"/>
        </addColumn>
        
        <sql>
            UPDATE "PROJECT"
            SET "AUTHORS" = JSON_BUILD_ARRAY(JSON_BUILD_OBJECT('name', "AUTHOR"))::TEXT
            WHERE "AUTHOR" IS NOT NULL;
        </sql>
        <sql>
            UPDATE "COMPONENT"
            SET "AUTHORS" = JSON_BUILD_ARRAY(JSON_BUILD_OBJECT('name', "AUTHOR"))::TEXT
            WHERE "AUTHOR" IS NOT NULL;
        </sql>

        <dropColumn tableName="PROJECT">
            <column name="AUTHOR"/>
        </dropColumn>
        <dropColumn tableName="COMPONENT">
            <column name="AUTHOR"/>
        </dropColumn>
    </changeSet>
    
    <changeSet id="v5.6.0-4" author="nscuro">
        <dropIndex tableName="COMPONENT" indexName="COMPONENT_DIRECT_DEPENDENCIES_GIN_IDX"/>
        <modifyDataType tableName="COMPONENT" columnName="DIRECT_DEPENDENCIES" newDataType="JSONB"/>
        <modifyDataType tableName="PROJECT" columnName="DIRECT_DEPENDENCIES" newDataType="JSONB"/>
        <sql splitStatements="true">
            CREATE
             INDEX "COMPONENT_DIRECT_DEPENDENCIES_JSONB_IDX"
                ON "COMPONENT"
             USING GIN("DIRECT_DEPENDENCIES" JSONB_PATH_OPS);
        </sql>
    </changeSet>

    <changeSet id="v5.6.0-5" author="sahibamittal">
        <sql>
            DELETE FROM "CONFIGPROPERTY"
            WHERE "GROUPNAME" = 'artifact'
            AND "PROPERTYNAME" = 'bom.validation.enabled';
        </sql>
    </changeSet>

    <changeSet id="v5.6.0-6" author="sahibamittal">
        <createTable tableName="NOTIFICATIONRULE_TAGS">
            <column name="NOTIFICATIONRULE_ID" type="BIGINT">
                <constraints nullable="false"/>
            </column>
            <column name="TAG_ID" type="BIGINT"/>
        </createTable>

        <createIndex indexName="NOTIFICATIONRULE_TAGS_NOTIFICATIONRULE_ID_IDX" tableName="NOTIFICATIONRULE_TAGS">
            <column name="NOTIFICATIONRULE_ID"/>
        </createIndex>
        <createIndex indexName="NOTIFICATIONRULE_TAGS_TAG_ID_IDX" tableName="NOTIFICATIONRULE_TAGS">
            <column name="TAG_ID"/>
        </createIndex>

        <addForeignKeyConstraint baseColumnNames="NOTIFICATIONRULE_ID" baseTableName="NOTIFICATIONRULE_TAGS"
                                 constraintName="NOTIFICATIONRULE_TAGS_NOTIFICATIONRULE_FK" deferrable="true" initiallyDeferred="true"
                                 onDelete="NO ACTION" onUpdate="NO ACTION" referencedColumnNames="ID"
                                 referencedTableName="NOTIFICATIONRULE" validate="true"/>

        <addForeignKeyConstraint baseColumnNames="TAG_ID" baseTableName="NOTIFICATIONRULE_TAGS"
                                 constraintName="NOTIFICATIONRULE_TAGS_TAG_FK" deferrable="true" initiallyDeferred="true"
                                 onDelete="NO ACTION" onUpdate="NO ACTION" referencedColumnNames="ID"
                                 referencedTableName="TAG" validate="true"/>
    </changeSet>

    <changeSet id="v5.6.0-7" author="sahibamittal">
        <addColumn tableName="PROJECT">
            <column name="IS_LATEST" type="BOOLEAN" defaultValueBoolean="false">
                <constraints nullable="false"/>
            </column>
        </addColumn>
        <addColumn tableName="POLICY">
            <column name="ONLY_LATEST_PROJECT_VERSION" type="BOOLEAN" defaultValueBoolean="false">
                <constraints nullable="false"/>
            </column>
        </addColumn>
        <createIndex indexName="PROJECT_IS_LATEST_IDX" tableName="PROJECT">
            <column name="IS_LATEST"/>
        </createIndex>
    </changeSet>

    <!--
        TODO: Use Liquibase contexts to allow these to be applied to a different datasource?
        TODO: Archive tables?
    -->
    <changeSet id="v5.6.0-8" author="nscuro">
        <sql splitStatements="true">
            CREATE TYPE JOB_STATUS AS ENUM ('COMPLETED', 'FAILED', 'PENDING', 'PENDING_RETRY', 'RUNNING');
            CREATE TYPE WORKFLOW_STEP_TYPE AS ENUM ('JOB', 'MANUAL');
            CREATE TYPE WORKFLOW_RUN_STATUS AS ENUM ('CANCELLED', 'COMPLETED', 'FAILED', 'PENDING', 'RUNNING');
            CREATE TYPE WORKFLOW_STEP_RUN_STATUS AS ENUM ('CANCELLED', 'COMPLETED', 'FAILED', 'PENDING', 'RUNNING');
        </sql>

        <createTable tableName="JOB">
            <column autoIncrement="true" name="ID" type="BIGINT">
                <constraints nullable="false" primaryKey="true" primaryKeyName="JOB_PK"/>
            </column>
            <column name="STATUS" type="JOB_STATUS">
                <constraints nullable="false"/>
            </column>
            <column name="KIND" type="text">
                <constraints nullable="false"/>
            </column>
            <column name="PRIORITY" type="SMALLINT"/>
            <column name="SCHEDULED_FOR" type="TIMESTAMPTZ">
                <constraints nullable="false"/>
            </column>
            <column name="ARGUMENTS" type="BYTEA"/>
            <column name="CREATED_AT" type="TIMESTAMPTZ">
                <constraints nullable="false"/>
            </column>
            <column name="UPDATED_AT" type="TIMESTAMPTZ"/>
            <column name="STARTED_AT" type="TIMESTAMPTZ"/>
            <column name="ATTEMPTS" type="INT"/>
            <column name="FAILURE_REASON" type="text"/>
            <column name="WORKFLOW_STEP_RUN_ID" type="BIGINT"/>
        </createTable>

        <createTable tableName="JOB_SCHEDULE">
            <column autoIncrement="true" name="ID" type="BIGINT">
                <constraints nullable="false" primaryKey="true" primaryKeyName="JOB_SCHEDULE_PK"/>
            </column>
            <column name="NAME" type="TEXT">
                <constraints nullable="false"/>
            </column>
            <column name="CRON" type="TEXT">
                <constraints nullable="false"/>
            </column>
            <column name="JOB_KIND" type="TEXT">
                <constraints nullable="false"/>
            </column>
            <column name="JOB_PRIORITY" type="INT"/>
            <column name="CREATED_AT" type="TIMESTAMPTZ">
                <constraints nullable="false"/>
            </column>
            <column name="UPDATED_AT" type="TIMESTAMPTZ"/>
            <column name="LAST_TRIGGER" type="TIMESTAMPTZ"/>
            <column name="NEXT_TRIGGER" type="TIMESTAMPTZ"/>
        </createTable>

        <createTable tableName="WORKFLOW">
            <column autoIncrement="true" name="ID" type="BIGINT">
                <constraints nullable="false" primaryKey="true" primaryKeyName="WORKFLOW_PK"/>
            </column>
            <column name="NAME" type="TEXT">
                <constraints nullable="false"/>
            </column>
            <column name="VERSION" type="INT">
                <constraints nullable="false"/>
            </column>
            <column name="CREATED_AT" type="TIMESTAMPTZ">
                <constraints nullable="false"/>
            </column>
            <column name="UPDATED_AT" type="TIMESTAMPTZ"/>
        </createTable>

        <createTable tableName="WORKFLOW_STEP">
            <column autoIncrement="true" name="ID" type="BIGINT">
                <constraints nullable="false" primaryKey="true" primaryKeyName="WORKFLOW_STEP_PK"/>
            </column>
            <column name="WORKFLOW_ID" type="BIGINT"/>
            <column name="NAME" type="TEXT">
                <constraints nullable="false"/>
            </column>
            <column name="TYPE" type="WORKFLOW_STEP_TYPE">
                <constraints nullable="false"/>
            </column>
        </createTable>

        <createTable tableName="WORKFLOW_STEP_DEPENDENCY">
            <column name="DEPENDANT_STEP_ID" type="BIGINT"/>
            <column name="DEPENDENCY_STEP_ID" type="BIGINT"/>
        </createTable>

        <createTable tableName="WORKFLOW_RUN">
            <column autoIncrement="true" name="ID" type="BIGINT">
                <constraints nullable="false" primaryKey="true" primaryKeyName="WORKFLOW_RUN_PK"/>
            </column>
            <column name="TOKEN" type="UUID">
                <constraints nullable="false"/>
            </column>
            <column name="WORKFLOW_ID" type="BIGINT"/>
            <column name="PRIORITY" type="INT"/>
            <column name="STATUS" type="WORKFLOW_RUN_STATUS">
                <constraints nullable="false"/>
            </column>
            <column name="CREATED_AT" type="TIMESTAMPTZ">
                <constraints nullable="false"/>
            </column>
            <column name="UPDATED_AT" type="TIMESTAMPTZ"/>
            <column name="STARTED_AT" type="TIMESTAMPTZ"/>
        </createTable>

        <createTable tableName="WORKFLOW_STEP_RUN">
            <column autoIncrement="true" name="ID" type="BIGINT">
                <constraints nullable="false" primaryKey="true" primaryKeyName="WORKFLOW_STEP_RUN_PK"/>
            </column>
            <column name="WORKFLOW_RUN_ID" type="BIGINT"/>
            <column name="WORKFLOW_STEP_ID" type="BIGINT"/>
            <column name="STATUS" type="WORKFLOW_STEP_RUN_STATUS">
                <constraints nullable="false"/>
            </column>
            <column name="FAILURE_REASON" type="TEXT"/>
            <column name="CREATED_AT" type="TIMESTAMPTZ">
                <constraints nullable="false"/>
            </column>
            <column name="UPDATED_AT" type="TIMESTAMPTZ"/>
            <column name="STARTED_AT" type="TIMESTAMPTZ"/>
        </createTable>

        <sql splitStatements="true" stripComments="true">
            -- Covering(!) index that serves the WHERE, as well as the ORDER BY
            -- clause of the poll query.
            CREATE INDEX "JOB_POLL_IDX" ON "JOB" (
              "PRIORITY" DESC NULLS LAST
            , "SCHEDULED_FOR"
            , "CREATED_AT"
            , "STATUS"
            , "KIND"
            ) INCLUDE ("ID") WHERE "STATUS" = ANY('{PENDING, PENDING_RETRY}'::JOB_STATUS[]);
        </sql>

        <createIndex tableName="JOB_SCHEDULE" indexName="JOB_SCHEDULE_NAME_IDX" unique="true">
            <column name="NAME"/>
        </createIndex>

        <createIndex tableName="WORKFLOW" indexName="WORKFLOW_NAME_VERSION_IDX" unique="true">
            <column name="NAME"/>
            <column name="VERSION"/>
        </createIndex>
        <createIndex tableName="WORKFLOW_STEP" indexName="WORKFLOW_RUN_WORKFLOW_ID_NAME_IDX" unique="true">
            <column name="WORKFLOW_ID"/>
            <column name="NAME"/>
        </createIndex>
        <createIndex tableName="WORKFLOW_RUN" indexName="WORKFLOW_RUN_TOKEN_IDX" unique="true">
            <column name="TOKEN"/>
        </createIndex>

        <addForeignKeyConstraint
                baseTableName="WORKFLOW_STEP"
                baseColumnNames="WORKFLOW_ID"
                constraintName="WORKFLOW_STEP_WORKFLOW_FK"
                referencedTableName="WORKFLOW"
                referencedColumnNames="ID"
                onUpdate="NO ACTION"
                onDelete="CASCADE"/>
        <addForeignKeyConstraint
                baseTableName="WORKFLOW_STEP_DEPENDENCY"
                baseColumnNames="DEPENDANT_STEP_ID"
                constraintName="WORKFLOW_STEP_DEPENDENT_STEP_FK"
                referencedTableName="WORKFLOW_STEP"
                referencedColumnNames="ID"
                onUpdate="NO ACTION"
                onDelete="CASCADE"/>
        <addForeignKeyConstraint
                baseTableName="WORKFLOW_STEP_DEPENDENCY"
                baseColumnNames="DEPENDENCY_STEP_ID"
                constraintName="WORKFLOW_STEP_DEPENDENCY_STEP_FK"
                referencedTableName="WORKFLOW_STEP"
                referencedColumnNames="ID"
                onUpdate="NO ACTION"
                onDelete="CASCADE"/>
        <addForeignKeyConstraint
                baseTableName="WORKFLOW_RUN"
                baseColumnNames="WORKFLOW_ID"
                constraintName="WORKFLOW_RUN_WORKFLOW_FK"
                referencedTableName="WORKFLOW"
                referencedColumnNames="ID"
                onUpdate="NO ACTION"
                onDelete="CASCADE"/>
        <addForeignKeyConstraint
                baseTableName="WORKFLOW_STEP_RUN"
                baseColumnNames="WORKFLOW_RUN_ID"
                constraintName="WORKFLOW_STEP_RUN_WORKFLOW_RUN_FK"
                referencedTableName="WORKFLOW_RUN"
                referencedColumnNames="ID"
                onUpdate="NO ACTION"
                onDelete="CASCADE"/>
        <addForeignKeyConstraint
                baseTableName="WORKFLOW_STEP_RUN"
                baseColumnNames="WORKFLOW_STEP_ID"
                constraintName="WORKFLOW_STEP_RUN_WORKFLOW_STEP_FK"
                referencedTableName="WORKFLOW_STEP"
                referencedColumnNames="ID"
                onUpdate="NO ACTION"
                onDelete="CASCADE"/>
    </changeSet>

    <!-- TODO: Decide if we want to keep these. For the time being, they are useful to ensure correctness. -->
    <changeSet id="v5.6.0-9" author="nscuro">
        <sql splitStatements="false">
            CREATE FUNCTION VALIDATE_JOB_STATUS_TRANSITION()
                RETURNS TRIGGER LANGUAGE PLPGSQL AS $$
            BEGIN
                IF OLD."STATUS" = NEW."STATUS" THEN
                   RETURN NEW;
                -- NB: Due to batching, PENDING -> RUNNING transitions might be skipped.
                -- Thus, we need to support PENDING -> COMPLETED/FAILED transitions as well.
                ELSIF (OLD."STATUS" = 'PENDING' AND NEW."STATUS" NOT IN ('COMPLETED', 'FAILED', 'RUNNING'))
                   OR (OLD."STATUS" = 'RUNNING' AND NEW."STATUS" NOT IN ('COMPLETED', 'FAILED', 'PENDING_RETRY'))
                   OR (OLD."STATUS" IN ('COMPLETED', 'FAILED')) THEN
                    RAISE EXCEPTION 'Invalid status transition from % to %', OLD."STATUS", NEW."STATUS";
                END IF;

                RETURN NEW;
            END;
            $$;
        </sql>
        <sql splitStatements="false" stripComments="true">
            CREATE FUNCTION VALIDATE_WORKFLOW_RUN_STATUS_TRANSITION()
                RETURNS TRIGGER LANGUAGE PLPGSQL AS $$
            BEGIN
                IF OLD."STATUS" = NEW."STATUS" THEN
                   RETURN NEW;
                -- NB: Due to batching, PENDING -> RUNNING transitions might be skipped.
                -- Thus, we need to support PENDING -> CANCELLED/COMPLETED/FAILED transitions as well.
                ELSIF (OLD."STATUS" = 'PENDING' AND NEW."STATUS" NOT IN ('CANCELLED', 'COMPLETED', 'FAILED', 'RUNNING'))
                   OR (OLD."STATUS" = 'RUNNING' AND NEW."STATUS" NOT IN ('CANCELLED', 'COMPLETED', 'FAILED'))
                   OR (OLD."STATUS" = 'CANCELLED' AND NEW."STATUS" != 'PENDING')
                   OR (OLD."STATUS" = 'FAILED' AND NEW."STATUS" != 'PENDING')
                   OR (OLD."STATUS" = 'COMPLETED') THEN
                    RAISE EXCEPTION 'Invalid status transition from % to %', OLD."STATUS", NEW."STATUS";
                END IF;

                RETURN NEW;
            END;
            $$;
        </sql>
        <sql splitStatements="true">
            CREATE TRIGGER TRIGGER_VALIDATE_JOB_STATUS_TRANSITION
                BEFORE UPDATE ON "JOB" FOR EACH ROW
                EXECUTE FUNCTION VALIDATE_JOB_STATUS_TRANSITION();

            CREATE TRIGGER TRIGGER_VALIDATE_WORKFLOW_RUN_STATUS_TRANSITION
                BEFORE UPDATE ON "WORKFLOW_RUN" FOR EACH ROW
                EXECUTE FUNCTION VALIDATE_WORKFLOW_RUN_STATUS_TRANSITION();

            CREATE TRIGGER TRIGGER_VALIDATE_WORKFLOW_STEP_RUN_STATUS_TRANSITION
                BEFORE UPDATE ON "WORKFLOW_STEP_RUN" FOR EACH ROW
                EXECUTE FUNCTION VALIDATE_WORKFLOW_RUN_STATUS_TRANSITION();
        </sql>
    </changeSet>
</databaseChangeLog>