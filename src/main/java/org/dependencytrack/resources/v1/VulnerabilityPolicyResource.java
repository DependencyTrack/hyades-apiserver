/*
 * This file is part of Dependency-Track.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * SPDX-License-Identifier: Apache-2.0
 * Copyright (c) OWASP Foundation. All Rights Reserved.
 */
package org.dependencytrack.resources.v1;

import alpine.Config;
import alpine.common.logging.Logger;
import alpine.event.framework.Event;
import alpine.persistence.PaginatedResult;
import alpine.server.auth.PermissionRequired;
import alpine.server.resources.AlpineResource;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.headers.Header;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.security.SecurityRequirements;
import io.swagger.v3.oas.annotations.tags.Tag;
import jakarta.ws.rs.GET;
import jakarta.ws.rs.POST;
import jakarta.ws.rs.Path;
import jakarta.ws.rs.Produces;
import jakarta.ws.rs.core.MediaType;
import jakarta.ws.rs.core.Response;
import org.apache.commons.lang3.exception.ExceptionUtils;
import org.dependencytrack.auth.Permissions;
import org.dependencytrack.common.ConfigKey;
import org.dependencytrack.event.VulnerabilityPolicyFetchEvent;
import org.dependencytrack.model.WorkflowState;
import org.dependencytrack.model.WorkflowStatus;
import org.dependencytrack.model.WorkflowStep;
import org.dependencytrack.persistence.QueryManager;
import org.dependencytrack.policy.vulnerability.VulnerabilityPolicy;
import org.dependencytrack.policy.vulnerability.VulnerabilityPolicyProvider;
import org.dependencytrack.policy.vulnerability.VulnerabilityPolicyProviderFactory;
import org.dependencytrack.resources.v1.openapi.PaginatedApi;
import org.postgresql.util.PSQLException;
import org.postgresql.util.PSQLState;

import java.util.Date;
import java.util.Map;
import java.util.UUID;

import static alpine.event.framework.Event.isEventBeingProcessed;

/**
 * Resource for vulnerability policies.
 */
@Path("/v1/policy/vulnerability")
@Tag(name = "policy")
@SecurityRequirements({
        @SecurityRequirement(name = "ApiKeyAuth"),
        @SecurityRequirement(name = "BearerAuth")
})
public class VulnerabilityPolicyResource extends AlpineResource {

    private static final Logger LOGGER = Logger.getLogger(VulnerabilityPolicyResource.class);

    @GET
    @Produces(MediaType.APPLICATION_JSON)
    @Operation(
            summary = "Returns a list of all vulnerability policies",
            description = "<p>Requires permission <strong>POLICY_MANAGEMENT</strong></p>"
    )
    @PaginatedApi
    @ApiResponses(value = {
            @ApiResponse(responseCode = "200", headers = @Header(name = TOTAL_COUNT_HEADER, schema = @Schema(format = "integer"), description = "The total number of vulnerability policies"),
                    content = @Content(array = @ArraySchema(schema = @Schema(implementation = VulnerabilityPolicy.class)))),
            @ApiResponse(responseCode = "401", description = "Unauthorized")
    })
    @PermissionRequired(Permissions.Constants.POLICY_MANAGEMENT)
    public Response getVulnerabilityPolicies() {
        VulnerabilityPolicyProviderFactory instance = VulnerabilityPolicyProviderFactory.getInstance();
        VulnerabilityPolicyProvider vulnerabilityPolicyProvider = instance.policyProviderImpl();
        final PaginatedResult result = vulnerabilityPolicyProvider.getAllVulnerabilityPolicies(getAlpineRequest());
        return Response.ok(result.getObjects()).header(TOTAL_COUNT_HEADER, result.getTotal()).build();
    }

    @POST
    @Path("/bundle/sync")
    @Produces(MediaType.APPLICATION_JSON)
    @Operation(
            summary = "Triggers policy bundle synchronization. Returns a workflow token if trigger succeeded.",
//            responseContainer = "Map",
            description = "<p>Requires permission <strong>POLICY_MANAGEMENT</strong></p>"
    )
    @ApiResponses(value = {
            @ApiResponse(responseCode = "200", content = @Content( schema = @Schema(type = "string"))),
            @ApiResponse(responseCode = "202", description = "Accepted"),
            @ApiResponse(responseCode = "401", description = "Unauthorized"),
            @ApiResponse(responseCode = "409", description = "Conflict")
    })
    @PermissionRequired(Permissions.Constants.POLICY_MANAGEMENT)
    public Response triggerVulnerabilityPolicyBundleSync() {
        if (!Config.getInstance().getPropertyAsBoolean(ConfigKey.VULNERABILITY_POLICY_ANALYSIS_ENABLED)) {
            return Response
                    .status(Response.Status.BAD_REQUEST)
                    .entity("The vulnerability policy feature has not been enabled by the instance administrator")
                    .build();
        }

        try (final var qm = new QueryManager()) {
            // If a workflow instance exists already, prevent concurrent modifications
            // by using "SELECT ... FOR UPDATE" to lock the record for the transaction.
            qm.getPersistenceManager().currentTransaction().setSerializeRead(true);

            final UUID token = VulnerabilityPolicyFetchEvent.CHAIN_IDENTIFIER;
            final Response response = qm.callInTransaction(() -> {
                WorkflowState workflowState = qm.getWorkflowStateByTokenAndStep(token, WorkflowStep.POLICY_BUNDLE_SYNC);
                if (workflowState != null) {
                    if (isEventBeingProcessed(token) || !workflowState.getStatus().isTerminal()) {
                        return Response
                                .status(Response.Status.CONFLICT)
                                .entity(Map.of("message", "Bundle synchronization is already in progress"))
                                .build();
                    }

                    workflowState.setStatus(WorkflowStatus.PENDING);
                    workflowState.setStartedAt(null);
                    workflowState.setUpdatedAt(new Date());
                } else {
                    workflowState = new WorkflowState();
                    workflowState.setStep(WorkflowStep.POLICY_BUNDLE_SYNC);
                    workflowState.setStatus(WorkflowStatus.PENDING);
                    workflowState.setToken(token);
                    workflowState.setUpdatedAt(new Date());
                    qm.getPersistenceManager().makePersistent(workflowState);
                }

                return Response.accepted(Map.of("token", token)).build();
            });

            LOGGER.info("Policy bundle synchronization triggered by %s".formatted(getPrincipal().getName()));
            Event.dispatch(new VulnerabilityPolicyFetchEvent());
            return response;
        } catch (RuntimeException e) {
            if (ExceptionUtils.getRootCause(e) instanceof final PSQLException pe
                    && pe.getSQLState().equals(PSQLState.UNIQUE_VIOLATION.getState())) {
                return Response
                        .status(Response.Status.CONFLICT)
                        .entity(Map.of("message", "Bundle synchronization is already in progress"))
                        .build();
            }

            LOGGER.error("Failed to trigger vulnerability policy bundle sync", e);
            return Response.status(Response.Status.INTERNAL_SERVER_ERROR).build();
        }
    }

}
