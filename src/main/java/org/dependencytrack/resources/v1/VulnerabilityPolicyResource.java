/*
 * This file is part of Dependency-Track.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * SPDX-License-Identifier: Apache-2.0
 * Copyright (c) Steve Springett. All Rights Reserved.
 */
package org.dependencytrack.resources.v1;

import alpine.persistence.PaginatedResult;
import alpine.server.auth.PermissionRequired;
import alpine.server.resources.AlpineResource;
import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
import io.swagger.annotations.ApiResponse;
import io.swagger.annotations.ApiResponses;
import io.swagger.annotations.Authorization;
import io.swagger.annotations.ResponseHeader;
import org.dependencytrack.auth.Permissions;
import org.dependencytrack.model.VulnerabilityPolicy;
import org.dependencytrack.policy.vulnerability.VulnerabilityPolicyProvider;
import org.dependencytrack.policy.vulnerability.VulnerabilityPolicyProviderFactory;

import javax.validation.Validator;
import javax.ws.rs.Consumes;
import javax.ws.rs.GET;
import javax.ws.rs.POST;
import javax.ws.rs.Path;
import javax.ws.rs.Produces;
import javax.ws.rs.core.MediaType;
import javax.ws.rs.core.Response;

/**
 * Resource for vulnerability policies.
 */
@Path("/v1/policy/vulnerability")
@Api(value = "policy", authorizations = @Authorization(value = "X-Api-Key"))
public class VulnerabilityPolicyResource extends AlpineResource {

    @GET
    @Produces(MediaType.APPLICATION_JSON)
    @ApiOperation(
            value = "Returns a list of all vulnerability policies",
            response = VulnerabilityPolicy.class,
            responseContainer = "List",
            responseHeaders = @ResponseHeader(name = TOTAL_COUNT_HEADER, response = Long.class, description = "The total number of vulnerability policies")
    )
    @ApiResponses(value = {
            @ApiResponse(code = 401, message = "Unauthorized")
    })
    @PermissionRequired(Permissions.Constants.POLICY_MANAGEMENT)
    public Response getVulnerabilityPolicies() {
        VulnerabilityPolicyProviderFactory instance = VulnerabilityPolicyProviderFactory.getInstance();
        VulnerabilityPolicyProvider vulnerabilityPolicyProvider = instance.policyProviderImpl();
        final PaginatedResult result  = vulnerabilityPolicyProvider.getAllVulnerabilityPolicies(getAlpineRequest());
        Response response = Response.ok(result.getObjects()).header(TOTAL_COUNT_HEADER, result.getTotal()).build();
        return response;
    }

    @POST
    @Consumes(MediaType.APPLICATION_JSON)
    @Produces(MediaType.APPLICATION_JSON)
    @ApiOperation(
            value = "Updates a vulnerability policy",
            response = VulnerabilityPolicy.class
    )
    @ApiResponses(value = {
            @ApiResponse(code = 401, message = "Unauthorized"),
            @ApiResponse(code = 404, message = "The vulnerability policy could not be found"),
    })
    @PermissionRequired(Permissions.Constants.POLICY_MANAGEMENT)
    public Response updateVulnerabilityPolicy(VulnerabilityPolicy vulnPolicyNew) {
        final Validator validator = super.getValidator();
        failOnValidationError(
                validator.validateProperty(vulnPolicyNew, "name")
        );
        VulnerabilityPolicyProviderFactory instance = VulnerabilityPolicyProviderFactory.getInstance();
        VulnerabilityPolicyProvider vulnerabilityPolicyProvider = instance.policyProviderImpl();
        var updatedPolicy = vulnerabilityPolicyProvider.updateVulnerabilityPolicy(vulnPolicyNew);
        if (updatedPolicy == null) {
            return Response.status(Response.Status.NOT_FOUND).entity("The vulnerability policy could not be found.").build();
        }
        return Response.ok(updatedPolicy).build();
    }
}
