package org.dependencytrack.resources.v1;

import alpine.server.auth.PermissionRequired;
import alpine.server.resources.AlpineResource;
import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
import io.swagger.annotations.ApiResponse;
import io.swagger.annotations.ApiResponses;
import io.swagger.annotations.Authorization;
import org.dependencytrack.auth.Permissions;
import org.dependencytrack.model.VulnerabilityPolicyBundle;
import org.dependencytrack.persistence.QueryManager;

import javax.ws.rs.GET;
import javax.ws.rs.Path;
import javax.ws.rs.Produces;
import javax.ws.rs.core.MediaType;
import javax.ws.rs.core.Response;

@Path("/v1/policy/vulnerability/bundle")
@Api(value = "bundle", authorizations = @Authorization(value = "X-Api-Key"))
public class VulnerabilityPolicyBundleResource extends AlpineResource {

    @GET
    @Produces(MediaType.APPLICATION_JSON)
    @ApiOperation(
            value = "Returns vulnerability policy resource bundle",
            response = VulnerabilityPolicyBundle.class
    )
    @ApiResponses(value = {
            @ApiResponse(code = 401, message = "Unauthorized")
    })
    @PermissionRequired(Permissions.Constants.POLICY_MANAGEMENT)
    public Response getVulnerabilityPolicyBundle() {
        try (QueryManager qm = new QueryManager(getAlpineRequest())) {
            final VulnerabilityPolicyBundle bundle = qm.getVulnerabilityPolicyBundle();
            return Response.ok(bundle).build();
        }
    }
}
