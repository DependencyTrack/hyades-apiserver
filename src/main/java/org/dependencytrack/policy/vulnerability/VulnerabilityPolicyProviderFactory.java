package org.dependencytrack.policy.vulnerability;

import java.util.NoSuchElementException;
import java.util.ServiceLoader;

public class VulnerabilityPolicyProviderFactory {

    private static VulnerabilityPolicyProviderFactory PROVIDER_FACTORY_INSTANCE;
    private ServiceLoader<VulnerabilityPolicyProvider> loader;

    private VulnerabilityPolicyProviderFactory() {
        loader = ServiceLoader.load(VulnerabilityPolicyProvider.class);
    }

    public static VulnerabilityPolicyProviderFactory getInstance() {
        if(PROVIDER_FACTORY_INSTANCE == null) {
            PROVIDER_FACTORY_INSTANCE = new VulnerabilityPolicyProviderFactory();
        }
        return PROVIDER_FACTORY_INSTANCE;
    }

    public VulnerabilityPolicyProvider policyProviderImpl() {
        VulnerabilityPolicyProvider provider = this.loader.iterator().next();
        if(provider != null) {
            return provider;
        } else {
            throw new NoSuchElementException("No implementation for Vulnerability Policy Provider");
        }
    }
}
