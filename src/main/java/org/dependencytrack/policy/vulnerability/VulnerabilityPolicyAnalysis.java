package org.dependencytrack.policy.vulnerability;

public class VulnerabilityPolicyAnalysis {

    public enum State {
        EXPLOITABLE,
        IN_TRIAGE,
        FALSE_POSITIVE,
        NOT_AFFECTED,
        RESOLVED
    }

    public enum Justification {
        CODE_NOT_PRESENT,
        CODE_NOT_REACHABLE,
        REQUIRES_CONFIGURATION,
        REQUIRES_DEPENDENCY,
        REQUIRES_ENVIRONMENT,
        PROTECTED_BY_COMPILER,
        PROTECTED_AT_RUNTIME,
        PROTECTED_AT_PERIMETER,
        PROTECTED_BY_MITIGATING_CONTROL,
    }

    public enum Response {
        CAN_NOT_FIX,
        WILL_NOT_FIX,
        UPDATE,
        ROLLBACK,
        WORKAROUND_AVAILABLE,
    }

    private State state;

    private Justification justification;

    private Response vendorResponse;

    private String details;

    private boolean suppress;

    public State getState() {
        return state;
    }

    public void setState(final State state) {
        this.state = state;
    }

    public Justification getJustification() {
        return justification;
    }

    public void setJustification(final Justification justification) {
        this.justification = justification;
    }

    public Response getVendorResponse() {
        return vendorResponse;
    }

    public void setVendorResponse(final Response response) {
        this.vendorResponse = response;
    }

    public String getDetails() {
        return details;
    }

    public void setDetails(final String details) {
        this.details = details;
    }

    public boolean isSuppress() {
        return suppress;
    }

    public void setSuppress(final boolean suppress) {
        this.suppress = suppress;
    }

}
