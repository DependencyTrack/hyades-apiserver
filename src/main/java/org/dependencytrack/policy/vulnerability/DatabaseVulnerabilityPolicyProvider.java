package org.dependencytrack.policy.vulnerability;

import alpine.persistence.PaginatedResult;
import alpine.resources.AlpineRequest;
import org.dependencytrack.persistence.QueryManager;
import org.dependencytrack.proto.policy.v1.Project;

import java.time.ZoneOffset;
import java.time.ZonedDateTime;
import java.util.Arrays;
import java.util.List;

public class DatabaseVulnerabilityPolicyProvider implements VulnerabilityPolicyProvider {

    @Override
    public List<VulnerabilityPolicy> getApplicablePolicies(final Project project) {
        try (final var qm = new QueryManager()) {
            return qm.getAllValidVulnerabilityPolicies().stream()
                    .map(DatabaseVulnerabilityPolicyProvider::convert)
                    .toList();
        }
    }

    @Override
    public PaginatedResult getAllVulnerabilityPolicies(AlpineRequest request) {
        try (final var qm = new QueryManager(request)) {
            PaginatedResult result = qm.getAllVulnerabilityPolicies(request.getFilter(), null, null);
            List<org.dependencytrack.model.VulnerabilityPolicy> vulnerabilityPolicies = result.getList(org.dependencytrack.model.VulnerabilityPolicy.class);
            List<VulnerabilityPolicy> mappedPolicies = vulnerabilityPolicies.stream().map(DatabaseVulnerabilityPolicyProvider::convert).toList();
            result.setObjects(mappedPolicies);
            return result;
        }
    }

    private static VulnerabilityPolicy convert(final org.dependencytrack.model.VulnerabilityPolicy dbPolicy) {
        final var policy = new VulnerabilityPolicy();
        policy.setName(dbPolicy.getName());
        policy.setDescription(dbPolicy.getDescription());
        policy.setAuthor(dbPolicy.getAuthor());
        if (dbPolicy.getCreated() != null) {
            policy.setCreated(ZonedDateTime.ofInstant(dbPolicy.getCreated().toInstant(), ZoneOffset.UTC));
        }
        if (dbPolicy.getUpdated() != null) {
            policy.setUpdated(ZonedDateTime.ofInstant(dbPolicy.getUpdated().toInstant(), ZoneOffset.UTC));
        }
        if (dbPolicy.getValidFrom() != null) {
            policy.setValidFrom(ZonedDateTime.ofInstant(dbPolicy.getValidFrom().toInstant(), ZoneOffset.UTC));
        }
        if (dbPolicy.getValidUntil() != null) {
            policy.setValidUntil(ZonedDateTime.ofInstant(dbPolicy.getValidUntil().toInstant(), ZoneOffset.UTC));
        }
        policy.setConditions(Arrays.asList(dbPolicy.getConditions()));
        policy.setAnalysis(dbPolicy.getAnalysis());
        policy.setRatings(dbPolicy.getRatings());
        return policy;
    }

}
