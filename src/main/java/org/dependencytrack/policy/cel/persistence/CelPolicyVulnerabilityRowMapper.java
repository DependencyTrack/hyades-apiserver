package org.dependencytrack.policy.cel.persistence;

import com.fasterxml.jackson.core.type.TypeReference;
import com.google.protobuf.util.Timestamps;
import org.dependencytrack.model.Severity;
import org.dependencytrack.model.VulnerabilityAlias;
import org.dependencytrack.persistence.CollectionIntegerConverter;
import org.dependencytrack.proto.policy.v1.Vulnerability;
import org.dependencytrack.util.VulnerabilityUtil;
import org.jdbi.v3.core.mapper.RowMapper;
import org.jdbi.v3.core.statement.StatementContext;

import java.io.IOException;
import java.math.BigDecimal;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.Date;
import java.util.List;
import java.util.function.Consumer;

import static org.dependencytrack.policy.cel.persistence.CelPolicyRowMapperUtil.OBJECT_MAPPER;
import static org.dependencytrack.policy.cel.persistence.CelPolicyRowMapperUtil.hasColumn;
import static org.dependencytrack.policy.cel.persistence.CelPolicyRowMapperUtil.maybeSet;

public class CelPolicyVulnerabilityRowMapper implements RowMapper<Vulnerability> {

    private final Vulnerability.Builder builder;

    @SuppressWarnings("unused") // Used by JDBI
    public CelPolicyVulnerabilityRowMapper() {
        this(Vulnerability.newBuilder());
    }

    public CelPolicyVulnerabilityRowMapper(final Vulnerability.Builder builder) {
        this.builder = builder;
    }

    @Override
    public Vulnerability map(final ResultSet rs, final StatementContext ctx) throws SQLException {
        maybeSet(rs, "uuid", rs::getString, builder::setUuid);
        maybeSet(rs, "id", rs::getString, builder::setId);
        maybeSet(rs, "source", rs::getString, builder::setSource);
        maybeSetAliases(rs, builder::addAllAliases);
        maybeSetCwes(rs, builder::addAllCwes);
        maybeSet(rs, "created", columnName -> {
            final Date lastBomImport = rs.getTimestamp(columnName);
            return lastBomImport != null ? Timestamps.fromDate(lastBomImport) : null;
        }, builder::setCreated);
        maybeSet(rs, "published", columnName -> {
            final Date lastBomImport = rs.getTimestamp(columnName);
            return lastBomImport != null ? Timestamps.fromDate(lastBomImport) : null;
        }, builder::setPublished);
        maybeSet(rs, "updated", columnName -> {
            final Date lastBomImport = rs.getTimestamp(columnName);
            return lastBomImport != null ? Timestamps.fromDate(lastBomImport) : null;
        }, builder::setUpdated);
        maybeSet(rs, "severity", rs::getString, builder::setSeverity);
        maybeSet(rs, "cvssv2_base_score", rs::getDouble, builder::setCvssv2BaseScore);
        maybeSet(rs, "cvssv2_impact_subscore", rs::getDouble, builder::setCvssv2ImpactSubscore);
        maybeSet(rs, "cvssv2_exploitability_subscore", rs::getDouble, builder::setCvssv2ExploitabilitySubscore);
        maybeSet(rs, "cvssv2_vector", rs::getString, builder::setCvssv2Vector);
        maybeSet(rs, "cvssv3_base_score", rs::getDouble, builder::setCvssv3BaseScore);
        maybeSet(rs, "cvssv3_impact_subscore", rs::getDouble, builder::setCvssv3ImpactSubscore);
        maybeSet(rs, "cvssv3_exploitability_subscore", rs::getDouble, builder::setCvssv3ExploitabilitySubscore);
        maybeSet(rs, "cvssv3_vector", rs::getString, builder::setCvssv3Vector);
        maybeSet(rs, "owasp_rr_likelihood_score", rs::getDouble, builder::setOwaspRrLikelihoodScore);
        maybeSet(rs, "owasp_rr_technical_impact_score", rs::getDouble, builder::setOwaspRrTechnicalImpactScore);
        maybeSet(rs, "owasp_rr_business_impact_score", rs::getDouble, builder::setOwaspRrBusinessImpactScore);
        maybeSet(rs, "owasp_rr_vector", rs::getString, builder::setOwaspRrVector);
        maybeSet(rs, "epss_score", rs::getDouble, builder::setEpssScore);
        maybeSet(rs, "epss_percentile", rs::getDouble, builder::setEpssPercentile);

        // Workaround for https://github.com/DependencyTrack/dependency-track/issues/2474.
        if (builder.getSeverity().isBlank() && hasAnyRiskScore(builder)) {
            final Severity severity = VulnerabilityUtil.getSeverity(null,
                    builder.hasCvssv2BaseScore() ? BigDecimal.valueOf(builder.getCvssv2BaseScore()) : null,
                    builder.hasCvssv3BaseScore() ? BigDecimal.valueOf(builder.getCvssv3BaseScore()) : null,
                    builder.hasOwaspRrLikelihoodScore() ? BigDecimal.valueOf(builder.getOwaspRrLikelihoodScore()) : null,
                    builder.hasOwaspRrTechnicalImpactScore() ? BigDecimal.valueOf(builder.getOwaspRrTechnicalImpactScore()) : null,
                    builder.hasOwaspRrBusinessImpactScore() ? BigDecimal.valueOf(builder.getOwaspRrBusinessImpactScore()) : null
            );
            builder.setSeverity(severity.name());
        }

        return builder.build();
    }

    private void maybeSetAliases(final ResultSet rs, final Consumer<Iterable<Vulnerability.Alias>> setter) throws SQLException {
        if (!hasColumn(rs, "aliases")) {
            return;
        }

        final String aliasesJson = rs.getString("aliases");
        if (aliasesJson == null) {
            return;
        }

        try {
            final List<Vulnerability.Alias> aliases = OBJECT_MAPPER.readValue(aliasesJson, new TypeReference<List<VulnerabilityAlias>>() {
                    }).stream()
                    .flatMap(alias -> alias.getAllBySource().entrySet().stream()
                            .map(aliasEntry -> Vulnerability.Alias.newBuilder()
                                    .setSource(aliasEntry.getKey().name())
                                    .setId(aliasEntry.getValue())
                                    .build()))
                    .distinct()
                    .toList();
            setter.accept(aliases);
        } catch (IOException e) {
            throw new RuntimeException(e);
        }
    }

    private void maybeSetCwes(final ResultSet rs, final Consumer<Iterable<Integer>> setter) throws SQLException {
        if (!hasColumn(rs, "cwes")) {
            return;
        }

        setter.accept(new CollectionIntegerConverter().convertToAttribute(rs.getString("cwes")));
    }

    private boolean hasAnyRiskScore(final Vulnerability.Builder builder) {
        return builder.hasCvssv2BaseScore()
                || builder.hasCvssv3BaseScore()
                || (builder.hasOwaspRrBusinessImpactScore() && builder.hasOwaspRrTechnicalImpactScore() && builder.hasOwaspRrLikelihoodScore());
    }

}
