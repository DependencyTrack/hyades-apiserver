package org.dependencytrack.policy.cel.persistence;

import com.fasterxml.jackson.core.type.TypeReference;
import org.dependencytrack.model.Severity;
import org.dependencytrack.model.VulnerabilityAlias;
import org.dependencytrack.persistence.jdbi.mapping.RowMapperUtil;
import org.dependencytrack.proto.policy.v1.Vulnerability;
import org.dependencytrack.util.VulnerabilityUtil;
import org.jdbi.v3.core.mapper.RowMapper;
import org.jdbi.v3.core.statement.StatementContext;

import java.math.BigDecimal;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.Collections;
import java.util.List;

import static org.dependencytrack.persistence.jdbi.mapping.RowMapperUtil.deserializeJson;
import static org.dependencytrack.persistence.jdbi.mapping.RowMapperUtil.maybeSet;
import static org.dependencytrack.persistence.jdbi.mapping.RowMapperUtil.stringArray;

public class CelPolicyVulnerabilityRowMapper implements RowMapper<Vulnerability> {

    private static final TypeReference<List<VulnerabilityAlias>> VULNERABILITY_ALIASES_TYPE_REF = new TypeReference<>() {
    };

    @Override
    public Vulnerability map(final ResultSet rs, final StatementContext ctx) throws SQLException {
        final Vulnerability.Builder builder = Vulnerability.newBuilder();
        maybeSet(rs, "uuid", ResultSet::getString, builder::setUuid);
        maybeSet(rs, "id", ResultSet::getString, builder::setId);
        maybeSet(rs, "source", ResultSet::getString, builder::setSource);
        maybeSet(rs, "created", RowMapperUtil::nullableTimestamp, builder::setCreated);
        maybeSet(rs, "published", RowMapperUtil::nullableTimestamp, builder::setPublished);
        maybeSet(rs, "updated", RowMapperUtil::nullableTimestamp, builder::setUpdated);
        maybeSet(rs, "severity", ResultSet::getString, builder::setSeverity);
        maybeSet(rs, "cvssv2_base_score", RowMapperUtil::nullableDouble, builder::setCvssv2BaseScore);
        maybeSet(rs, "cvssv2_impact_subscore", RowMapperUtil::nullableDouble, builder::setCvssv2ImpactSubscore);
        maybeSet(rs, "cvssv2_exploitability_subscore", RowMapperUtil::nullableDouble, builder::setCvssv2ExploitabilitySubscore);
        maybeSet(rs, "cvssv2_vector", ResultSet::getString, builder::setCvssv2Vector);
        maybeSet(rs, "cvssv3_base_score", RowMapperUtil::nullableDouble, builder::setCvssv3BaseScore);
        maybeSet(rs, "cvssv3_impact_subscore", RowMapperUtil::nullableDouble, builder::setCvssv3ImpactSubscore);
        maybeSet(rs, "cvssv3_exploitability_subscore", RowMapperUtil::nullableDouble, builder::setCvssv3ExploitabilitySubscore);
        maybeSet(rs, "cvssv3_vector", ResultSet::getString, builder::setCvssv3Vector);
        maybeSet(rs, "owasp_rr_likelihood_score", RowMapperUtil::nullableDouble, builder::setOwaspRrLikelihoodScore);
        maybeSet(rs, "owasp_rr_technical_impact_score", RowMapperUtil::nullableDouble, builder::setOwaspRrTechnicalImpactScore);
        maybeSet(rs, "owasp_rr_business_impact_score", RowMapperUtil::nullableDouble, builder::setOwaspRrBusinessImpactScore);
        maybeSet(rs, "owasp_rr_vector", ResultSet::getString, builder::setOwaspRrVector);
        maybeSet(rs, "epss_score", RowMapperUtil::nullableDouble, builder::setEpssScore);
        maybeSet(rs, "epss_percentile", RowMapperUtil::nullableDouble, builder::setEpssPercentile);
        maybeSet(rs, "cwes", CelPolicyVulnerabilityRowMapper::maybeConvertCwes, builder::addAllCwes);
        maybeSet(rs, "aliases", CelPolicyVulnerabilityRowMapper::maybeConvertAliases, builder::addAllAliases);

        // Workaround for https://github.com/DependencyTrack/dependency-track/issues/2474.
        if (builder.getSeverity().isBlank() && hasAnyRiskScore(builder)) {
            final Severity severity = VulnerabilityUtil.getSeverity(null,
                    builder.hasCvssv2BaseScore() ? BigDecimal.valueOf(builder.getCvssv2BaseScore()) : null,
                    builder.hasCvssv3BaseScore() ? BigDecimal.valueOf(builder.getCvssv3BaseScore()) : null,
                    builder.hasOwaspRrLikelihoodScore() ? BigDecimal.valueOf(builder.getOwaspRrLikelihoodScore()) : null,
                    builder.hasOwaspRrTechnicalImpactScore() ? BigDecimal.valueOf(builder.getOwaspRrTechnicalImpactScore()) : null,
                    builder.hasOwaspRrBusinessImpactScore() ? BigDecimal.valueOf(builder.getOwaspRrBusinessImpactScore()) : null
            );
            builder.setSeverity(severity.name());
        }

        return builder.build();
    }

    private static List<Integer> maybeConvertCwes(final ResultSet rs, final String columnName) throws SQLException {
        return stringArray(rs, columnName).stream()
                .map(Integer::parseInt)
                .toList();
    }

    private static List<Vulnerability.Alias> maybeConvertAliases(final ResultSet rs, final String columnName) throws SQLException {
        final List<VulnerabilityAlias> aliases = deserializeJson(rs, columnName, VULNERABILITY_ALIASES_TYPE_REF);
        if (aliases == null) {
            return Collections.emptyList();
        }

        return aliases.stream()
                .flatMap(alias -> alias.getAllBySource().entrySet().stream()
                        .map(aliasEntry -> Vulnerability.Alias.newBuilder()
                                .setSource(aliasEntry.getKey().name())
                                .setId(aliasEntry.getValue())
                                .build()))
                .distinct()
                .toList();
    }

    private boolean hasAnyRiskScore(final Vulnerability.Builder builder) {
        return builder.hasCvssv2BaseScore()
               || builder.hasCvssv3BaseScore()
               || (builder.hasOwaspRrBusinessImpactScore() && builder.hasOwaspRrTechnicalImpactScore() && builder.hasOwaspRrLikelihoodScore());
    }

}
