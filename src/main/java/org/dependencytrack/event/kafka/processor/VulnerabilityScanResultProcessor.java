package org.dependencytrack.event.kafka.processor;

import org.apache.kafka.clients.consumer.ConsumerRecord;
import org.dependencytrack.event.kafka.processor.api.SingleRecordProcessor;
import org.dependencytrack.event.kafka.processor.exception.RecordProcessingException;
import org.dependencytrack.proto.vulnanalysis.v1.ScanKey;
import org.dependencytrack.proto.vulnanalysis.v1.ScanResult;

/**
 * TODO: This should produce ProducerRecord<String, ProcessedScanResult>, where ProcessedScanResult
 *   is a "summary" of the processed result that can be used to update the "VULNERABILITYSCAN" table.
 *   The String should be the scan token, so we can avoid concurrent writes to the same "VULNERABILITYSCAN"
 *   row when processing the respective records.
 */
public class VulnerabilityScanResultProcessor implements SingleRecordProcessor<ScanKey, ScanResult> {

    @Override
    public void process(final ConsumerRecord<ScanKey, ScanResult> record) throws RecordProcessingException {
        // TODO
    }

}
