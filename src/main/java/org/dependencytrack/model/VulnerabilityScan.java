package org.dependencytrack.model;

import javax.jdo.annotations.Column;
import javax.jdo.annotations.IdGeneratorStrategy;
import javax.jdo.annotations.PersistenceCapable;
import javax.jdo.annotations.Persistent;
import javax.jdo.annotations.PrimaryKey;
import javax.jdo.annotations.Unique;
import javax.jdo.annotations.Version;
import javax.jdo.annotations.VersionStrategy;
import java.util.Date;
import java.util.UUID;

@PersistenceCapable(detachable = "true")
@Version(strategy = VersionStrategy.VERSION_NUMBER, column = "VERSION")
public class VulnerabilityScan {

    public enum Status {
        UNKNOWN,
        IN_PROGRESS,
        COMPLETED,
        FAILED
    }

    public enum TargetType {
        COMPONENT,
        PROJECT
    }

    @PrimaryKey
    @Persistent(valueStrategy = IdGeneratorStrategy.NATIVE)
    private long id;

    /**
     * The token that uniquely identifies this scan for clients.
     */
    @Persistent
    @Unique(name = "VULNERABILITY_SCAN_TOKEN_IDX")
    @Column(name = "TOKEN", allowsNull = "false")
    private String token;

    /**
     * The type of the entity targeted by this scan.
     */
    @Persistent
    @Column(name = "TARGET_TYPE", jdbcType = "VARCHAR", allowsNull = "false")
    private TargetType targetType;

    /**
     * Unique identifier of the entity targeted by this scan.
     */
    @Persistent
    @Column(name = "TARGET_IDENTIFIER", allowsNull = "false")
    private UUID targetIdentifier;

    /**
     * The overall status of this scan.
     */
    @Persistent
    @Column(name = "STATUS", jdbcType = "VARCHAR", allowsNull = "false")
    private Status status;

    /**
     * The number of expected {
     *
     * @link ScanStatus#SCAN_STATUS_COMPLETE} events for this scan.
     */
    @Persistent
    @Column(name = "EXPECTED_RESULTS")
    private int expectedResults;

    /**
     * The number of received {
     *
     * @link ScanStatus#SCAN_STATUS_COMPLETE} events for this scan.
     */
    @Persistent
    @Column(name = "RECEIVED_RESULTS")
    private int receivedResults;

    /**
     * The threshold percentage value of failure for this scan.
     */
    @Persistent
    @Column(name = "FAILURE_THRESHOLD", allowsNull = "true")
    private double failureThreshold;

    @Persistent
    @Column(name = "SCAN_FAILED", allowsNull = "true")
    private long scanFailed;

    @Persistent
    @Column(name = "SCAN_TOTAL", allowsNull = "true")
    private long scanTotal;

    /**
     * The time at which the scan was started.
     */
    @Persistent
    @Column(name = "STARTED_AT", allowsNull = "false")
    private Date startedAt;

    /**
     * The time at which the scan status was updated.
     */
    @Persistent
    @Column(name = "UPDATED_AT", allowsNull = "false")
    private Date updatedAt;

    private transient String failureReason;

    public long getId() {
        return id;
    }

    public void setId(final long id) {
        this.id = id;
    }

    public String getToken() {
        return token;
    }

    public void setToken(final String token) {
        this.token = token;
    }

    public TargetType getTargetType() {
        return targetType;
    }

    public void setTargetType(final TargetType targetType) {
        this.targetType = targetType;
    }

    public UUID getTargetIdentifier() {
        return targetIdentifier;
    }

    public void setTargetIdentifier(final UUID targetIdentifier) {
        this.targetIdentifier = targetIdentifier;
    }

    public Status getStatus() {
        return status;
    }

    public void setStatus(final Status status) {
        this.status = status;
    }

    public int getExpectedResults() {
        return expectedResults;
    }

    public void setExpectedResults(final int expectedResults) {
        this.expectedResults = expectedResults;
    }

    public int getReceivedResults() {
        return receivedResults;
    }

    public void setReceivedResults(final int receivedResults) {
        this.receivedResults = receivedResults;
    }

    public Date getStartedAt() {
        return startedAt;
    }

    public void setStartedAt(final Date startedAt) {
        this.startedAt = startedAt;
    }

    public Date getUpdatedAt() {
        return updatedAt;
    }

    public void setUpdatedAt(final Date updatedAt) {
        this.updatedAt = updatedAt;
    }

    public double getFailureThreshold() {
        return failureThreshold;
    }

    public void setFailureThreshold(double failureThreshold) {
        this.failureThreshold = failureThreshold;
    }

    public long getScanTotal() {
        return scanTotal;
    }

    public void setScanTotal(long scanTotal) {
        this.scanTotal = scanTotal;
    }

    public long getScanFailed() {
        return scanFailed;
    }

    public void setScanFailed(long scanFailed) {
        this.scanFailed = scanFailed;
    }

    public String getFailureReason() {
        return failureReason;
    }

    public void setFailureReason(String failureReason) {
        this.failureReason = failureReason;
    }

}
