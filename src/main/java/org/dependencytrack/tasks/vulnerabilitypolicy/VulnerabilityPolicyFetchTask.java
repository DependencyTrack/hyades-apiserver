package org.dependencytrack.tasks.vulnerabilitypolicy;

import alpine.Config;
import alpine.common.logging.Logger;
import alpine.event.framework.Event;
import alpine.event.framework.Subscriber;
import net.javacrumbs.shedlock.core.LockingTaskExecutor.Task;
import org.dependencytrack.common.ConfigKey;
import org.dependencytrack.event.VulnerabilityPolicyFetchEvent;
import org.dependencytrack.tasks.vulnerabilitypolicy.blobstorage.BlobStorageAccessFactory;
import org.dependencytrack.tasks.vulnerabilitypolicy.blobstorage.BlobStorageAccessHandler;
import org.dependencytrack.util.VulnerabilityPolicyUtil;

import javax.naming.OperationNotSupportedException;
import java.util.zip.ZipInputStream;

import static org.dependencytrack.tasks.LockName.VULNERABILITY_POLICY_BUNDLE_FETCH_TASK_LOCK;
import static org.dependencytrack.util.LockProvider.executeWithLock;

public class VulnerabilityPolicyFetchTask implements Subscriber {
    private static final Logger LOGGER = Logger.getLogger(VulnerabilityPolicyFetchTask.class);
    private final BlobStorageAccessHandler handler;

    public VulnerabilityPolicyFetchTask() throws OperationNotSupportedException {
        handler = BlobStorageAccessFactory.createStorageHandler();
    }

    VulnerabilityPolicyFetchTask(BlobStorageAccessHandler handler) {
        this.handler = handler;
    }

    @Override
    public void inform(Event event) {
        if (!(event instanceof VulnerabilityPolicyFetchEvent)) {
            return;
        }
        if (!Config.getInstance().getPropertyAsBoolean(ConfigKey.VULNERABILITY_POLICY_ANALYSIS_ENABLED)) {
            LOGGER.debug("Currently vulnerability policy analysis is not enabled");
            return;
        }

        try {
            executeWithLock(VULNERABILITY_POLICY_BUNDLE_FETCH_TASK_LOCK, (Task) () -> {
                // perform head request on file server to see if the hash of file has changed from previous fetch
                if (handler.verifyDownloadNeeded()) {
                    LOGGER.info("It has been verified that file download would be needed from bundle source");
                    //if hash has changed, get the new zip file and unzip it to get the policy file
                    ZipInputStream inputStream = handler.downloadZippedContent();
                    LOGGER.info("Parsing downloaded policies for saving/ updating");
                    VulnerabilityPolicyUtil.parseAndSavePolicies(inputStream);
                    inputStream.close();
                    LOGGER.info("Policies saved to database successfully");
                } else {
                    LOGGER.info("The zipped file content has not changed since last check. Will check in the next iteration");
                }
            });
        } catch (Throwable ex) {
            LOGGER.error("An error occurred while verifying changes in policy file or downloading policy file itself", ex);
        }
    }
}
