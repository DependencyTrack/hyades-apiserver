package org.dependencytrack.tasks.vulnerabilitypolicy;

import alpine.Config;
import alpine.common.logging.Logger;
import alpine.event.framework.Event;
import alpine.event.framework.Subscriber;
import org.dependencytrack.common.ConfigKey;
import org.dependencytrack.event.VulnerabilityPolicyFetchEvent;
import org.projectnessie.cel.tools.ScriptCreateException;
import org.projectnessie.cel.tools.ScriptCreateException;

import java.io.IOException;

public class VulnerabilityPolicyFetchTask implements Subscriber {
    private static final Logger LOGGER = Logger.getLogger(VulnerabilityPolicyFetchTask.class);
    private BlobStorageAccessHandler handler;

    public VulnerabilityPolicyFetchTask(){
        handler = BlobStorageAccessFactory.createStorageHandler();
    }

    VulnerabilityPolicyFetchTask(BlobStorageAccessHandler handler){
        this.handler = handler;
    }

    @Override
    public void inform(Event event) {
        if (event instanceof VulnerabilityPolicyFetchEvent) {
            if (!Config.getInstance().getPropertyAsBoolean(ConfigKey.VULNERABILITY_POLICY_ANALYSIS_ENABLED)) {
                LOGGER.debug("Currently vulnerability policy analysis is not enabled");
            } else {
                try {
                    // perform head request on file server to see if the hash of file has changed from previous fetch
                    if (handler.verifyDownloadNeeded()) {
                        //if hash has changed, get the new zip file and unzip it to get the policy file
                        handler.downloadAndparseZippedContent();
                    } else {
                        LOGGER.debug("The zipped file content has not changed since last check. Will check in the next iteration");
                    }
                } catch (IOException | ScriptCreateException ex) {
                    LOGGER.error("An error occurred while verifying changes in policy file or downloading policy file itself", ex);
                }
            }
        }
    }
}
