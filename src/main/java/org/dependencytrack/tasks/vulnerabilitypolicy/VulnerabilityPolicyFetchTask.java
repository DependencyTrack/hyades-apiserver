package org.dependencytrack.tasks.vulnerabilitypolicy;

import alpine.Config;
import alpine.common.logging.Logger;
import alpine.event.framework.Event;
import alpine.event.framework.Subscriber;
import net.javacrumbs.shedlock.core.LockingTaskExecutor.Task;
import org.dependencytrack.common.ConfigKey;
import org.dependencytrack.event.VulnerabilityPolicyFetchEvent;
import org.dependencytrack.model.WorkflowState;
import org.dependencytrack.persistence.QueryManager;
import org.dependencytrack.tasks.vulnerabilitypolicy.blobstorage.BlobStorageAccessFactory;
import org.dependencytrack.tasks.vulnerabilitypolicy.blobstorage.BlobStorageAccessHandler;
import org.dependencytrack.util.VulnerabilityPolicyUtil;

import javax.naming.OperationNotSupportedException;
import java.io.IOException;
import java.util.Date;
import java.util.zip.ZipInputStream;

import static org.dependencytrack.event.VulnerabilityPolicyFetchEvent.CHAIN_IDENTIFIER;
import static org.dependencytrack.model.WorkflowStatus.PENDING;
import static org.dependencytrack.model.WorkflowStep.POLICY_BUNDLE_SYNC;
import static org.dependencytrack.tasks.LockName.VULNERABILITY_POLICY_BUNDLE_FETCH_TASK_LOCK;
import static org.dependencytrack.util.LockProvider.executeWithLock;

public class VulnerabilityPolicyFetchTask implements Subscriber {

    private static final Logger LOGGER = Logger.getLogger(VulnerabilityPolicyFetchTask.class);
    private final BlobStorageAccessHandler handler;

    public VulnerabilityPolicyFetchTask() throws OperationNotSupportedException {
        handler = BlobStorageAccessFactory.createStorageHandler();
    }

    VulnerabilityPolicyFetchTask(BlobStorageAccessHandler handler) {
        this.handler = handler;
    }

    @Override
    public void inform(Event event) {
        if (!(event instanceof VulnerabilityPolicyFetchEvent)) {
            return;
        }
        if (!Config.getInstance().getPropertyAsBoolean(ConfigKey.VULNERABILITY_POLICY_ANALYSIS_ENABLED)) {
            LOGGER.debug("Currently vulnerability policy analysis is not enabled");
            return;
        }

        try (final var qm = new QueryManager()) {
            executeWithLock(VULNERABILITY_POLICY_BUNDLE_FETCH_TASK_LOCK, (Task) () -> syncPolicyBundle(qm));
        } catch (Throwable ex) {
            LOGGER.error("An error occurred while verifying changes in policy file or downloading policy file itself", ex);
        }
    }

    private void syncPolicyBundle(final QueryManager qm) throws IOException {
        WorkflowState workflowState = qm.updateStartTimeIfWorkflowStateExists(CHAIN_IDENTIFIER, POLICY_BUNDLE_SYNC);
        if (workflowState == null) {
            final var now = new Date();
            workflowState = new WorkflowState();
            workflowState.setStep(POLICY_BUNDLE_SYNC);
            workflowState.setStatus(PENDING);
            workflowState.setToken(CHAIN_IDENTIFIER);
            workflowState.setStartedAt(now);
            workflowState.setUpdatedAt(now);
            qm.getPersistenceManager().makePersistent(workflowState);
        }

        try {
            // perform head request on file server to see if the hash of file has changed from previous fetch
            if (handler.verifyDownloadNeeded()) {
                LOGGER.info("It has been verified that file download would be needed from bundle source");
                //if hash has changed, get the new zip file and unzip it to get the policy file
                try (ZipInputStream inputStream = handler.downloadZippedContent()) {
                    LOGGER.info("Parsing downloaded policies for saving/ updating");
                    VulnerabilityPolicyUtil.parseAndSavePolicies(inputStream);
                    inputStream.close();
                    LOGGER.info("Policies saved to database successfully");
                }
            } else {
                LOGGER.info("The zipped file content has not changed since last check. Will check in the next iteration");
            }

            qm.updateWorkflowStateToComplete(workflowState);
        } catch (RuntimeException e) {
            qm.updateWorkflowStateToFailed(workflowState, e.getMessage());
            throw e;
        }
    }

}
