package org.dependencytrack.tasks.vulnerabilitypolicy;

import io.minio.BucketExistsArgs;
import io.minio.GetObjectArgs;
import io.minio.MinioClient;
import io.minio.StatObjectArgs;
import io.minio.StatObjectResponse;
import io.minio.errors.ErrorResponseException;
import io.minio.errors.InsufficientDataException;
import io.minio.errors.InternalException;
import io.minio.errors.InvalidResponseException;
import io.minio.errors.ServerException;
import io.minio.errors.XmlParserException;

import java.io.IOException;
import java.io.InputStream;
import java.security.InvalidKeyException;
import java.security.NoSuchAlgorithmException;

public class S3Client {
    private final String bundleToFetch;
    private final String s3AccessKey;
    private final String s3SecretKey;
    private final String s3BucketName;
    private MinioClient minioClient;

    private final String bundleFetchEndpoint;

    private final String region;

    public String getBundleToFetch() {
        return bundleToFetch;
    }

    public String getS3BucketName() {
        return s3BucketName;
    }

    public S3Client(String bundleFetchEndpoint, String bundleToFetch, String s3AccessKey, String s3SecretKey, String s3BucketName, String region) {
        this.bundleFetchEndpoint = bundleFetchEndpoint;
        this.bundleToFetch = bundleToFetch;
        this.s3AccessKey = s3AccessKey;
        this.s3SecretKey = s3SecretKey;
        this.s3BucketName = s3BucketName;
        this.region = region;
        if (bundleToFetch == null || s3BucketName == null || s3SecretKey == null || s3AccessKey == null) {
            throw new IllegalArgumentException("The required parameters for S3 file access have not been provided. Please check");
        }
    }

    private void createClient() {
        MinioClient.Builder builder = MinioClient.builder().endpoint(bundleFetchEndpoint)
                .credentials(s3AccessKey, s3SecretKey);
        if (this.region != null && !region.trim().equals("")) {
            builder.region(region);
        }
        this.minioClient = builder.build();
    }

    public MinioClient getMinioClient() {
        if (this.minioClient == null) {
            createClient();
        }
        return minioClient;
    }

    public boolean doesBucketExist() throws IOException{
        try {
            return getMinioClient().bucketExists(BucketExistsArgs.builder().bucket(s3BucketName).build());
        }catch (ServerException | InsufficientDataException |ErrorResponseException | NoSuchAlgorithmException |
                InvalidKeyException | InvalidResponseException | XmlParserException  | InternalException e){
            throw new IOException("An exception occurred while verify if bucket exists", e);
        }
    }

    public String getObjectEtag() throws IOException{
        try {
            StatObjectResponse response = getMinioClient().statObject(StatObjectArgs.builder().
                    bucket(s3BucketName).object(bundleToFetch).build());
            return response.etag();
        }catch (ServerException | InsufficientDataException | ErrorResponseException | NoSuchAlgorithmException |
                InvalidKeyException | InvalidResponseException | XmlParserException | InternalException e){
            throw new IOException("An exception occurred while fetching object etag", e);
        }
    }

    public InputStream getObject() throws IOException{
        try {
            return getMinioClient().getObject(GetObjectArgs.builder().bucket(s3BucketName).object(bundleToFetch).build());
        }catch (ServerException | InsufficientDataException | ErrorResponseException | NoSuchAlgorithmException |
                InvalidKeyException | InvalidResponseException | XmlParserException | InternalException e){
            throw new IOException("An exception occurred while fetching zip file from s3", e);
        }
    }

}
