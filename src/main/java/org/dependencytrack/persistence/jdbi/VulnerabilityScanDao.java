/*
 * This file is part of Dependency-Track.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * SPDX-License-Identifier: Apache-2.0
 * Copyright (c) OWASP Foundation. All Rights Reserved.
 */
package org.dependencytrack.persistence.jdbi;

import org.dependencytrack.model.VulnerabilityScan;
import org.jdbi.v3.sqlobject.SqlObject;
import org.jdbi.v3.sqlobject.config.RegisterBeanMapper;
import org.jdbi.v3.sqlobject.customizer.Bind;
import org.jdbi.v3.sqlobject.statement.GetGeneratedKeys;
import org.jdbi.v3.sqlobject.statement.SqlBatch;
import org.jdbi.v3.sqlobject.statement.SqlUpdate;

import java.time.Duration;
import java.util.List;
import java.util.UUID;

public interface VulnerabilityScanDao extends SqlObject {

    @SqlBatch("""
                UPDATE "VULNERABILITYSCAN"
                  SET "RECEIVED_RESULTS" = "RECEIVED_RESULTS" + :resultsTotal
                    , "SCAN_TOTAL" = "SCAN_TOTAL" + :scannerResultsTotal
                    , "SCAN_FAILED" = "SCAN_FAILED" + :scannerResultsFailed
                    , "STATUS" = CASE WHEN "EXPECTED_RESULTS" = ("RECEIVED_RESULTS" + :resultsTotal)
                                      THEN CASE WHEN (CAST("SCAN_FAILED" + :scannerResultsFailed AS DOUBLE PRECISION) / NULLIF("SCAN_TOTAL" + :scannerResultsTotal, 0)) > "FAILURE_THRESHOLD"
                                                THEN 'FAILED'
                                                ELSE 'COMPLETED'
                                           END
                                      ELSE 'IN_PROGRESS'
                                 END
                    , "UPDATED_AT" = NOW()
                WHERE "TOKEN" = :token
            RETURNING "TOKEN"
                    , "STATUS"
                    , "TARGET_TYPE"
                    , "TARGET_IDENTIFIER"
                    , CASE WHEN "STATUS" = 'FAILED'
                           THEN 'Failure threshold of ' || ROUND("FAILURE_THRESHOLD"::NUMERIC, 2) * 100 || '% exceeded: '
                                || "SCAN_FAILED" || '/' || "SCAN_TOTAL" || ' of scans failed'
                      END AS "FAILURE_REASON"
            """)
    @RegisterBeanMapper(VulnerabilityScan.class)
    @GetGeneratedKeys({"TOKEN", "STATUS", "TARGET_TYPE", "TARGET_IDENTIFIER", "FAILURE_REASON"})
    List<VulnerabilityScan> updateAll(
            @Bind("token") List<UUID> tokens,
            @Bind List<Integer> resultsTotal,
            @Bind List<Integer> scannerResultsTotal,
            @Bind List<Integer> scannerResultsFailed);

    @SqlUpdate("""
            DELETE
              FROM "VULNERABILITYSCAN"
             WHERE NOW() - "UPDATED_AT" > :duration
            """)
    int deleteAllForRetentionDuration(@Bind Duration duration);

}
