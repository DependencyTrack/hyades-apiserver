package org.dependencytrack.persistence.jdbi.mapping;

import org.dependencytrack.proto.notification.v1.BackReference;
import org.dependencytrack.proto.notification.v1.Component;
import org.dependencytrack.proto.notification.v1.NewVulnerabilitySubject;
import org.dependencytrack.proto.notification.v1.Project;
import org.dependencytrack.proto.notification.v1.Vulnerability;
import org.jdbi.v3.core.mapper.RowMapper;
import org.jdbi.v3.core.statement.StatementContext;

import java.sql.ResultSet;
import java.sql.SQLException;

import static org.dependencytrack.persistence.jdbi.mapping.RowMapperUtil.maybeSet;

public class NotificationSubjectNewVulnerabilityRowMapper implements RowMapper<NewVulnerabilitySubject> {

    @Override
    public NewVulnerabilitySubject map(final ResultSet rs, final StatementContext ctx) throws SQLException {
        final RowMapper<Component> componentRowMapper = ctx.findRowMapperFor(Component.class).orElseThrow();
        final RowMapper<Project> projectRowMapper = ctx.findRowMapperFor(Project.class).orElseThrow();
        final RowMapper<Vulnerability> vulnRowMapper = ctx.findRowMapperFor(Vulnerability.class).orElseThrow();

        final NewVulnerabilitySubject.Builder builder = NewVulnerabilitySubject.newBuilder()
                .setComponent(componentRowMapper.map(rs, ctx))
                .setProject(projectRowMapper.map(rs, ctx))
                .setVulnerability(vulnRowMapper.map(rs, ctx));
        builder.addAffectedProjects(builder.getProject());
        maybeSet(rs, "vulnAnalysisLevel", ResultSet::getString, builder::setVulnerabilityAnalysisLevel);
        final BackReference.Builder backRefBuilder = BackReference.newBuilder();
        maybeSet(rs, "affectedProjectsApiUrl", ResultSet::getString, backRefBuilder::setApiUri);
        maybeSet(rs, "affectedProjectsFrontendUrl", ResultSet::getString, backRefBuilder::setFrontendUri);
        if (backRefBuilder.hasApiUri() || backRefBuilder.hasFrontendUri()) {
            builder.setAffectedProjectsReference(backRefBuilder);
        }
        return builder.build();
    }

}
