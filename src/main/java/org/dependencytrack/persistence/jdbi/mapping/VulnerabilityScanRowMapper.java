package org.dependencytrack.persistence.jdbi.mapping;

import org.dependencytrack.model.VulnerabilityScan;
import org.dependencytrack.model.VulnerabilityScan.Status;
import org.dependencytrack.model.VulnerabilityScan.TargetType;
import org.jdbi.v3.core.mapper.RowMapper;
import org.jdbi.v3.core.statement.StatementContext;

import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.UUID;

import static org.dependencytrack.persistence.jdbi.mapping.RowMapperUtil.maybeSet;

public class VulnerabilityScanRowMapper implements RowMapper<VulnerabilityScan> {

    @Override
    public VulnerabilityScan map(final ResultSet rs, final StatementContext ctx) throws SQLException {
        final var vulnScan = new VulnerabilityScan();
        maybeSet(rs, "token", ResultSet::getString, vulnScan::setToken);
        maybeSet(rs, "scan_total", ResultSet::getLong, vulnScan::setScanTotal);
        maybeSet(rs, "scan_failed", ResultSet::getLong, vulnScan::setScanFailed);
        maybeSet(rs, "status", ResultSet::getString, status -> vulnScan.setStatus(Status.valueOf(status)));
        maybeSet(rs, "target_type", ResultSet::getString, type -> vulnScan.setTargetType(TargetType.valueOf(type)));
        maybeSet(rs, "target_identifier", ResultSet::getString, identifier -> vulnScan.setTargetIdentifier(UUID.fromString(identifier)));
        maybeSet(rs, "failure_threshold", ResultSet::getDouble, vulnScan::setFailureThreshold);
        maybeSet(rs, "failure_reason", ResultSet::getString, vulnScan::setFailureReason);
        return vulnScan;
    }

}
