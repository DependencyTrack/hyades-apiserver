/*
 * This file is part of Dependency-Track.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * SPDX-License-Identifier: Apache-2.0
 * Copyright (c) OWASP Foundation. All Rights Reserved.
 */
package org.dependencytrack.persistence.jdbi;

import org.jdbi.v3.sqlobject.config.RegisterConstructorMapper;
import org.jdbi.v3.sqlobject.customizer.Bind;
import org.jdbi.v3.sqlobject.customizer.DefineNamedBindings;
import org.jdbi.v3.sqlobject.statement.SqlQuery;

import java.util.List;
import java.util.UUID;

/**
 * @since 5.6.0
 */
public interface VulnerabilityDao {

    @SqlQuery(/* language=InjectedFreeMarker */ """
            <#-- @ftlvariable name="activeFilter" type="Boolean" -->
            <#-- @ftlvariable name="apiOrderByClause" type="String" -->
            <#-- @ftlvariable name="apiOffsetLimitClause" type="String" -->
            <#-- @ftlvariable name="apiProjectAclCondition" type="String" -->
            WITH "CTE_AFFECTED_COMPONENTS" AS (
              SELECT "COMPONENT"."UUID" AS "UUID"
                   , "PROJECT"."ID" AS "PROJECT_ID"
                FROM "COMPONENT"
               INNER JOIN "PROJECT"
                  ON "PROJECT"."ID" = "COMPONENT"."PROJECT_ID"
               INNER JOIN "COMPONENTS_VULNERABILITIES"
                  ON "COMPONENTS_VULNERABILITIES"."COMPONENT_ID" = "COMPONENT"."ID"
               INNER JOIN "VULNERABILITY"
                  ON "VULNERABILITY"."ID" = "COMPONENTS_VULNERABILITIES"."VULNERABILITY_ID"
               WHERE ${apiProjectAclCondition!"TRUE"}
                 AND "VULNERABILITY"."SOURCE" = :source
                 AND "VULNERABILITY"."VULNID" = :vulnId
            <#if activeFilter>
                 AND "PROJECT"."ACTIVE" = :activeFilter
            </#if>
            )
            SELECT "UUID" AS "uuid"
                 , "NAME" AS "name"
                 , "VERSION" AS "version"
                 , "ACTIVE" AS "active"
                 , ("DIRECT_DEPENDENCIES" IS NOT NULL) AS "dependencyGraphAvailable"
                 , (SELECT ARRAY_AGG("UUID")
                      FROM "CTE_AFFECTED_COMPONENTS"
                     WHERE "PROJECT_ID" = "PROJECT"."ID") AS "affectedComponentUuids"
                 , COUNT(*) OVER() AS "totalCount"
              FROM "PROJECT"
             WHERE EXISTS(
                 SELECT 1
                   FROM "CTE_AFFECTED_COMPONENTS"
                  WHERE "PROJECT_ID" = "PROJECT"."ID")
            <#if apiOrderByClause??>
              ${apiOrderByClause}
            <#else>
             ORDER BY "NAME" ASC, "VERSION" DESC
            </#if>
            ${apiOffsetLimitClause!}
            """)
    @DefineNamedBindings
    @AllowApiOrdering(by = {
            @AllowApiOrdering.Column(name = "name"),
            @AllowApiOrdering.Column(name = "version"),
            @AllowApiOrdering.Column(name = "active")
    })
    @RegisterConstructorMapper(AffectedProjectListRow.class)
    List<AffectedProjectListRow> getAffectedProjects(
            @Bind String source,
            @Bind String vulnId,
            @Bind Boolean activeFilter);

    record AffectedProjectListRow(
            UUID uuid,
            String name,
            String version,
            boolean active,
            boolean dependencyGraphAvailable,
            List<UUID> affectedComponentUuids,
            long totalCount) {
    }

}
