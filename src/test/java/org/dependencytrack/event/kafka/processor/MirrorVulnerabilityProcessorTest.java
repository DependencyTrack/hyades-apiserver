package org.dependencytrack.event.kafka.processor;

import org.cyclonedx.proto.v1_4.Bom;
import org.cyclonedx.proto.v1_4.Source;
import org.dependencytrack.PersistenceCapableTest;
import org.dependencytrack.model.Severity;
import org.dependencytrack.model.Vulnerability;
import org.dependencytrack.model.VulnerableSoftware;
import org.dependencytrack.parser.hyades.ModelConverterCdxToVuln;
import org.dependencytrack.util.KafkaTestUtil;
import org.junit.Assert;
import org.junit.Before;
import org.junit.Test;

import java.io.IOException;

public class MirrorVulnerabilityProcessorTest extends PersistenceCapableTest {

   Bom bom;

    @Before
    public void setup() throws IOException {
        bom = KafkaTestUtil.generateBomFromJson("""
                {
                   "version": 1,
                   "components": [
                     {
                       "name": "org.http4s:blaze-core_2.11",
                       "purl": "pkg:maven/org.http4s/blaze-core_2.11",
                       "bomRef": "076d7f91-1a19-484e-929d-4895b2820ef0"
                     },
                     {
                       "name": "org.http4s:blaze-core_2.13",
                       "cpe": "cpe:2.3:a:oracle:mysql:*:*:*:*:*:*:*:*",
                       "bomRef": "82145ba5-a2e8-420b-acea-8b36f7f8885dc"
                     }
                   ],
                   "externalReferences": [],
                   "vulnerabilities": [
                     {
                       "id": "GHSA-xmw9-q7x9-j5qc",
                       "references": [
                         {
                           "id": "CVE-2021-21293",
                           "source": {
                             "name": "NVD"
                           }
                         }
                       ],
                       "ratings": [
                         {
                           "score": 7.5,
                           "severity": 2,
                           "method": 2,
                           "vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H"
                         }
                       ],
                       "cwes": [
                         400,
                         770
                       ],
                       "description": "Unbounded connection acceptance leads to file handle exhaustion",
                       "detail": "### Impact\\n\\nAll servers running blaze-core <= 0.14.14, including blaze-http and http4s-blaze-server users, are affected.\\n\\nBlaze, accepts connections unconditionally on a dedicated thread pool. This has the net effect of amplifying degradation in services that are unable to handle their current request load, since incoming connections are still accepted and added to an unbounded queue. Each connection allocates a socket handle, which drains a scarce OS resource. This can also confound higher level circuit breakers which work based on detecting failed connections.\\n\\nThe vast majority of affected users are using it as part of http4s-blaze-server <= 0.21.16.  http4s provides a mechanism for limiting open connections, but is enforced inside the Blaze accept loop, after the connection is accepted and the socket opened. Thus, the limit only prevents the number of connections which can be simultaneously processed, not the number of connections which can be held open.\\n\\n### Patches\\n\\nThe issue is fixed in version 0.14.15 for `NIO1SocketServerGroup`.  A `maxConnections` parameter is added, with a default value of 512.  Concurrent connections beyond this limit are rejected.  To run unbounded, which is not recommended, set a negative number.\\n\\nThe `NIO2SocketServerGroup`  has no such setting and is now deprecated.\\n\\n### Workarounds\\n* An Nginx side-car acting as a reverse proxy for the local http4s-blaze-server instance would be able to apply a connection limiting semantic before the sockets reach blaze-core. Nginx’s connection bounding is both asynchronous and properly respects backpressure.\\n* A similar sidecar strategy is viable for other non-HTTP services running on blaze-core.\\n* http4s-ember-server is an alternative to http4s-blaze-server, but does not yet have HTTP/2 or web socket support.  Its performance in terms of RPS is appreciably behind Blaze’s, and as the newest backend, has substantially less industrial uptake.\\n* http4s-jetty is an alternative to http4s-blaze-server, but does not yet have web socket support.  Its performance in terms of requests per second is somewhat behind Blaze’s, and despite Jetty's industrial adoption, the http4s integration has substantially less industrial uptake.\\n* http4s-tomcat is an alternative to http4s-blaze-server, but does not yet have HTTP/2 web socket support.  Its performance in terms of requests per second is somewhat behind Blaze’s, and despite Jetty's industrial adoption, the http4s integration has substantially less industrial uptake.\\n\\n### For more information\\nIf you have any questions or comments about this advisory:\\n* Open an issue in [http4s/blaze](http://github.com/http4s/blaze)\\n* Contact us according to the [http4s security policy](https://github.com/http4s/http4s/security/policy)",
                       "advisories": [
                         {
                           "url": "https://nvd.nist.gov/vuln/detail/CVE-2021-21293"
                         }
                       ],
                       "published": "2021-02-02T21:42:49Z",
                       "updated": "2023-01-10T05:22:31Z",
                       "affects": [
                         {
                           "ref": "076d7f91-1a19-484e-929d-4895b2820ef0",
                           "versions": [
                             {
                               "range": "vers:maven/>=0|<0.14.15"
                             },
                             {
                               "version": "0.10.0"
                             },
                             {
                               "version": "0.10.1"
                             }
                           ]
                         },
                         {
                           "ref": "82145ba5-a2e8-420b-acea-8b36f7f8885dc",
                           "versions": [
                             {
                               "range": "vers:generic/>=2.3|<=3.8"
                             }
                           ]
                         }
                       ]
                     }
                   ]
                 }
                """);
    }

    @Test
    public void testVulnRangeParsing(){
        Vulnerability vuln = ModelConverterCdxToVuln.convert(qm, bom, bom.getVulnerabilities(0), false);
        Assert.assertNotNull(vuln);
        Assert.assertEquals("GHSA-xmw9-q7x9-j5qc",vuln.getVulnId());
        Assert.assertEquals("CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H", vuln.getCvssV3Vector());
        Severity severity = ModelConverterCdxToVuln.calculateSeverity(bom);
        Assert.assertEquals("HIGH", severity.name());
        Vulnerability.Source source = ModelConverterCdxToVuln.extractSource("GHSA-xmw9-q7x9-j5qc", bom.getVulnerabilities(0).getSource());
        Assert.assertEquals("GITHUB", source.name());

        MirrorVulnerabilityProcessor processor = new MirrorVulnerabilityProcessor();
        VulnerableSoftware vs = processor.mapAffectedRangeToVulnerableSoftware(qm, bom.getVulnerabilities(0).getAffects(0).getVersions(0).getRange(), "pkg:maven/org.http4s/blaze-core_2.11", null);
        Assert.assertNotNull(vs);
        Assert.assertEquals("0", vs.getVersionStartIncluding());
        Assert.assertEquals("0.14.15", vs.getVersionEndExcluding());
        Assert.assertEquals("blaze-core_2.11", vs.getPurlName());
        Assert.assertEquals("maven", vs.getPurlType());
        Assert.assertEquals("org.http4s", vs.getPurlNamespace());

        vs = processor.mapAffectedRangeToVulnerableSoftware(qm, bom.getVulnerabilities(0).getAffects(1).getVersions(0).getRange(), null, "cpe:2.3:a:oracle:mysql:*:*:*:*:*:*:*:*");
        Assert.assertNotNull(vs);
        Assert.assertEquals("2.3", vs.getVersionStartIncluding());
        Assert.assertEquals("3.8", vs.getVersionEndIncluding());
        Assert.assertEquals("cpe:2.3:a:oracle:mysql:*:*:*:*:*:*:*:*", vs.getCpe23());
    }

    @Test
    public void testVulnVersionParsing(){
        Vulnerability vuln = ModelConverterCdxToVuln.convert(qm, bom, bom.getVulnerabilities(0), false);
        Assert.assertNotNull(vuln);
        Assert.assertEquals("GHSA-xmw9-q7x9-j5qc",vuln.getVulnId());
        Assert.assertEquals("CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H", vuln.getCvssV3Vector());
        Severity severity = ModelConverterCdxToVuln.calculateSeverity(bom);
        Assert.assertEquals("HIGH", severity.name());
        Vulnerability.Source source = ModelConverterCdxToVuln.extractSource("GHSA-xmw9-q7x9-j5qc", bom.getVulnerabilities(0).getSource());
        Assert.assertEquals("GITHUB", source.name());

        MirrorVulnerabilityProcessor processor = new MirrorVulnerabilityProcessor();
        var vs = processor.mapAffectedVersionToVulnerableSoftware(qm, bom.getVulnerabilities(0).getAffects(0).getVersions(1).getVersion(), "pkg:maven/org.http4s/blaze-core_2.11", null);
        Assert.assertNotNull(vs);
        Assert.assertEquals("0.10.0", vs.getVersion());
        Assert.assertEquals("blaze-core_2.11", vs.getPurlName());
        Assert.assertEquals("maven", vs.getPurlType());
        Assert.assertEquals("org.http4s", vs.getPurlNamespace());

        vs = processor.mapAffectedVersionToVulnerableSoftware(qm, bom.getVulnerabilities(0).getAffects(0).getVersions(2).getVersion(), "pkg:maven/org.http4s/blaze-core_2.11", null);
        Assert.assertNotNull(vs);
        Assert.assertEquals("0.10.1", vs.getVersion());
    }

    @Test
    public void testExtractSource() {
        Source source = Source.newBuilder().setName("OSV").build();
        Assert.assertEquals(Vulnerability.Source.OSV, ModelConverterCdxToVuln.extractSource("OSV-test-id", source));
    }

}
