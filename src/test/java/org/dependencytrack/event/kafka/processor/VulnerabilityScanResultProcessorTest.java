package org.dependencytrack.event.kafka.processor;

import com.google.protobuf.Timestamp;
import junitparams.JUnitParamsRunner;
import junitparams.Parameters;
import org.apache.kafka.common.header.Headers;
import org.apache.kafka.common.header.internals.RecordHeaders;
import org.apache.kafka.common.serialization.Serdes;
import org.apache.kafka.common.serialization.UUIDDeserializer;
import org.apache.kafka.common.serialization.UUIDSerializer;
import org.apache.kafka.streams.StreamsBuilder;
import org.apache.kafka.streams.TestInputTopic;
import org.apache.kafka.streams.TestOutputTopic;
import org.apache.kafka.streams.TopologyTestDriver;
import org.apache.kafka.streams.kstream.Consumed;
import org.apache.kafka.streams.kstream.Produced;
import org.apache.kafka.streams.test.TestRecord;
import org.dependencytrack.PersistenceCapableTest;
import org.dependencytrack.event.kafka.KafkaEventHeaders;
import org.dependencytrack.event.kafka.KafkaTopics;
import org.dependencytrack.event.kafka.serialization.KafkaProtobufDeserializer;
import org.dependencytrack.event.kafka.serialization.KafkaProtobufSerde;
import org.dependencytrack.event.kafka.serialization.KafkaProtobufSerializer;
import org.dependencytrack.model.AnalyzerIdentity;
import org.dependencytrack.model.Component;
import org.dependencytrack.model.ConfigPropertyConstants;
import org.dependencytrack.model.Finding;
import org.dependencytrack.model.FindingAttribution;
import org.dependencytrack.model.Project;
import org.dependencytrack.model.Vulnerability;
import org.dependencytrack.model.VulnerabilityAnalysisLevel;
import org.dependencytrack.notification.NotificationConstants;
import org.dependencytrack.persistence.CweImporter;
import org.hyades.proto.notification.v1.NewVulnerabilitySubject;
import org.hyades.proto.notification.v1.Notification;
import org.hyades.proto.vuln.v1.Rating;
import org.hyades.proto.vuln.v1.Reference;
import org.hyades.proto.vuln.v1.ScoreMethod;
import org.hyades.proto.vuln.v1.Source;
import org.hyades.proto.vulnanalysis.v1.ScanKey;
import org.hyades.proto.vulnanalysis.v1.ScanResult;
import org.hyades.proto.vulnanalysis.v1.Scanner;
import org.hyades.proto.vulnanalysis.v1.ScannerResult;
import org.junit.After;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;

import java.math.BigDecimal;
import java.sql.Date;
import java.time.Instant;
import java.util.List;
import java.util.UUID;

import static org.assertj.core.api.Assertions.assertThat;
import static org.dependencytrack.util.KafkaTestUtil.deserializeValue;
import static org.hyades.proto.notification.v1.Group.GROUP_ANALYZER;
import static org.hyades.proto.notification.v1.Group.GROUP_NEW_VULNERABILITY;
import static org.hyades.proto.notification.v1.Level.LEVEL_ERROR;
import static org.hyades.proto.notification.v1.Level.LEVEL_INFORMATIONAL;
import static org.hyades.proto.notification.v1.Scope.SCOPE_PORTFOLIO;
import static org.hyades.proto.notification.v1.Scope.SCOPE_SYSTEM;
import static org.hyades.proto.vuln.v1.Source.SOURCE_INTERNAL;
import static org.hyades.proto.vuln.v1.Source.SOURCE_NVD;
import static org.hyades.proto.vuln.v1.Source.SOURCE_OSSINDEX;
import static org.hyades.proto.vulnanalysis.v1.ScanStatus.SCAN_STATUS_FAILED;
import static org.hyades.proto.vulnanalysis.v1.ScanStatus.SCAN_STATUS_PENDING;
import static org.hyades.proto.vulnanalysis.v1.ScanStatus.SCAN_STATUS_SUCCESSFUL;
import static org.hyades.proto.vulnanalysis.v1.Scanner.SCANNER_INTERNAL;
import static org.hyades.proto.vulnanalysis.v1.Scanner.SCANNER_OSSINDEX;
import static org.hyades.proto.vulnanalysis.v1.Scanner.SCANNER_SNYK;

@RunWith(JUnitParamsRunner.class)
public class VulnerabilityScanResultProcessorTest extends PersistenceCapableTest {

    private TopologyTestDriver testDriver;
    private TestInputTopic<UUID, ScanResult> inputTopic;
    private TestOutputTopic<UUID, ScanResult> outputTopic;

    @Before
    public void setUp() throws Exception {
        final var streamsBuilder = new StreamsBuilder();
        streamsBuilder
                .stream("input-topic", Consumed
                        .with(Serdes.UUID(), new KafkaProtobufSerde<>(ScanResult.parser())))
                .processValues(VulnerabilityScanResultProcessor::new)
                .to("output-topic", Produced
                        .with(Serdes.UUID(), new KafkaProtobufSerde<>(ScanResult.parser())));

        testDriver = new TopologyTestDriver(streamsBuilder.build());
        inputTopic = testDriver.createInputTopic("input-topic",
                new UUIDSerializer(), new KafkaProtobufSerializer<>());
        outputTopic = testDriver.createOutputTopic("output-topic",
                new UUIDDeserializer(), new KafkaProtobufDeserializer<>(ScanResult.parser()));

        new CweImporter().processCweDefinitions(); // Required for CWE mapping
    }

    @After
    public void tearDown() {
        if (testDriver != null) {
            testDriver.close();
        }
    }

    @Test
    public void dropFailedScanResultTest() {
        final var project = new Project();
        project.setName("acme-app");
        project.setVersion("1.0.0");
        qm.persist(project);

        final var component = new Component();
        component.setName("acme-lib");
        component.setVersion("1.1.0");
        component.setProject(project);
        qm.persist(component);

        final var scanToken = UUID.randomUUID().toString();
        final var scanKey = ScanKey.newBuilder().setScanToken(scanToken).setComponentUuid(component.getUuid().toString()).build();
        final var scanResult = ScanResult.newBuilder()
                .setKey(scanKey)
                .addScannerResults(ScannerResult.newBuilder()
                        .setScanner(SCANNER_INTERNAL)
                        .setStatus(SCAN_STATUS_FAILED)
                        .setFailureReason("just because"))
                .build();

        inputTopic.pipeInput(component.getUuid(), scanResult);

        assertThat(outputTopic.readValuesToList()).containsOnly(scanResult);

        assertThat(kafkaMockProducer.history()).satisfiesExactly(
                record -> {
                    assertThat(record.topic()).isEqualTo(KafkaTopics.NOTIFICATION_ANALYZER.name());
                    final Notification notification = deserializeValue(KafkaTopics.NOTIFICATION_ANALYZER, record);
                    assertThat(notification.getScope()).isEqualTo(SCOPE_SYSTEM);
                    assertThat(notification.getLevel()).isEqualTo(LEVEL_ERROR);
                    assertThat(notification.getGroup()).isEqualTo(GROUP_ANALYZER);
                    assertThat(notification.getTitle()).isEqualTo(NotificationConstants.Title.ANALYZER_ERROR);
                    assertThat(notification.getContent()).isEqualTo(
                            "Scan of component %s with %s failed (scanKey: %s): just because",
                            component.getUuid(), SCANNER_INTERNAL, scanToken + "/" + component.getUuid());
                }
        );
    }

    @Test
    public void dropPendingScanResultTest() {
        final var project = new Project();
        project.setName("acme-app");
        project.setVersion("1.0.0");
        qm.persist(project);

        final var component = new Component();
        component.setName("acme-lib");
        component.setVersion("1.1.0");
        component.setProject(project);
        qm.persist(component);

        final var scanToken = UUID.randomUUID().toString();
        final var scanKey = ScanKey.newBuilder().setScanToken(scanToken).setComponentUuid(component.getUuid().toString()).build();
        final var scanResult = ScanResult.newBuilder()
                .setKey(scanKey)
                .addScannerResults(ScannerResult.newBuilder()
                        .setScanner(SCANNER_INTERNAL)
                        .setStatus(SCAN_STATUS_PENDING))
                .build();

        inputTopic.pipeInput(component.getUuid(), scanResult);

        assertThat(outputTopic.readValuesToList()).containsOnly(scanResult);

        assertThat(kafkaMockProducer.history()).isEmpty();
    }

    @Test
    public void processSuccessfulScanResultWhenComponentDoesNotExistTest() {
        final var componentUuid = UUID.randomUUID();
        final var scanToken = UUID.randomUUID().toString();
        final var scanKey = ScanKey.newBuilder().setScanToken(scanToken).setComponentUuid(componentUuid.toString()).build();
        final var vuln = new Vulnerability();
        vuln.setVulnId("INT-001");
        vuln.setSource(Vulnerability.Source.INTERNAL);
        final var scanResult = ScanResult.newBuilder()
                .setKey(scanKey)
                .addScannerResults(ScannerResult.newBuilder()
                        .setScanner(SCANNER_INTERNAL)
                        .setStatus(SCAN_STATUS_SUCCESSFUL)
                        .addVulnerabilities(org.hyades.proto.vuln.v1.Vulnerability.newBuilder()
                                .setId("INT-001")
                                .setSource(SOURCE_INTERNAL)))
                .build();

        inputTopic.pipeInput(componentUuid, scanResult);

        assertThat(outputTopic.readValuesToList()).containsOnly(scanResult);

        assertThat(kafkaMockProducer.history()).isEmpty();
    }

    @Test
    public void processSuccessfulScanResult() {
        final var project = new Project();
        project.setName("acme-app");
        project.setVersion("1.0.0");
        qm.persist(project);

        final var component = new Component();
        component.setName("acme-lib");
        component.setVersion("1.1.0");
        component.setProject(project);
        qm.persist(component);

        final var componentUuid = component.getUuid();
        final var scanToken = UUID.randomUUID().toString();
        final var scanKey = ScanKey.newBuilder().setScanToken(scanToken).setComponentUuid(componentUuid.toString()).build();
        final var vulnA = new Vulnerability();
        vulnA.setVulnId("INT-001");
        vulnA.setSource(Vulnerability.Source.INTERNAL);
        qm.persist(vulnA);
        final var vulnB = new Vulnerability();
        vulnB.setVulnId("SONATYPE-002");
        vulnB.setSource(Vulnerability.Source.OSSINDEX);
        final var vulnC = new Vulnerability();
        vulnC.setVulnId("INT-002");
        vulnC.setSource(Vulnerability.Source.INTERNAL);
        final var scanResult = ScanResult.newBuilder()
                .setKey(scanKey)
                .addScannerResults(ScannerResult.newBuilder()
                        .setScanner(SCANNER_INTERNAL)
                        .setStatus(SCAN_STATUS_SUCCESSFUL)
                        .addVulnerabilities(org.hyades.proto.vuln.v1.Vulnerability.newBuilder()
                                .setId(vulnA.getVulnId())
                                .setSource(SOURCE_INTERNAL))
                        .addVulnerabilities(org.hyades.proto.vuln.v1.Vulnerability.newBuilder()
                                .setId(vulnB.getVulnId())
                                .setSource(SOURCE_OSSINDEX))
                        .addVulnerabilities(org.hyades.proto.vuln.v1.Vulnerability.newBuilder()
                                .setId(vulnC.getVulnId())
                                .setSource(SOURCE_INTERNAL)))
                .build();
        final Headers headers = new RecordHeaders();
        headers.add(KafkaEventHeaders.VULN_ANALYSIS_LEVEL, VulnerabilityAnalysisLevel.BOM_UPLOAD_ANALYSIS.name().getBytes());

        inputTopic.pipeInput(new TestRecord<>(componentUuid, scanResult, headers));

        assertThat(outputTopic.readValuesToList()).containsOnly(scanResult);

        qm.getPersistenceManager().refresh(component);
        assertThat(component.getVulnerabilities()).satisfiesExactlyInAnyOrder(
                vuln -> {
                    assertThat(vuln.getVulnId()).isEqualTo("INT-001");
                    assertThat(vuln.getSource()).isEqualTo(Vulnerability.Source.INTERNAL.name());
                },
                vuln -> {
                    assertThat(vuln.getVulnId()).isEqualTo("SONATYPE-002");
                    assertThat(vuln.getSource()).isEqualTo(Vulnerability.Source.OSSINDEX.name());
                }
                // INT-002 is discarded because it is internal but doesn't exist in the database.
        );

        final List<Finding> findings = qm.getFindings(project, false);
        assertThat(findings).satisfiesExactlyInAnyOrder(
                finding -> {
                    assertThat(finding.getVulnerability().get("vulnId")).isEqualTo("INT-001");
                    assertThat(finding.getAttribution().get("analyzerIdentity")).isEqualTo(AnalyzerIdentity.INTERNAL_ANALYZER.name());
                },
                finding -> {
                    assertThat(finding.getVulnerability().get("vulnId")).isEqualTo("SONATYPE-002");
                    assertThat(finding.getAttribution().get("analyzerIdentity")).isEqualTo(AnalyzerIdentity.INTERNAL_ANALYZER.name());
                }
                // INT-002 is discarded because it is internal but doesn't exist in the database.
        );

        assertThat(kafkaMockProducer.history()).satisfiesExactly(
                record -> {
                    assertThat(record.topic()).isEqualTo(KafkaTopics.NOTIFICATION_NEW_VULNERABILITY.name());
                    final Notification notification = deserializeValue(KafkaTopics.NOTIFICATION_NEW_VULNERABILITY, record);
                    assertThat(notification.getScope()).isEqualTo(SCOPE_PORTFOLIO);
                    assertThat(notification.getLevel()).isEqualTo(LEVEL_INFORMATIONAL);
                    assertThat(notification.getGroup()).isEqualTo(GROUP_NEW_VULNERABILITY);
                    assertThat(notification.getSubject().is(NewVulnerabilitySubject.class)).isTrue();
                    final var subject = notification.getSubject().unpack(NewVulnerabilitySubject.class);
                    assertThat(subject.getVulnerabilityAnalysisLevel()).isEqualTo("BOM_UPLOAD_ANALYSIS");
                },
                record -> {
                    assertThat(record.topic()).isEqualTo(KafkaTopics.NOTIFICATION_NEW_VULNERABILITY.name());
                    final Notification notification = deserializeValue(KafkaTopics.NOTIFICATION_NEW_VULNERABILITY, record);
                    assertThat(notification.getScope()).isEqualTo(SCOPE_PORTFOLIO);
                    assertThat(notification.getLevel()).isEqualTo(LEVEL_INFORMATIONAL);
                    assertThat(notification.getGroup()).isEqualTo(GROUP_NEW_VULNERABILITY);
                    assertThat(notification.getSubject().is(NewVulnerabilitySubject.class)).isTrue();
                    final var subject = notification.getSubject().unpack(NewVulnerabilitySubject.class);
                    assertThat(subject.getVulnerabilityAnalysisLevel()).isEqualTo("BOM_UPLOAD_ANALYSIS");
                }
                // INT-002 is discarded because it is internal but doesn't exist in the database.
        );
    }

    @Test
    public void processSuccessfulScanResultWithExistingFindingTest() {
        final var project = new Project();
        project.setName("acme-app");
        project.setVersion("1.0.0");
        qm.persist(project);

        final var component = new Component();
        component.setName("acme-lib");
        component.setVersion("1.1.0");
        component.setProject(project);
        qm.persist(component);

        final var vulnerability = new Vulnerability();
        vulnerability.setVulnId("CVE-001");
        vulnerability.setSource(Vulnerability.Source.NVD);
        qm.persist(vulnerability);
        qm.addVulnerability(vulnerability, component, AnalyzerIdentity.OSSINDEX_ANALYZER);

        final var scanToken = UUID.randomUUID().toString();
        final var scanKey = ScanKey.newBuilder().setScanToken(scanToken).setComponentUuid(component.getUuid().toString()).build();
        final var scanResult = ScanResult.newBuilder()
                .setKey(scanKey)
                .addScannerResults(ScannerResult.newBuilder()
                        .setScanner(SCANNER_INTERNAL)
                        .setStatus(SCAN_STATUS_SUCCESSFUL)
                        .addVulnerabilities(org.hyades.proto.vuln.v1.Vulnerability.newBuilder()
                                .setId("CVE-001")
                                .setSource(SOURCE_NVD)))
                .build();

        inputTopic.pipeInput(component.getUuid(), scanResult);

        qm.getPersistenceManager().refreshAll(component, vulnerability);
        assertThat(component.getVulnerabilities()).satisfiesExactly(
                vuln -> {
                    assertThat(vuln.getVulnId()).isEqualTo("CVE-001");
                    assertThat(vuln.getSource()).isEqualTo(Vulnerability.Source.NVD.name());
                }
        );

        // Attribution should still refer to the first scanner that identified the vulnerability.
        final FindingAttribution attribution = qm.getFindingAttribution(vulnerability, component);
        assertThat(attribution).isNotNull();
        assertThat(attribution.getAnalyzerIdentity()).isEqualTo(AnalyzerIdentity.OSSINDEX_ANALYZER);

        // Because the vulnerability was reported already, no notification must be sent.
        assertThat(kafkaMockProducer.history()).isEmpty();
    }

    private Object[] canUpdateExistingVulnerabilityTestParams() {
        return new Object[]{
                // Results from the internal scanner must never override any existing data.
                new Object[]{"INT-001", "INTERNAL", SCANNER_INTERNAL, null, null, false},
                new Object[]{"CVE-001", "NVD", SCANNER_INTERNAL, ConfigPropertyConstants.VULNERABILITY_SOURCE_NVD_ENABLED, "true", false},
                new Object[]{"CVE-001", "NVD", SCANNER_INTERNAL, ConfigPropertyConstants.VULNERABILITY_SOURCE_NVD_ENABLED, "false", false},
                new Object[]{"CVE-001", "NVD", SCANNER_INTERNAL, ConfigPropertyConstants.VULNERABILITY_SOURCE_NVD_ENABLED, null, false},
                new Object[]{"GHSA-001", "GITHUB", SCANNER_INTERNAL, ConfigPropertyConstants.VULNERABILITY_SOURCE_GITHUB_ADVISORIES_ENABLED, "true", false},
                new Object[]{"GHSA-001", "GITHUB", SCANNER_INTERNAL, ConfigPropertyConstants.VULNERABILITY_SOURCE_GITHUB_ADVISORIES_ENABLED, "false", false},
                new Object[]{"GHSA-001", "GITHUB", SCANNER_INTERNAL, ConfigPropertyConstants.VULNERABILITY_SOURCE_GITHUB_ADVISORIES_ENABLED, null, false},
                new Object[]{"OSV-001", "OSV", SCANNER_INTERNAL, ConfigPropertyConstants.VULNERABILITY_SOURCE_GOOGLE_OSV_ENABLED, "Go;Maven", false},
                new Object[]{"OSV-001", "OSV", SCANNER_INTERNAL, ConfigPropertyConstants.VULNERABILITY_SOURCE_GOOGLE_OSV_ENABLED, "", false},
                new Object[]{"OSV-001", "OSV", SCANNER_INTERNAL, ConfigPropertyConstants.VULNERABILITY_SOURCE_GOOGLE_OSV_ENABLED, null, false},
                new Object[]{"sonatype-001", "OSSINDEX", SCANNER_INTERNAL, null, null, false},
                new Object[]{"snyk-001", "SNYK", SCANNER_INTERNAL, null, null, false},
                new Object[]{"001", "VULNDB", SCANNER_INTERNAL, null, null, false},
                // Scanners must be allowed to override existing data if they themselves are the authoritative source,
                // or mirroring of the actual authoritative source is not enabled.
                new Object[]{"CVE-001", "NVD", SCANNER_OSSINDEX, ConfigPropertyConstants.VULNERABILITY_SOURCE_NVD_ENABLED, "true", false},
                new Object[]{"CVE-001", "NVD", SCANNER_OSSINDEX, ConfigPropertyConstants.VULNERABILITY_SOURCE_NVD_ENABLED, "false", true},
                new Object[]{"CVE-001", "NVD", SCANNER_OSSINDEX, ConfigPropertyConstants.VULNERABILITY_SOURCE_NVD_ENABLED, null, true},
                new Object[]{"GHSA-001", "GITHUB", SCANNER_OSSINDEX, ConfigPropertyConstants.VULNERABILITY_SOURCE_GITHUB_ADVISORIES_ENABLED, "true", false},
                new Object[]{"GHSA-001", "GITHUB", SCANNER_OSSINDEX, ConfigPropertyConstants.VULNERABILITY_SOURCE_GITHUB_ADVISORIES_ENABLED, "false", true},
                new Object[]{"GHSA-001", "GITHUB", SCANNER_OSSINDEX, ConfigPropertyConstants.VULNERABILITY_SOURCE_GITHUB_ADVISORIES_ENABLED, null, true},
                new Object[]{"OSV-001", "OSV", SCANNER_OSSINDEX, ConfigPropertyConstants.VULNERABILITY_SOURCE_GOOGLE_OSV_ENABLED, "Go;Maven", false},
                new Object[]{"OSV-001", "OSV", SCANNER_OSSINDEX, ConfigPropertyConstants.VULNERABILITY_SOURCE_GOOGLE_OSV_ENABLED, "", true},
                new Object[]{"OSV-001", "OSV", SCANNER_OSSINDEX, ConfigPropertyConstants.VULNERABILITY_SOURCE_GOOGLE_OSV_ENABLED, null, true},
                new Object[]{"sonatype-001", "OSSINDEX", SCANNER_OSSINDEX, null, null, true},
                new Object[]{"SNYK-001", "SNYK", SCANNER_OSSINDEX, null, null, false},
                new Object[]{"sonatype-001", "OSSINDEX", SCANNER_SNYK, null, null, false},
                new Object[]{"SNYK-001", "SNYK", SCANNER_SNYK, null, null, true},
                // Updating of internal vulnerabilities must always be forbidden.
                new Object[]{"INT-001", "INTERNAL", SCANNER_OSSINDEX, null, null, false},
                new Object[]{"INT-001", "INTERNAL", SCANNER_SNYK, null, null, false},
        };
    }

    @Test
    @Parameters(method = "canUpdateExistingVulnerabilityTestParams")
    public void canUpdateExistingVulnerabilityTest(final String vulnId, final String vulnSource, final Scanner scanner,
                                                   final ConfigPropertyConstants mirrorSourceConfigProperty,
                                                   final String mirrorSourceConfigPropertyValue, final boolean expectModified) {
        if (mirrorSourceConfigProperty != null && mirrorSourceConfigPropertyValue != null) {
            qm.createConfigProperty(
                    mirrorSourceConfigProperty.getGroupName(),
                    mirrorSourceConfigProperty.getPropertyName(),
                    mirrorSourceConfigPropertyValue,
                    mirrorSourceConfigProperty.getPropertyType(),
                    null
            );
        }

        final var project = new Project();
        project.setName("acme-app");
        project.setVersion("1.0.0");
        qm.persist(project);

        final var component = new Component();
        component.setName("acme-lib");
        component.setVersion("1.1.0");
        component.setProject(project);
        qm.persist(component);

        final var vulnerability = new Vulnerability();
        vulnerability.setVulnId(vulnId);
        vulnerability.setSource(vulnSource);
        vulnerability.setDescription("original description");
        qm.persist(vulnerability);

        final var scanToken = UUID.randomUUID().toString();
        final var scanKey = ScanKey.newBuilder().setScanToken(scanToken).setComponentUuid(component.getUuid().toString()).build();
        final var scanResult = ScanResult.newBuilder()
                .setKey(scanKey)
                .addScannerResults(ScannerResult.newBuilder()
                        .setScanner(scanner)
                        .setStatus(SCAN_STATUS_SUCCESSFUL)
                        .addVulnerabilities(org.hyades.proto.vuln.v1.Vulnerability.newBuilder()
                                .setId(vulnId)
                                .setSource(Source.valueOf("SOURCE_" + vulnSource))
                                .setDescription("modified description")))
                .build();

        inputTopic.pipeInput(component.getUuid(), scanResult);

        qm.getPersistenceManager().refreshAll(component, vulnerability);
        assertThat(component.getVulnerabilities()).satisfiesExactly(
                vuln -> {
                    assertThat(vuln.getVulnId()).isEqualTo(vulnId);
                    assertThat(vuln.getSource()).isEqualTo(vulnSource);
                    if (expectModified) {
                        assertThat(vuln.getDescription()).isEqualTo("modified description");
                    } else {
                        assertThat(vuln.getDescription()).isEqualTo("original description");
                    }
                }
        );
    }

    @Test
    public void updateExistingVulnerabilityTest() {
        final var project = new Project();
        project.setName("acme-app");
        project.setVersion("1.0.0");
        qm.persist(project);

        final var component = new Component();
        component.setName("acme-lib");
        component.setVersion("1.1.0");
        component.setProject(project);
        qm.persist(component);

        final var vulnerability = new Vulnerability();
        vulnerability.setVulnId("CVE-001");
        vulnerability.setSource(Vulnerability.Source.NVD);
        vulnerability.setTitle("original title");
        vulnerability.setSubTitle("original subTitle");
        vulnerability.setDescription("original description");
        vulnerability.setRecommendation("original recommendation");
        vulnerability.setReferences("original references");
        vulnerability.setCreated(Date.from(Instant.ofEpochSecond(1672527600))); // Sat Dec 31 2022 23:00:00 GMT+0000
        vulnerability.setPublished(Date.from(Instant.ofEpochSecond(1672614000))); // Sun Jan 01 2023 23:00:00 GMT+0000
        vulnerability.setUpdated(Date.from(Instant.ofEpochSecond(1672700400))); // Mon Jan 02 2023 23:00:00 GMT+0000
        vulnerability.setCwes(List.of(666, 777));
        vulnerability.setCvssV2BaseScore(BigDecimal.valueOf(2.2));
        vulnerability.setCvssV2ExploitabilitySubScore(BigDecimal.valueOf(2.2));
        vulnerability.setCvssV2ImpactSubScore(BigDecimal.valueOf(2.3));
        vulnerability.setCvssV2Vector("original cvssV2Vector");
        vulnerability.setCvssV3BaseScore(BigDecimal.valueOf(3.1));
        vulnerability.setCvssV3ExploitabilitySubScore(BigDecimal.valueOf(3.2));
        vulnerability.setCvssV3ImpactSubScore(BigDecimal.valueOf(3.3));
        vulnerability.setCvssV3Vector("original cvssv3Vector");
        vulnerability.setOwaspRRLikelihoodScore(BigDecimal.valueOf(4.1));
        vulnerability.setOwaspRRTechnicalImpactScore(BigDecimal.valueOf(4.2));
        vulnerability.setOwaspRRBusinessImpactScore(BigDecimal.valueOf(4.3));
        vulnerability.setOwaspRRVector("original owaspRrVector");
        vulnerability.setVulnerableVersions("original vulnerableVersions");
        vulnerability.setPatchedVersions("original patchedVersions");
        vulnerability.setEpssScore(BigDecimal.valueOf(5.1));
        vulnerability.setEpssPercentile(BigDecimal.valueOf(5.2));
        qm.persist(vulnerability);

        final var scanToken = UUID.randomUUID().toString();
        final var scanKey = ScanKey.newBuilder().setScanToken(scanToken).setComponentUuid(component.getUuid().toString()).build();
        final var scanResult = ScanResult.newBuilder()
                .setKey(scanKey)
                .addScannerResults(ScannerResult.newBuilder()
                        .setScanner(SCANNER_OSSINDEX)
                        .setStatus(SCAN_STATUS_SUCCESSFUL)
                        .addVulnerabilities(org.hyades.proto.vuln.v1.Vulnerability.newBuilder()
                                        .setId("CVE-001")
                                        .setSource(SOURCE_NVD)
                                        .setTitle("modified title")
                                        // (There is no subTitle field)
                                        .setDescription("modified description")
                                        .setRecommendation("modified recommendation")
                                        .addReferences(Reference.newBuilder()
                                                .setUrl("modified reference"))
                                        .setCreated(Timestamp.newBuilder()
                                                .setSeconds(1673305200)) // Mon Jan 09 2023 23:00:00 GMT+0000
                                        .setPublished(Timestamp.newBuilder()
                                                .setSeconds(1673391600)) // Tue Jan 10 2023 23:00:00 GMT+0000
                                        .setUpdated(Timestamp.newBuilder()
                                                .setSeconds(1673478000)) // Wed Jan 11 2023 23:00:00 GMT+0000
                                        .addCwes(999)
                                        .addRatings(Rating.newBuilder()
                                                .setSource(SOURCE_NVD)
                                                .setMethod(ScoreMethod.SCORE_METHOD_CVSSV2)
                                                .setScore(9.3)
                                                .setVector("(AV:N/AC:M/Au:N/C:C/I:C/A:C)"))
                                        .addRatings(Rating.newBuilder()
                                                .setSource(SOURCE_NVD)
                                                .setMethod(ScoreMethod.SCORE_METHOD_CVSSV31)
                                                .setScore(10.0)
                                                .setVector("CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:C/C:H/I:H/A:H"))
                                        .addRatings(Rating.newBuilder()
                                                .setSource(SOURCE_OSSINDEX)
                                                .setMethod(ScoreMethod.SCORE_METHOD_OWASP)
                                                .setScore(6.6)
                                                .setVector("SL:1/M:4/O:4/S:9/ED:7/EE:3/A:4/ID:3/LC:9/LI:1/LAV:5/LAC:1/FD:3/RD:4/NC:7/PV:9"))
                                // (There is no vulnerableVersions field)
                                // (There is no patchedVersions field)
                                // (There is no epssScore field)
                                // (There is no epssPercentile field)
                        ))
                .build();

        inputTopic.pipeInput(component.getUuid(), scanResult);

        qm.getPersistenceManager().refreshAll(component, vulnerability);
        assertThat(component.getVulnerabilities()).hasSize(1);

        assertThat(vulnerability.getVulnId()).isEqualTo("CVE-001");
        assertThat(vulnerability.getSource()).isEqualTo("NVD");
        assertThat(vulnerability.getDescription()).isEqualTo("modified description");
        assertThat(vulnerability.getTitle()).isEqualTo("modified title");
        assertThat(vulnerability.getSubTitle()).isNull();
        assertThat(vulnerability.getRecommendation()).isEqualTo("modified recommendation");
        assertThat(vulnerability.getReferences()).isEqualTo("* [modified reference](modified reference)");
        assertThat(vulnerability.getCreated()).isEqualTo(Instant.ofEpochSecond(1673305200));
        assertThat(vulnerability.getPublished()).isEqualTo(Instant.ofEpochSecond(1673391600));
        assertThat(vulnerability.getUpdated()).isEqualTo(Instant.ofEpochSecond(1673478000));
        assertThat(vulnerability.getCwes()).containsOnly(999);
        assertThat(vulnerability.getCvssV2BaseScore()).isEqualTo("9.3");
        assertThat(vulnerability.getCvssV2ExploitabilitySubScore()).isEqualTo("3.9");
        assertThat(vulnerability.getCvssV2ImpactSubScore()).isEqualTo("10.0");
        assertThat(vulnerability.getCvssV2Vector()).isEqualTo("(AV:N/AC:M/Au:N/C:C/I:C/A:C)");
        assertThat(vulnerability.getCvssV3BaseScore()).isEqualTo("10.0");
        assertThat(vulnerability.getCvssV3ExploitabilitySubScore()).isEqualTo("3.2");
        assertThat(vulnerability.getCvssV3ImpactSubScore()).isEqualTo("6.0");
        assertThat(vulnerability.getCvssV3Vector()).isEqualTo("CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:C/C:H/I:H/A:H");
        assertThat(vulnerability.getOwaspRRLikelihoodScore()).isEqualTo("4.4");
        assertThat(vulnerability.getOwaspRRTechnicalImpactScore()).isEqualTo("4.0");
        assertThat(vulnerability.getOwaspRRBusinessImpactScore()).isEqualTo("5.8");
        assertThat(vulnerability.getOwaspRRVector()).isEqualTo("SL:1/M:4/O:4/S:9/ED:7/EE:3/A:4/ID:3/LC:9/LI:1/LAV:5/LAC:1/FD:3/RD:4/NC:7/PV:9");
        assertThat(vulnerability.getVulnerableVersions()).isNull();
        assertThat(vulnerability.getPatchedVersions()).isNull();
        assertThat(vulnerability.getEpssScore()).isEqualByComparingTo("5.1");
        assertThat(vulnerability.getEpssPercentile()).isEqualByComparingTo("5.2");
    }
}