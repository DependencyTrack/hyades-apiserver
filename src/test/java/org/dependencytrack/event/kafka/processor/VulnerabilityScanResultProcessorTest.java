package org.dependencytrack.event.kafka.processor;

import org.apache.kafka.common.serialization.Serdes;
import org.apache.kafka.common.serialization.UUIDDeserializer;
import org.apache.kafka.common.serialization.UUIDSerializer;
import org.apache.kafka.streams.StreamsBuilder;
import org.apache.kafka.streams.TestInputTopic;
import org.apache.kafka.streams.TestOutputTopic;
import org.apache.kafka.streams.TopologyTestDriver;
import org.apache.kafka.streams.kstream.Consumed;
import org.apache.kafka.streams.kstream.Produced;
import org.dependencytrack.PersistenceCapableTest;
import org.dependencytrack.event.kafka.serialization.KafkaProtobufDeserializer;
import org.dependencytrack.event.kafka.serialization.KafkaProtobufSerde;
import org.dependencytrack.event.kafka.serialization.KafkaProtobufSerializer;
import org.dependencytrack.model.Component;
import org.dependencytrack.model.Finding;
import org.dependencytrack.model.Project;
import org.dependencytrack.model.Vulnerability;
import org.hyades.proto.vuln.v1.Source;
import org.hyades.proto.vulnanalysis.v1.ScanKey;
import org.hyades.proto.vulnanalysis.v1.ScanResult;
import org.hyades.proto.vulnanalysis.v1.ScanStatus;
import org.hyades.proto.vulnanalysis.v1.Scanner;
import org.junit.After;
import org.junit.Before;
import org.junit.Test;

import java.util.List;
import java.util.UUID;

import static org.assertj.core.api.Assertions.assertThat;

public class VulnerabilityScanResultProcessorTest extends PersistenceCapableTest {

    private TopologyTestDriver testDriver;
    private TestInputTopic<UUID, ScanResult> inputTopic;
    private TestOutputTopic<UUID, ScanResult> outputTopic;

    @Before
    public void setUp() {
        final var streamsBuilder = new StreamsBuilder();
        streamsBuilder
                .stream("input-topic", Consumed
                        .with(Serdes.UUID(), new KafkaProtobufSerde<>(ScanResult.parser())))
                .processValues(VulnerabilityScanResultProcessor::new)
                .to("output-topic", Produced
                        .with(Serdes.UUID(), new KafkaProtobufSerde<>(ScanResult.parser())));

        testDriver = new TopologyTestDriver(streamsBuilder.build());
        inputTopic = testDriver.createInputTopic("input-topic",
                new UUIDSerializer(), new KafkaProtobufSerializer<>());
        outputTopic = testDriver.createOutputTopic("output-topic",
                new UUIDDeserializer(), new KafkaProtobufDeserializer<>(ScanResult.parser()));
    }

    @After
    public void tearDown() {
        if (testDriver != null) {
            testDriver.close();
        }
    }

    @Test
    public void forwardCompletionEventTest() {
        final var componentUuid = UUID.randomUUID();
        final var scanToken = UUID.randomUUID().toString();
        final var scanKey = ScanKey.newBuilder().setScanToken(scanToken).setComponentUuid(componentUuid.toString()).build();
        final var scanResult = ScanResult.newBuilder()
                .setKey(scanKey)
                .setScanner(Scanner.SCANNER_NONE)
                .setStatus(ScanStatus.SCAN_STATUS_COMPLETE)
                .build();

        inputTopic.pipeInput(componentUuid, scanResult);

        assertThat(outputTopic.readRecordsToList()).satisfiesExactly(
                record -> {
                    assertThat(record.key()).isEqualTo(componentUuid);
                    assertThat(record.value()).isEqualTo(scanResult);
                }
        );
    }

    @Test
    public void dropFailedScanResultTest() {
        final var componentUuid = UUID.randomUUID();
        final var scanToken = UUID.randomUUID().toString();
        final var scanKey = ScanKey.newBuilder().setScanToken(scanToken).setComponentUuid(componentUuid.toString()).build();
        final var scanResult = ScanResult.newBuilder()
                .setKey(scanKey)
                .setScanner(Scanner.SCANNER_INTERNAL)
                .setStatus(ScanStatus.SCAN_STATUS_FAILED)
                .setFailureReason("just because")
                .build();

        inputTopic.pipeInput(componentUuid, scanResult);

        assertThat(outputTopic.getQueueSize()).isZero();
    }

    @Test
    public void dropPendingScanResultTest() {
        final var componentUuid = UUID.randomUUID();
        final var scanToken = UUID.randomUUID().toString();
        final var scanKey = ScanKey.newBuilder().setScanToken(scanToken).setComponentUuid(componentUuid.toString()).build();
        final var scanResult = ScanResult.newBuilder()
                .setKey(scanKey)
                .setScanner(Scanner.SCANNER_INTERNAL)
                .setStatus(ScanStatus.SCAN_STATUS_PENDING)
                .build();

        inputTopic.pipeInput(componentUuid, scanResult);

        assertThat(outputTopic.getQueueSize()).isZero();
    }

    @Test
    public void processSuccessfulScanResultWhenComponentDoesNotExistTest() {
        final var componentUuid = UUID.randomUUID();
        final var scanToken = UUID.randomUUID().toString();
        final var scanKey = ScanKey.newBuilder().setScanToken(scanToken).setComponentUuid(componentUuid.toString()).build();
        final var vuln = new Vulnerability();
        vuln.setVulnId("INT-001");
        vuln.setSource(Vulnerability.Source.INTERNAL);
        final var scanResult = ScanResult.newBuilder()
                .setKey(scanKey)
                .setScanner(Scanner.SCANNER_INTERNAL)
                .setStatus(ScanStatus.SCAN_STATUS_SUCCESSFUL)
                .addVulnerabilities(org.hyades.proto.vuln.v1.Vulnerability.newBuilder()
                        .setId("INT-001")
                        .setSource(Source.SOURCE_INTERNAL))
                .build();

        inputTopic.pipeInput(componentUuid, scanResult);

        assertThat(outputTopic.getQueueSize()).isZero();
    }

    @Test
    public void processSuccessfulScanResult() {
        final var project = new Project();
        project.setName("acme-app");
        project.setVersion("1.0.0");
        qm.persist(project);

        final var component = new Component();
        component.setName("acme-lib");
        component.setVersion("1.1.0");
        component.setProject(project);
        qm.persist(component);

        final var componentUuid = component.getUuid();
        final var scanToken = UUID.randomUUID().toString();
        final var scanKey = ScanKey.newBuilder().setScanToken(scanToken).setComponentUuid(componentUuid.toString()).build();
        final var vulnA = new Vulnerability();
        vulnA.setVulnId("INT-001");
        vulnA.setSource(Vulnerability.Source.INTERNAL);
        final var vulnB = new Vulnerability();
        vulnB.setVulnId("SONATYPE-002");
        vulnB.setSource(Vulnerability.Source.OSSINDEX);
        final var scanResult = ScanResult.newBuilder()
                .setKey(scanKey)
                .setScanner(Scanner.SCANNER_INTERNAL)
                .setStatus(ScanStatus.SCAN_STATUS_SUCCESSFUL)
                .addVulnerabilities(org.hyades.proto.vuln.v1.Vulnerability.newBuilder()
                        .setId(vulnA.getVulnId())
                        .setSource(Source.SOURCE_INTERNAL))
                .addVulnerabilities(org.hyades.proto.vuln.v1.Vulnerability.newBuilder()
                        .setId(vulnB.getVulnId())
                        .setSource(Source.SOURCE_OSSINDEX))
                .build();

        inputTopic.pipeInput(componentUuid, scanResult);

        assertThat(outputTopic.getQueueSize()).isZero();

        qm.getPersistenceManager().refresh(component);
        assertThat(component.getVulnerabilities()).satisfiesExactlyInAnyOrder(
                vuln -> {
                    assertThat(vuln.getVulnId()).isEqualTo("INT-001");
                    assertThat(vuln.getSource()).isEqualTo(Vulnerability.Source.INTERNAL.name());
                },
                vuln -> {
                    assertThat(vuln.getVulnId()).isEqualTo("SONATYPE-002");
                    assertThat(vuln.getSource()).isEqualTo(Vulnerability.Source.OSSINDEX.name());
                }
        );
        final List<Finding> findings = qm.getFindings(project, false);
        assertThat(findings).satisfiesExactlyInAnyOrder(
                finding -> {
                    assertThat(finding.getVulnerability().get("vulnId")).isEqualTo("INT-001");
                },
                finding -> {
                    assertThat(finding.getVulnerability().get("vulnId")).isEqualTo("SONATYPE-002");
                }
        );
    }

}