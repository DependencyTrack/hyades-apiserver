package org.dependencytrack.event;

import org.dependencytrack.model.Component;
import org.dependencytrack.model.VulnerabilityAnalysisLevel;
import org.junit.Test;

import java.util.UUID;

import static org.assertj.core.api.Assertions.assertThat;
import static org.assertj.core.api.Assertions.assertThatExceptionOfType;

public class ComponentVulnerabilityAnalysisEventTest {

    @Test
    public void testConstructor() {
        final var token = UUID.randomUUID();
        final var component = new Component();
        component.setUuid(UUID.randomUUID());
        component.setPurl("pkg:maven/foo/bar@1.2.3");
        component.setCpe("cpe:/a:acme:application:9.1.1");
        component.setSwidTagId("foobar");
        component.setInternal(true);

        final var event = new ComponentVulnerabilityAnalysisEvent(token,
                component, VulnerabilityAnalysisLevel.BOM_UPLOAD_ANALYSIS, true);

        assertThat(event.token()).isEqualTo(token);
        assertThat(event.uuid()).isEqualTo(component.getUuid());
        assertThat(event.purl()).isEqualTo("pkg:maven/foo/bar@1.2.3");
        assertThat(event.cpe()).isEqualTo("cpe:/a:acme:application:9.1.1");
        assertThat(event.swidTagId()).isEqualTo("foobar");
        assertThat(event.internal()).isTrue();
        assertThat(event.level()).isEqualTo(VulnerabilityAnalysisLevel.BOM_UPLOAD_ANALYSIS);
    }

    @Test
    public void testConstructorWhenRequiredParameterIsNull() {
        assertThatExceptionOfType(NullPointerException.class)
                .isThrownBy(() -> new ComponentVulnerabilityAnalysisEvent(null,
                        new Component(), VulnerabilityAnalysisLevel.BOM_UPLOAD_ANALYSIS, true));
        assertThatExceptionOfType(NullPointerException.class)
                .isThrownBy(() -> new ComponentVulnerabilityAnalysisEvent(UUID.randomUUID(),
                        null, VulnerabilityAnalysisLevel.BOM_UPLOAD_ANALYSIS, true));
        assertThatExceptionOfType(NullPointerException.class)
                .isThrownBy(() -> new ComponentVulnerabilityAnalysisEvent(UUID.randomUUID(),
                        new Component(), null, null));
    }

}