/*
 * This file is part of Dependency-Track.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * SPDX-License-Identifier: Apache-2.0
 * Copyright (c) OWASP Foundation. All Rights Reserved.
 */
package org.dependencytrack.resources.v1;

import alpine.server.filters.ApiFilter;
import alpine.server.filters.AuthenticationFilter;
import alpine.server.filters.AuthorizationFilter;
import org.dependencytrack.JerseyTestRule;
import org.dependencytrack.ResourceTest;
import org.dependencytrack.auth.Permissions;
import org.dependencytrack.model.VulnerabilityPolicyBundle;
import org.glassfish.jersey.server.ResourceConfig;
import org.junit.ClassRule;
import org.junit.Test;

import jakarta.ws.rs.core.Response;
import java.util.Date;

import static net.javacrumbs.jsonunit.assertj.JsonAssertions.assertThatJson;
import static org.assertj.core.api.Assertions.assertThat;

public class VulnerabilityPolicyBundleResourceTest extends ResourceTest {

    @ClassRule
    public static JerseyTestRule jersey = new JerseyTestRule(
            new ResourceConfig(VulnerabilityPolicyBundleResource.class)
                    .register(ApiFilter.class)
                    .register(AuthenticationFilter.class)
                    .register(AuthorizationFilter.class));

    @Test
    public void getVulnerabilityPolicyResourceBundle() {
        VulnerabilityPolicyBundle bundle = new VulnerabilityPolicyBundle();
        bundle.setUrl("https://repo1.maven.org/maven2/io/policy/bundle/refs/branch/pacakge.zip");
        bundle.setCreated(new Date());
        bundle.setLastSuccessfulSync(new Date());
        qm.persist(bundle);

        initializeWithPermissions(Permissions.POLICY_MANAGEMENT);

        final Response response = jersey.target(V1_VULNERABILITY_POLICY_BUNDLE)
                .request()
                .header(X_API_KEY, apiKey)
                .get();
        assertThat(response.getStatus()).isEqualTo(Response.Status.OK.getStatusCode());
        assertThatJson(getPlainTextBody(response))
                .isEqualTo("""
                        {
                            "url": "https://repo1.maven.org/maven2/io/policy/bundle/refs/branch/pacakge.zip",
                            "created": "${json-unit.any-number}",
                            "lastSuccessfulSync": "${json-unit.any-number}"
                        }
                        """);
    }

    @Test
    public void getVulnerabilityPolicyResourceBundleWhenBundleDoesNotExists() {

        initializeWithPermissions(Permissions.POLICY_MANAGEMENT);

        final Response response = jersey.target(V1_VULNERABILITY_POLICY_BUNDLE)
                .request()
                .header(X_API_KEY, apiKey)
                .get();
        assertThat(response.getStatus()).isEqualTo(Response.Status.OK.getStatusCode());
        assertThatJson(getPlainTextBody(response)).isEqualTo("""
                        """);
    }
}
