/*
 * This file is part of Dependency-Track.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * SPDX-License-Identifier: Apache-2.0
 * Copyright (c) Steve Springett. All Rights Reserved.
 */

package org.dependencytrack.resources.v1;

import alpine.server.filters.ApiFilter;
import alpine.server.filters.AuthenticationFilter;
import org.apache.http.HttpStatus;
import org.dependencytrack.model.VulnerabilityPolicy;
import org.dependencytrack.policy.vulnerability.VulnerabilityPolicyAnalysis;
import org.dependencytrack.policy.vulnerability.VulnerabilityPolicyRating;
import org.glassfish.jersey.server.ResourceConfig;
import org.glassfish.jersey.servlet.ServletContainer;
import org.glassfish.jersey.test.DeploymentContext;
import org.glassfish.jersey.test.ServletDeploymentContext;
import org.junit.Test;

import javax.json.JsonArray;
import javax.ws.rs.client.Entity;
import javax.ws.rs.core.MediaType;
import javax.ws.rs.core.Response;
import java.util.Date;
import java.util.List;

import static net.javacrumbs.jsonunit.assertj.JsonAssertions.assertThatJson;
import static org.assertj.core.api.Assertions.assertThat;

public class VulnerabilityPolicyResourceTest extends AbstractPostgresResourceTest {

    @Override
    protected DeploymentContext configureDeployment() {
        return ServletDeploymentContext.forServlet(new ServletContainer(
                new ResourceConfig(VulnerabilityPolicyResource.class)
                        .register(ApiFilter.class)
                        .register(AuthenticationFilter.class)))
                .build();
    }

    @Test
    public void testVulnerablePolicies() {
        var vulnPolicy = getVulnerabilityPolicyInstance(0);
        qm.createVulnerabilityPolicy(vulnPolicy, null);
        final Response response = target(V1_VULNERABILITY_POLICY)
                .request()
                .header(X_API_KEY, apiKey)
                .get();

        assertThat(response.getStatus()).isEqualTo(HttpStatus.SC_OK);
        assertThatJson(getPlainTextBody(response))
                .isEqualTo("""
                        [
                            {
                                "name": "name 0",
                                "description": "this is description",
                                "author": null,
                                "created": "${json-unit.any-number}",
                                "updated": null,
                                "validFrom": null,
                                "validUntil": null,
                                "conditions": [
                                    "vuln.id == \\"CVE-123\\" || vuln.aliases.exists(alias, alias.id == \\"CVE-123\\")",
                                    "component.name == \\"foo\\" && project.name == \\"bar\\" && \\"internal\\" in project.tags && !component.is_dependency_of(org.dependencytrack.policy.v1.Component{group: \\"org.springframework.boot\\"}"
                                ],
                                "analysis": {
                                    "state": "NOT_AFFECTED",
                                    "justification": "CODE_NOT_REACHABLE",
                                    "vendorResponse": null,
                                    "details": "something",
                                    "suppress": true
                                },
                                "ratings": [
                                    {
                                        "method": "CVSSV3",
                                        "severity": "HIGH",
                                        "vector": "CVSS:3.0/AV:N/AC:L/PR:L/UI:N/S:U/C:L/I:L/A:L",
                                        "score": 6.3
                                    }
                                ]
                            }
                        ]

                        """);
    }


    @Test
    public void getVulnerabilityPoliciesTest() {
        for (int i = 0; i < 1000; i++) {
            var vulnPolicy = getVulnerabilityPolicyInstance(i);
            qm.createVulnerabilityPolicy(vulnPolicy, null);
        }

        final Response response = target(V1_VULNERABILITY_POLICY)
                .request()
                .header(X_API_KEY, apiKey)
                .get();

        assertThat(response.getStatus()).isEqualTo(HttpStatus.SC_OK);
        assertThat(response.getHeaderString(TOTAL_COUNT_HEADER)).isEqualTo("1000");

        final JsonArray json = parseJsonArray(response);
        assertThat(json).isNotNull();
        assertThat(json).hasSize(100);
        assertThat(json.getJsonObject(0).getString("name")).isEqualTo("name 0");
    }

    @Test
    public void updateVulnerabilityPolicyTest() {
        var vulnPolicy = getVulnerabilityPolicyInstance(1);
        qm.createVulnerabilityPolicy(vulnPolicy, null);
        vulnPolicy.setDescription("Updated vulnerability policy");
        final Response response = target(V1_VULNERABILITY_POLICY)
                .request()
                .header(X_API_KEY, apiKey)
                .post(Entity.entity(vulnPolicy, MediaType.APPLICATION_JSON));

        assertThat(response.getStatus()).isEqualTo(HttpStatus.SC_OK);
        final var json = parseJsonObject(response);
        assertThat(json).isNotNull();
        assertThat(json.getString("name")).isEqualTo("name 1");
        assertThat(json.getString("description")).isEqualTo("Updated vulnerability policy");
    }

    @Test
    public void updateVulnerabilityPolicyNotFoundTest() {
        var vulnPolicy = getVulnerabilityPolicyInstance(1);
        vulnPolicy.setDescription("Updated vulnerability policy");
        final Response response = target(V1_VULNERABILITY_POLICY)
                .request()
                .header(X_API_KEY, apiKey)
                .post(Entity.entity(vulnPolicy, MediaType.APPLICATION_JSON));

        assertThat(response.getStatus()).isEqualTo(HttpStatus.SC_NOT_FOUND);
    }

    private static VulnerabilityPolicy getVulnerabilityPolicyInstance(int i) {
        VulnerabilityPolicy vulnPolicy = new VulnerabilityPolicy();
        vulnPolicy.setCreated(new Date());
        vulnPolicy.setConditions(new String[]{"vuln.id == \"CVE-123\" || vuln.aliases.exists(alias, alias.id == \"CVE-123\")",
                "component.name == \"foo\" && project.name == \"bar\" && \"internal\" in project.tags && !component.is_dependency_of(org.dependencytrack.policy.v1.Component{group: \"org.springframework.boot\"}"});
        vulnPolicy.setName("name " + i);
        vulnPolicy.setDescription("this is description");
        VulnerabilityPolicyAnalysis vulnerabilityPolicyAnalysis = new VulnerabilityPolicyAnalysis();
        vulnerabilityPolicyAnalysis.setState(VulnerabilityPolicyAnalysis.State.NOT_AFFECTED);
        vulnerabilityPolicyAnalysis.setJustification(VulnerabilityPolicyAnalysis.Justification.CODE_NOT_REACHABLE);
        vulnerabilityPolicyAnalysis.setDetails("something");
        vulnerabilityPolicyAnalysis.setSuppress(true);
        vulnPolicy.setAnalysis(vulnerabilityPolicyAnalysis);
        VulnerabilityPolicyRating rating = new VulnerabilityPolicyRating();
        rating.setSeverity(VulnerabilityPolicyRating.Severity.HIGH);
        rating.setMethod(VulnerabilityPolicyRating.Method.CVSSV3);
        rating.setScore(6.3);
        rating.setVector("CVSS:3.0/AV:N/AC:L/PR:L/UI:N/S:U/C:L/I:L/A:L");
        vulnPolicy.setRatings(List.of(rating));
        return vulnPolicy;
    }
}
