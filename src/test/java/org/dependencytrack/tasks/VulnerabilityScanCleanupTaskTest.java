package org.dependencytrack.tasks;

import org.dependencytrack.PersistenceCapableTest;
import org.dependencytrack.event.VulnerabilityScanCleanupEvent;
import org.dependencytrack.model.VulnerabilityScan;
import org.junit.Test;

import java.sql.Date;
import java.time.Instant;
import java.time.temporal.ChronoUnit;
import java.util.UUID;

import static org.assertj.core.api.Assertions.assertThat;

public class VulnerabilityScanCleanupTaskTest extends PersistenceCapableTest {

    @Test
    public void testInform() {
        qm.createVulnerabilityScan(VulnerabilityScan.TargetType.PROJECT, UUID.randomUUID(), "token-123", 5);
        final var scanB = qm.createVulnerabilityScan(VulnerabilityScan.TargetType.PROJECT, UUID.randomUUID(), "token-xyz", 1);
        qm.runInTransaction(() -> scanB.setUpdatedAt(Date.from(Instant.now().minus(25, ChronoUnit.HOURS))));
        final var scanC = qm.createVulnerabilityScan(VulnerabilityScan.TargetType.PROJECT, UUID.randomUUID(), "token-1y3", 3);
        qm.runInTransaction(() -> scanC.setUpdatedAt(Date.from(Instant.now().minus(13, ChronoUnit.HOURS))));

        new VulnerabilityScanCleanupTask().inform(new VulnerabilityScanCleanupEvent());

        assertThat(qm.getVulnerabilityScan("token-123")).isNotNull();
        assertThat(qm.getVulnerabilityScan("token-xyz")).isNull();
        assertThat(qm.getVulnerabilityScan("token-1y3")).isNotNull();
    }

}