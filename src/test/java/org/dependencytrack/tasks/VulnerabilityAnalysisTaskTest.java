package org.dependencytrack.tasks;

import org.dependencytrack.AbstractPostgresEnabledTest;
import org.dependencytrack.event.PortfolioVulnerabilityAnalysisEvent;
import org.dependencytrack.event.ProjectVulnerabilityAnalysisEvent;
import org.dependencytrack.event.kafka.KafkaTopics;
import org.dependencytrack.model.Component;
import org.dependencytrack.model.VulnerabilityScan;
import org.junit.Test;

import java.util.UUID;

import static org.assertj.core.api.Assertions.assertThat;
import static org.assertj.core.api.Assertions.assertThatNoException;
import static org.dependencytrack.util.KafkaTestUtil.deserializeValue;

public class VulnerabilityAnalysisTaskTest extends AbstractPostgresEnabledTest {

    @Test
    public void testPortfolioVulnerabilityAnalysis() {
        // Create an active project with one component.
        final var projectA = qm.createProject("acme-app-a", null, "1.0.0", null, null, null, true, false);
        final var componentProjectA = new Component();
        componentProjectA.setProject(projectA);
        componentProjectA.setGroup("acme");
        componentProjectA.setName("acme-lib-a");
        componentProjectA.setVersion("1.0.1");
        componentProjectA.setPurl("pkg:maven/acme/acme-lib-a@1.0.1?foo=bar");
        qm.persist(componentProjectA);

        // Create another active project with one internal(!) component.
        final var projectB = qm.createProject("acme-app-b", null, "2.0.0", null, null, null, true, false);
        final var componentProjectB = new Component();
        componentProjectB.setProject(projectB);
        componentProjectB.setGroup("acme");
        componentProjectB.setName("acme-lib-b");
        componentProjectB.setVersion("2.0.1");
        componentProjectB.setCpe("cpe:2.3:a:acme:acme-lib-b:2.0.1:*:*:*:*:*:*:*");
        componentProjectB.setInternal(true);
        qm.persist(componentProjectB);

        // Create an inactive project with one component.
        final var projectC = qm.createProject("acme-app-c", null, "3.0.0", null, null, null, false, false);
        final var componentProjectC = new Component();
        componentProjectC.setProject(projectC);
        componentProjectC.setGroup("acme");
        componentProjectC.setName("acme-lib-c");
        componentProjectC.setVersion("3.0.1");
        qm.persist(componentProjectC);

        new VulnerabilityAnalysisTask().inform(new PortfolioVulnerabilityAnalysisEvent());

        assertThat(kafkaMockProducer.history()).satisfiesExactlyInAnyOrder(
                record -> assertThat(record.topic()).isEqualTo(KafkaTopics.NOTIFICATION_PROJECT_CREATED.name()),
                record -> assertThat(record.topic()).isEqualTo(KafkaTopics.NOTIFICATION_PROJECT_CREATED.name()),
                record -> assertThat(record.topic()).isEqualTo(KafkaTopics.NOTIFICATION_PROJECT_CREATED.name()),
                record -> {
                    assertThat(record.topic()).isEqualTo(KafkaTopics.VULN_ANALYSIS_COMMAND.name());
                    final var command = deserializeValue(KafkaTopics.VULN_ANALYSIS_COMMAND, record);
                    assertThat(command.getComponent().getUuid()).isEqualTo(componentProjectB.getUuid().toString());
                    assertThat(command.getComponent().getCpe()).isEqualTo(componentProjectB.getCpe());
                    assertThat(command.getComponent().hasPurl()).isFalse();
                    assertThat(command.getComponent().hasSwidTagId()).isFalse();
                    assertThat(command.getComponent().getInternal()).isTrue();
                },
                record -> {
                    assertThat(record.topic()).isEqualTo(KafkaTopics.VULN_ANALYSIS_COMMAND.name());
                    final var command = deserializeValue(KafkaTopics.VULN_ANALYSIS_COMMAND, record);
                    assertThat(command.getComponent().getUuid()).isEqualTo(componentProjectA.getUuid().toString());
                    assertThat(command.getComponent().hasCpe()).isFalse();
                    assertThat(command.getComponent().getPurl()).isEqualTo(componentProjectA.getPurl().toString());
                    assertThat(command.getComponent().hasSwidTagId()).isFalse();
                    assertThat(command.getComponent().getInternal()).isFalse();
                }
                // Component of inactive project must not have been submitted for analysis
        );
    }

    @Test
    public void testProjectVulnerabilityAnalysis() {
        final var project = qm.createProject("acme-app-a", null, "1.0.0", null, null, null, true, false);
        final var componentA = new Component();
        componentA.setProject(project);
        componentA.setGroup("acme");
        componentA.setName("acme-lib-a");
        componentA.setVersion("1.0.1");
        componentA.setPurl("pkg:maven/acme/acme-lib-a@1.0.1?foo=bar");
        qm.persist(componentA);
        final var componentB = new Component();
        componentB.setProject(project);
        componentB.setGroup("acme");
        componentB.setName("acme-lib-b");
        componentB.setVersion("2.0.1");
        componentB.setCpe("cpe:2.3:a:acme:acme-lib-b:2.0.1:*:*:*:*:*:*:*");
        qm.persist(componentB);
        final var componentC = new Component();
        componentC.setProject(project);
        componentC.setGroup("acme");
        componentC.setName("acme-lib-c");
        componentC.setVersion("3.0.1");
        componentC.setCpe("cpe:2.3:a:acme:acme-lib-c:3.0.1:*:*:*:*:*:*:*");
        componentC.setPurl("pkg:maven/acme/acme-lib-c@3.0.1?foo=bar");
        qm.persist(componentC);

        final var event = new ProjectVulnerabilityAnalysisEvent(project.getUuid());
        new VulnerabilityAnalysisTask().inform(event);

        final VulnerabilityScan scan = qm.getVulnerabilityScan(event.getChainIdentifier().toString());
        assertThat(scan).isNotNull();
        assertThat(scan.getTargetType()).isEqualTo(VulnerabilityScan.TargetType.PROJECT);
        assertThat(scan.getTargetIdentifier()).isEqualTo(project.getUuid());
        assertThat(scan.getExpectedResults()).isEqualTo(3);
        assertThat(scan.getReceivedResults()).isEqualTo(0);
        assertThat(scan.getStatus()).isEqualTo(VulnerabilityScan.Status.IN_PROGRESS);
        assertThat(scan.getStartedAt()).isNotNull();
        assertThat(scan.getUpdatedAt()).isNotNull();

        assertThat(kafkaMockProducer.history()).satisfiesExactlyInAnyOrder(
                record -> assertThat(record.topic()).isEqualTo(KafkaTopics.NOTIFICATION_PROJECT_CREATED.name()),
                record -> {
                    assertThat(record.topic()).isEqualTo(KafkaTopics.VULN_ANALYSIS_COMMAND.name());
                    final var command = deserializeValue(KafkaTopics.VULN_ANALYSIS_COMMAND, record);
                    assertThat(command.getComponent().getUuid()).isEqualTo(componentC.getUuid().toString());
                    assertThat(command.getComponent().getCpe()).isEqualTo(componentC.getCpe());
                    assertThat(command.getComponent().getPurl()).isEqualTo(componentC.getPurl().toString());
                    assertThat(command.getComponent().hasSwidTagId()).isFalse();
                    assertThat(command.getComponent().getInternal()).isFalse();
                },
                record -> {
                    assertThat(record.topic()).isEqualTo(KafkaTopics.VULN_ANALYSIS_COMMAND.name());
                    final var command = deserializeValue(KafkaTopics.VULN_ANALYSIS_COMMAND, record);
                    assertThat(command.getComponent().getUuid()).isEqualTo(componentB.getUuid().toString());
                    assertThat(command.getComponent().getCpe()).isEqualTo(componentB.getCpe());
                    assertThat(command.getComponent().hasPurl()).isFalse();
                    assertThat(command.getComponent().hasSwidTagId()).isFalse();
                    assertThat(command.getComponent().getInternal()).isFalse();
                },
                record -> {
                    assertThat(record.topic()).isEqualTo(KafkaTopics.VULN_ANALYSIS_COMMAND.name());
                    final var command = deserializeValue(KafkaTopics.VULN_ANALYSIS_COMMAND, record);
                    assertThat(command.getComponent().getUuid()).isEqualTo(componentA.getUuid().toString());
                    assertThat(command.getComponent().hasCpe()).isFalse();
                    assertThat(command.getComponent().getPurl()).isEqualTo(componentA.getPurl().toString());
                    assertThat(command.getComponent().hasSwidTagId()).isFalse();
                    assertThat(command.getComponent().getInternal()).isFalse();
                }
        );
    }

    @Test
    public void testProjectVulnerabilityAnalysisWithNoComponents() {
        final var project = qm.createProject("acme-app-a", null, "1.0.0", null, null, null, true, false);

        final var event = new ProjectVulnerabilityAnalysisEvent(project.getUuid());
        new VulnerabilityAnalysisTask().inform(event);

        final VulnerabilityScan scan = qm.getVulnerabilityScan(event.getChainIdentifier().toString());
        assertThat(scan).isNull();

        assertThat(kafkaMockProducer.history()).satisfiesExactly(
                record -> assertThat(record.topic()).isEqualTo(KafkaTopics.NOTIFICATION_PROJECT_CREATED.name())
                // Project does not have any components so nothing should've been submitted for analysis
        );
    }

    @Test
    public void testProjectVulnerabilityAnalysisWithInactiveProject() {
        final var project = qm.createProject("acme-app-a", null, "1.0.0", null, null, null, false, false);
        final var componentA = new Component();
        componentA.setProject(project);
        componentA.setName("acme-lib-a");
        componentA.setVersion("1.0.1");
        qm.persist(componentA);

        new VulnerabilityAnalysisTask().inform(new ProjectVulnerabilityAnalysisEvent(project.getUuid()));

        assertThat(kafkaMockProducer.history()).satisfiesExactly(
                record -> assertThat(record.topic()).isEqualTo(KafkaTopics.NOTIFICATION_PROJECT_CREATED.name())
                // Component of inactive project must not have been submitted for analysis
        );
    }

    @Test
    public void testProjectVulnerabilityAnalysisWithNonExistentProject() {
        assertThatNoException()
                .isThrownBy(() -> new VulnerabilityAnalysisTask().inform(new ProjectVulnerabilityAnalysisEvent(UUID.randomUUID())));
    }

}