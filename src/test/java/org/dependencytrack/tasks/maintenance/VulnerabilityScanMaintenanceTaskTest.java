/*
 * This file is part of Dependency-Track.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * SPDX-License-Identifier: Apache-2.0
 * Copyright (c) OWASP Foundation. All Rights Reserved.
 */
package org.dependencytrack.tasks.maintenance;

import org.dependencytrack.PersistenceCapableTest;
import org.dependencytrack.event.maintenance.VulnerabilityScanMaintenanceEvent;
import org.dependencytrack.model.VulnerabilityScan;
import org.junit.Test;

import java.time.Instant;
import java.time.temporal.ChronoUnit;
import java.util.Date;
import java.util.UUID;

import static org.assertj.core.api.Assertions.assertThat;
import static org.assertj.core.api.Assertions.assertThatNoException;
import static org.dependencytrack.model.ConfigPropertyConstants.MAINTENANCE_VULNERABILITY_SCAN_RETENTION_HOURS;

public class VulnerabilityScanMaintenanceTaskTest extends PersistenceCapableTest {

    @Test
    public void test() {
        qm.createConfigProperty(
                MAINTENANCE_VULNERABILITY_SCAN_RETENTION_HOURS.getGroupName(),
                MAINTENANCE_VULNERABILITY_SCAN_RETENTION_HOURS.getPropertyName(),
                MAINTENANCE_VULNERABILITY_SCAN_RETENTION_HOURS.getDefaultPropertyValue(),
                MAINTENANCE_VULNERABILITY_SCAN_RETENTION_HOURS.getPropertyType(),
                MAINTENANCE_VULNERABILITY_SCAN_RETENTION_HOURS.getDescription());

        final var tokenA = UUID.randomUUID();
        final var tokenB = UUID.randomUUID();
        final var tokenC = UUID.randomUUID();

        qm.createVulnerabilityScan(VulnerabilityScan.TargetType.PROJECT, UUID.randomUUID(), tokenA, 5);
        final var scanB = qm.createVulnerabilityScan(VulnerabilityScan.TargetType.PROJECT, UUID.randomUUID(), tokenB, 1);
        qm.runInTransaction(() -> scanB.setUpdatedAt(Date.from(Instant.now().minus(25, ChronoUnit.HOURS))));
        final var scanC = qm.createVulnerabilityScan(VulnerabilityScan.TargetType.PROJECT, UUID.randomUUID(), tokenC, 3);
        qm.runInTransaction(() -> scanC.setUpdatedAt(Date.from(Instant.now().minus(13, ChronoUnit.HOURS))));

        final var task = new VulnerabilityScanMaintenanceTask();
        assertThatNoException().isThrownBy(() -> task.inform(new VulnerabilityScanMaintenanceEvent()));

        assertThat(qm.getVulnerabilityScan(tokenA)).isNotNull();
        assertThat(qm.getVulnerabilityScan(tokenB)).isNull();
        assertThat(qm.getVulnerabilityScan(tokenC)).isNotNull();
    }

}