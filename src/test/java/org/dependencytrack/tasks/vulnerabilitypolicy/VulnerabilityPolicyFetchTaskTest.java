package org.dependencytrack.tasks.vulnerabilitypolicy;

import com.github.tomakehurst.wiremock.client.WireMock;
import com.github.tomakehurst.wiremock.junit.WireMockRule;
import org.apache.http.HttpStatus;
import org.dependencytrack.AbstractPostgresEnabledTest;
import org.dependencytrack.event.VulnerabilityPolicyFetchEvent;
import org.junit.After;
import org.junit.Rule;
import org.junit.Test;
import org.junit.contrib.java.lang.system.EnvironmentVariables;
import org.junit.jupiter.api.Assertions;
import org.mockito.MockedStatic;
import org.mockito.Mockito;
import org.projectnessie.cel.tools.ScriptCreateException;

import java.io.IOException;
import java.nio.file.Paths;

import static com.github.tomakehurst.wiremock.core.WireMockConfiguration.options;

public class VulnerabilityPolicyFetchTaskTest extends AbstractPostgresEnabledTest {

    @Rule
    public EnvironmentVariables environmentVariables = new EnvironmentVariables();

    @Rule
    public WireMockRule wireMockRule = new WireMockRule(options().dynamicPort());

    private static MockedStatic<BlobStorageAccessFactory> blobStorageAccessFactory;

    @After
    public void afterTest() {
        environmentVariables.clear("VULNERABILITY_POLICY_ANALYSIS_ENABLED", "VULNERABILITY_POLICY_BUNDLE_SOURCE_TYPE");
    }

    @Test
    public void testInform() throws IOException, ScriptCreateException {
        environmentVariables.set("VULNERABILITY_POLICY_ANALYSIS_ENABLED", "true");
        environmentVariables.set("VULNERABILITY_POLICY_BUNDLE_SOURCE_TYPE", "NGINX");
        BlobStorageAccessHandler handler = Mockito.mock(NginxStorageHandler.class);
        blobStorageAccessFactory = Mockito.mockStatic(BlobStorageAccessFactory.class);
        blobStorageAccessFactory.when(BlobStorageAccessFactory::createStorageHandler).thenReturn(handler);
        Mockito.when(handler.verifyDownloadNeeded()).thenReturn(false);
        new VulnerabilityPolicyFetchTask(handler).inform(new VulnerabilityPolicyFetchEvent());
        Mockito.verify(handler, Mockito.never()).downloadAndparseZippedContent();
        blobStorageAccessFactory.close();
    }

    @Test
    public void testInformPolicyAnalysisNotEnabled() throws IOException, ScriptCreateException {
        environmentVariables.set("VULNERABILITY_POLICY_ANALYSIS_ENABLED", "false");
        environmentVariables.set("VULNERABILITY_POLICY_BUNDLE_SOURCE_TYPE", "NGINX");
        BlobStorageAccessHandler handler = Mockito.mock(NginxStorageHandler.class);
        blobStorageAccessFactory = Mockito.mockStatic(BlobStorageAccessFactory.class);
        blobStorageAccessFactory.when(BlobStorageAccessFactory::createStorageHandler).thenReturn(handler);
        Mockito.when(handler.verifyDownloadNeeded()).thenReturn(false);
        new VulnerabilityPolicyFetchTask(handler).inform(new VulnerabilityPolicyFetchEvent());
        Mockito.verify(handler, Mockito.never()).downloadAndparseZippedContent();
        Mockito.verify(handler, Mockito.never()).verifyDownloadNeeded();
        blobStorageAccessFactory.close();
    }

    @Test
    public void testInformIOException() throws IOException, ScriptCreateException {
        environmentVariables.set("VULNERABILITY_POLICY_ANALYSIS_ENABLED", "true");
        environmentVariables.set("VULNERABILITY_POLICY_BUNDLE_SOURCE_TYPE", "NGINX");
        BlobStorageAccessHandler handler = Mockito.mock(NginxStorageHandler.class);
        blobStorageAccessFactory = Mockito.mockStatic(BlobStorageAccessFactory.class);
        blobStorageAccessFactory.when(BlobStorageAccessFactory::createStorageHandler).thenReturn(handler);
        Mockito.doThrow(IOException.class).when(handler).downloadAndparseZippedContent();
        new VulnerabilityPolicyFetchTask(handler).inform(new VulnerabilityPolicyFetchEvent());
        Mockito.verify(handler, Mockito.times(0)).downloadAndparseZippedContent();
        Mockito.verify(handler, Mockito.times(1)).verifyDownloadNeeded();
        blobStorageAccessFactory.close();
    }

    @Test
    public void testInformSuccess() throws IOException {
        environmentVariables.set("VULNERABILITY_POLICY_ANALYSIS_ENABLED", "true");
        environmentVariables.set("VULNERABILITY_POLICY_BUNDLE_SOURCE_TYPE", "NGINX");
        environmentVariables.set("VULNERABILITY_POLICY_BUNDLE_URL", wireMockRule.baseUrl() + "/bundles/test.zip");
        WireMock.stubFor(WireMock.head(WireMock.urlPathMatching("/bundles/test.zip"))
                .willReturn(WireMock.aResponse().withStatus(HttpStatus.SC_OK)
                        .withHeader("ETag", "65708810-3a5")));
        WireMock.stubFor(WireMock.get(WireMock.urlPathMatching("/bundles/test.zip"))
                .willReturn(WireMock.aResponse().withBody(java.nio.file.Files.readAllBytes(Paths.get("src/test/resources/unit/tasks/vulnerabilitypolicy/test.zip")))
                        .withStatus(HttpStatus.SC_OK)));
        new VulnerabilityPolicyFetchTask().inform(new VulnerabilityPolicyFetchEvent());
        Assertions.assertEquals(2, qm.getAllVulnerabilityPolicies().size());
    }

    @Test
    public void testInformParseFailure() throws IOException {
        environmentVariables.set("VULNERABILITY_POLICY_ANALYSIS_ENABLED", "true");
        environmentVariables.set("VULNERABILITY_POLICY_BUNDLE_SOURCE_TYPE", "NGINX");
        environmentVariables.set("VULNERABILITY_POLICY_BUNDLE_URL", wireMockRule.baseUrl() + "/bundles/test.zip");
        WireMock.stubFor(WireMock.head(WireMock.urlPathMatching("/bundles/test.zip"))
                .willReturn(WireMock.aResponse().withStatus(HttpStatus.SC_OK)
                        .withHeader("ETag", "65708810-3a5")));
        WireMock.stubFor(WireMock.get(WireMock.urlPathMatching("/bundles/test.zip"))
                .willReturn(WireMock.aResponse().withBody(java.nio.file.Files.readAllBytes(Paths.get("src/test/resources/unit/tasks/vulnerabilitypolicy/test.zip")))
                        .withStatus(HttpStatus.SC_OK)));
        new VulnerabilityPolicyFetchTask().inform(new VulnerabilityPolicyFetchEvent());
        Assertions.assertEquals(2, qm.getAllVulnerabilityPolicies().size());
    }

    @Test
    public void invalidPolicyConditionTest() throws IOException, ScriptCreateException {
        environmentVariables.set("VULNERABILITY_POLICY_ANALYSIS_ENABLED", "true");
        environmentVariables.set("VULNERABILITY_POLICY_BUNDLE_SOURCE_TYPE", "NGINX");
        environmentVariables.set("VULNERABILITY_POLICY_BUNDLE_URL", wireMockRule.baseUrl() + "/bundles/sampleInvalid.yaml.zip");
        WireMock.stubFor(WireMock.head(WireMock.urlPathMatching("/bundles/sampleInvalid.yaml.zip"))
                .willReturn(WireMock.aResponse().withStatus(HttpStatus.SC_OK)
                        .withHeader("ETag", "65708810-3a5")));
        BlobStorageAccessHandler nginxStorageHandler = Mockito.mock(NginxStorageHandler.class);
        WireMock.stubFor(WireMock.get(WireMock.urlPathMatching("/bundles/sampleInvalid.yaml.zip"))
                .willReturn(WireMock.aResponse().withBody(java.nio.file.Files.readAllBytes(Paths.get("src/test/resources/unit/tasks/vulnerabilitypolicy/sampleInvalid.yaml.zip")))
                        .withStatus(HttpStatus.SC_OK)));
        new VulnerabilityPolicyFetchTask(nginxStorageHandler).inform(new VulnerabilityPolicyFetchEvent());
        Mockito.verify(nginxStorageHandler, Mockito.times(0)).downloadAndparseZippedContent();
        Mockito.verify(nginxStorageHandler, Mockito.times(1)).verifyDownloadNeeded();
        Mockito.verify(nginxStorageHandler, Mockito.times(0)).saveParsedVulnerabilities(
                Mockito.any(), Mockito.anyList(), Mockito.anyList(), Mockito.anyList());

    }
}
