package org.dependencytrack.tasks.vulnerabilitypolicy;

import com.github.tomakehurst.wiremock.client.WireMock;
import com.github.tomakehurst.wiremock.junit.WireMockRule;
import org.apache.commons.io.IOUtils;
import org.apache.commons.lang3.RandomStringUtils;
import org.apache.http.HttpStatus;
import org.dependencytrack.AbstractPostgresEnabledTest;
import org.dependencytrack.event.VulnerabilityPolicyFetchEvent;
import org.dependencytrack.model.WorkflowState;
import org.dependencytrack.model.WorkflowStatus;
import org.dependencytrack.model.WorkflowStep;
import org.dependencytrack.policy.vulnerability.VulnerabilityPolicyAnalysis;
import org.dependencytrack.tasks.vulnerabilitypolicy.blobstorage.BlobStorageAccessFactory;
import org.dependencytrack.tasks.vulnerabilitypolicy.blobstorage.BlobStorageAccessHandler;
import org.dependencytrack.tasks.vulnerabilitypolicy.blobstorage.NginxStorageHandler;
import org.junit.After;
import org.junit.Rule;
import org.junit.Test;
import org.junit.contrib.java.lang.system.EnvironmentVariables;
import org.junit.jupiter.api.Assertions;
import org.mockito.MockedStatic;
import org.mockito.Mockito;

import javax.naming.OperationNotSupportedException;
import java.io.IOException;
import java.io.OutputStream;
import java.io.StringReader;
import java.nio.charset.StandardCharsets;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.Collection;
import java.util.Date;
import java.util.List;
import java.util.zip.ZipEntry;
import java.util.zip.ZipInputStream;
import java.util.zip.ZipOutputStream;

import static com.github.tomakehurst.wiremock.core.WireMockConfiguration.options;
import static org.apache.commons.io.IOUtils.resourceToByteArray;
import static org.assertj.core.api.Assertions.assertThat;

public class VulnerabilityPolicyFetchTaskTest extends AbstractPostgresEnabledTest {

    @Rule
    public EnvironmentVariables environmentVariables = new EnvironmentVariables();

    @Rule
    public WireMockRule wireMockRule = new WireMockRule(options().dynamicPort());

    private static MockedStatic<BlobStorageAccessFactory> blobStorageAccessFactory;

    @After
    public void afterTest() {
        environmentVariables.clear("VULNERABILITY_POLICY_ANALYSIS_ENABLED"
                , "VULNERABILITY_POLICY_BUNDLE_SOURCE_TYPE");
    }

    @Test
    public void testInform() throws Exception {
        environmentVariables.set("VULNERABILITY_POLICY_ANALYSIS_ENABLED", "true");
        environmentVariables.set("VULNERABILITY_POLICY_BUNDLE_SOURCE_TYPE", "NGINX");
        BlobStorageAccessHandler handler = Mockito.mock(NginxStorageHandler.class);
        blobStorageAccessFactory = Mockito.mockStatic(BlobStorageAccessFactory.class);
        blobStorageAccessFactory.when(BlobStorageAccessFactory::createStorageHandler).thenReturn(handler);
        Mockito.when(handler.verifyDownloadNeeded()).thenReturn(false);
        new VulnerabilityPolicyFetchTask(handler).inform(new VulnerabilityPolicyFetchEvent());
        final ZipInputStream zipInputStream = Mockito.verify(handler, Mockito.never()).downloadZippedContent();
        blobStorageAccessFactory.close();

    }

    @Test
    public void testInformPolicyAnalysisNotEnabled() throws Exception {
        environmentVariables.set("VULNERABILITY_POLICY_ANALYSIS_ENABLED", "false");
        environmentVariables.set("VULNERABILITY_POLICY_BUNDLE_SOURCE_TYPE", "NGINX");
        BlobStorageAccessHandler handler = Mockito.mock(NginxStorageHandler.class);
        blobStorageAccessFactory = Mockito.mockStatic(BlobStorageAccessFactory.class);
        blobStorageAccessFactory.when(BlobStorageAccessFactory::createStorageHandler).thenReturn(handler);
        Mockito.when(handler.verifyDownloadNeeded()).thenReturn(false);
        new VulnerabilityPolicyFetchTask(handler).inform(new VulnerabilityPolicyFetchEvent());
        final ZipInputStream zipInputStream = Mockito.verify(handler, Mockito.never()).downloadZippedContent();
        Mockito.verify(handler, Mockito.never()).verifyDownloadNeeded();
        blobStorageAccessFactory.close();

    }

    @Test
    public void testInformIOException() throws Exception {
        environmentVariables.set("VULNERABILITY_POLICY_ANALYSIS_ENABLED", "true");
        environmentVariables.set("VULNERABILITY_POLICY_BUNDLE_SOURCE_TYPE", "NGINX");
        BlobStorageAccessHandler handler = Mockito.mock(NginxStorageHandler.class);
        blobStorageAccessFactory = Mockito.mockStatic(BlobStorageAccessFactory.class);
        blobStorageAccessFactory.when(BlobStorageAccessFactory::createStorageHandler).thenReturn(handler);
        final ZipInputStream zipInputStream = Mockito.doThrow(IOException.class).when(handler).downloadZippedContent();
        new VulnerabilityPolicyFetchTask(handler).inform(new VulnerabilityPolicyFetchEvent());
        final ZipInputStream zipInputStream1 = Mockito.verify(handler, Mockito.times(0)).downloadZippedContent();
        Mockito.verify(handler, Mockito.times(1)).verifyDownloadNeeded();
        blobStorageAccessFactory.close();

    }

    @Test
    public void testInformSuccess() throws IOException, OperationNotSupportedException {
        environmentVariables.set("VULNERABILITY_POLICY_ANALYSIS_ENABLED", "true");
        environmentVariables.set("VULNERABILITY_POLICY_BUNDLE_SOURCE_TYPE", "NGINX");
        environmentVariables.set("VULNERABILITY_POLICY_BUNDLE_URL", wireMockRule.baseUrl() + "/bundles/test.zip");
        WireMock.stubFor(WireMock.head(WireMock.urlPathMatching("/bundles/test.zip"))
                .willReturn(WireMock.aResponse().withStatus(HttpStatus.SC_OK)
                        .withHeader("ETag", "65708810-3a5")));
        WireMock.stubFor(WireMock.get(WireMock.urlPathMatching("/bundles/test.zip"))
                .willReturn(WireMock.aResponse().withBody(java.nio.file.Files.readAllBytes(Paths.get("src/test/resources/unit/tasks/vulnerabilitypolicy/test.zip")))
                        .withStatus(HttpStatus.SC_OK)));
        new VulnerabilityPolicyFetchTask().inform(new VulnerabilityPolicyFetchEvent());
        Assertions.assertEquals(2, qm.getAllVulnerabilityPolicies().size());
    }

    @Test
    public void testInformParseFailure() throws IOException, OperationNotSupportedException {
        environmentVariables.set("VULNERABILITY_POLICY_ANALYSIS_ENABLED", "true");
        environmentVariables.set("VULNERABILITY_POLICY_BUNDLE_SOURCE_TYPE", "NGINX");
        environmentVariables.set("VULNERABILITY_POLICY_BUNDLE_URL", wireMockRule.baseUrl() + "/bundles/test.zip");
        WireMock.stubFor(WireMock.head(WireMock.urlPathMatching("/bundles/test.zip"))
                .willReturn(WireMock.aResponse().withStatus(HttpStatus.SC_OK)
                        .withHeader("ETag", "65708810-3a5")));
        WireMock.stubFor(WireMock.get(WireMock.urlPathMatching("/bundles/test.zip"))
                .willReturn(WireMock.aResponse().withBody(java.nio.file.Files.readAllBytes(Paths.get("src/test/resources/unit/tasks/vulnerabilitypolicy/test.zip")))
                        .withStatus(HttpStatus.SC_OK)));
        new VulnerabilityPolicyFetchTask().inform(new VulnerabilityPolicyFetchEvent());
        Assertions.assertEquals(2, qm.getAllVulnerabilityPolicies().size());
    }

    @Test
    public void invalidPolicyConditionTest() throws Exception {
        environmentVariables.set("VULNERABILITY_POLICY_ANALYSIS_ENABLED", "true");
        environmentVariables.set("VULNERABILITY_POLICY_BUNDLE_SOURCE_TYPE", "NGINX");
        environmentVariables.set("VULNERABILITY_POLICY_BUNDLE_URL", wireMockRule.baseUrl() + "/bundles/sampleInvalid.yaml.zip");
        WireMock.stubFor(WireMock.head(WireMock.urlPathMatching("/bundles/sampleInvalid.yaml.zip"))
                .willReturn(WireMock.aResponse().withStatus(HttpStatus.SC_OK)
                        .withHeader("ETag", "65708810-3a5")));
        BlobStorageAccessHandler nginxStorageHandler = new NginxStorageHandler();
        WireMock.stubFor(WireMock.get(WireMock.urlPathMatching("/bundles/sampleInvalid.yaml.zip"))
                .willReturn(WireMock.aResponse().withBody(resourceToByteArray("/unit/tasks/vulnerabilitypolicy/sampleInvalid.yaml.zip"))
                        .withStatus(HttpStatus.SC_OK)));
        new VulnerabilityPolicyFetchTask(nginxStorageHandler).inform(new VulnerabilityPolicyFetchEvent());
        WireMock.verify(WireMock.headRequestedFor(WireMock.urlPathEqualTo("/bundles/sampleInvalid.yaml.zip")));
        WireMock.verify(WireMock.getRequestedFor(WireMock.urlPathEqualTo("/bundles/sampleInvalid.yaml.zip")));
        assertThat(qm.getAllVulnerabilityPolicies()).isEmpty();
    }

    @Test
    public void testInformWithValidPolicy() throws Exception {
        environmentVariables.set("VULNERABILITY_POLICY_ANALYSIS_ENABLED", "true");
        environmentVariables.set("VULNERABILITY_POLICY_BUNDLE_SOURCE_TYPE", "NGINX");
        environmentVariables.set("VULNERABILITY_POLICY_BUNDLE_URL", wireMockRule.url("/bundles/bundle.zip"));

        final var workflowState = new WorkflowState();
        workflowState.setToken(VulnerabilityPolicyFetchEvent.CHAIN_IDENTIFIER);
        workflowState.setStep(WorkflowStep.POLICY_BUNDLE_SYNC);
        workflowState.setStatus(WorkflowStatus.PENDING);
        workflowState.setUpdatedAt(new Date());
        qm.persist(workflowState);

        final Path bundlePath = createPolicyBundle(List.of("""
                apiVersion: v1.0
                type: Vulnerability Policy
                name: Valid
                conditions:
                - component.name == "foo"
                analysis:
                  state: IN_TRIAGE
                """));

        WireMock.stubFor(WireMock.head(WireMock.urlPathEqualTo("/bundles/bundle.zip"))
                .willReturn(WireMock.aResponse()
                        .withStatus(200)
                        .withHeader("ETag", "65708810-3a5")));
        WireMock.stubFor(WireMock.get(WireMock.urlPathEqualTo("/bundles/bundle.zip"))
                .willReturn(WireMock.aResponse()
                        .withStatus(200)
                        .withBody(Files.readAllBytes(bundlePath))));

        new VulnerabilityPolicyFetchTask(new NginxStorageHandler()).inform(new VulnerabilityPolicyFetchEvent());

        WireMock.verify(WireMock.headRequestedFor(WireMock.urlPathEqualTo("/bundles/bundle.zip")));
        WireMock.verify(WireMock.getRequestedFor(WireMock.urlPathEqualTo("/bundles/bundle.zip")));

        assertThat(qm.getAllVulnerabilityPolicies()).satisfiesExactly(policy -> {
            assertThat(policy.getName()).isEqualTo("Valid");
            assertThat(policy.getConditions()).containsOnly("component.name == \"foo\"");
            assertThat(policy.getAnalysis()).isNotNull();
            assertThat(policy.getAnalysis().getState()).isEqualTo(VulnerabilityPolicyAnalysis.State.IN_TRIAGE);
        });

        qm.getPersistenceManager().refresh(workflowState);
        assertThat(workflowState.getStatus()).isEqualTo(WorkflowStatus.COMPLETED);
        assertThat(workflowState.getFailureReason()).isNull();
    }

    @Test
    public void testInformWithOneValidAndOneInvalidPolicy() throws Exception {
        environmentVariables.set("VULNERABILITY_POLICY_ANALYSIS_ENABLED", "true");
        environmentVariables.set("VULNERABILITY_POLICY_BUNDLE_SOURCE_TYPE", "NGINX");
        environmentVariables.set("VULNERABILITY_POLICY_BUNDLE_URL", wireMockRule.url("/bundles/bundle.zip"));

        final var workflowState = new WorkflowState();
        workflowState.setToken(VulnerabilityPolicyFetchEvent.CHAIN_IDENTIFIER);
        workflowState.setStep(WorkflowStep.POLICY_BUNDLE_SYNC);
        workflowState.setStatus(WorkflowStatus.PENDING);
        workflowState.setUpdatedAt(new Date());
        qm.persist(workflowState);

        final var policyValid = """
                apiVersion: v1.0
                type: Vulnerability Policy
                name: Valid
                conditions:
                - component.name == "foo"
                analysis:
                  state: IN_TRIAGE
                """;
        final var policyInvalid = """
                apiVersion: v1.0
                type: Vulnerability Policy
                name: Example2
                description: Foo bar
                author: Jane Doe
                created: 2023-11-22T06:06:05Z
                updated: 2023-11-23T07:07:17Z
                validFrom: 2024-01-01T00:00:00Z
                validUntil: 2024-01-01T00:00:00Z
                conditions:
                  - vuln.id == "CVE-125" || vuln.aliases.exists(alias, alias.id == "CVE-123")
                  - |-
                    vuln.id == "CVE-156" || vuln.aliases.exists(alias, alias.id == "CVE-156")
                analysis:
                  state: test
                  justification: CODE_NOT_REACHABLE
                  details: Because foo bar baz
                  suppress: true
                  vendorResponse: CAN_NOT_FIX
                ratings:
                  - method: CVSSV3
                    vector: CVSS:3.0/AV:N/AC:L/PR:L/UI:N/S:U/C:L/I:L/A:L
                    severity: MEDIUM
                    score: 6.3
                  - method: CVSSV2
                    vector: CVSS:2.0/AV:N/AC:L/PR:L/UI:N/S:U/C:L/I:L/A:L
                    severity: HIGH
                    score: 8.3
                """;
        final Path bundlePath = createPolicyBundle(List.of(policyValid, policyInvalid));

        WireMock.stubFor(WireMock.head(WireMock.urlPathEqualTo("/bundles/bundle.zip"))
                .willReturn(WireMock.aResponse()
                        .withStatus(200)
                        .withHeader("ETag", "65708810-3a5")));
        WireMock.stubFor(WireMock.get(WireMock.urlPathEqualTo("/bundles/bundle.zip"))
                .willReturn(WireMock.aResponse()
                        .withStatus(200)
                        .withBody(Files.readAllBytes(bundlePath))));

        new VulnerabilityPolicyFetchTask(new NginxStorageHandler()).inform(new VulnerabilityPolicyFetchEvent());

        WireMock.verify(WireMock.headRequestedFor(WireMock.urlPathEqualTo("/bundles/bundle.zip")));
        WireMock.verify(WireMock.getRequestedFor(WireMock.urlPathEqualTo("/bundles/bundle.zip")));

        assertThat(qm.getAllVulnerabilityPolicies()).isEmpty();

        // TODO: Failure reason should include information about validation errors per policy.
        //   The current message is quite generic and not helpful at all to end users.
        qm.getPersistenceManager().refresh(workflowState);
        assertThat(workflowState.getStatus()).isEqualTo(WorkflowStatus.FAILED);
        assertThat(workflowState.getFailureReason()).isEqualTo("""
                Will not update policies in datastore because 1/2 policy definitions failed to validate. \
                Policy bundles can only be applied when all policy definitions within them are valid.""");
    }

    private static Path createPolicyBundle(final Collection<String> yamlPolicies) throws Exception {
        final Path policyBundlePath = Files.createTempFile("hyades-apiserver-", ".zip");
        try (final OutputStream fileOutputStream = Files.newOutputStream(policyBundlePath);
             final var zipOutputStream = new ZipOutputStream(fileOutputStream)) {
            for (final String yamlPolicy : yamlPolicies) {
                zipOutputStream.putNextEntry(new ZipEntry("%s.yaml".formatted(RandomStringUtils.random(8))));
                IOUtils.copy(new StringReader(yamlPolicy), zipOutputStream, StandardCharsets.UTF_8);
            }
        }

        return policyBundlePath;
    }

}
