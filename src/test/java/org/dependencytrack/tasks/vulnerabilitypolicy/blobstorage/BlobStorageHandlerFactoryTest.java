package org.dependencytrack.tasks.vulnerabilitypolicy.blobstorage;

import org.dependencytrack.common.ConfigKey;
import org.junit.After;
import org.junit.Rule;
import org.junit.Test;
import org.junit.contrib.java.lang.system.EnvironmentVariables;
import org.junit.jupiter.api.Assertions;

import javax.naming.OperationNotSupportedException;

import static org.assertj.core.api.Assertions.assertThat;


public class BlobStorageHandlerFactoryTest {

    @Rule
    public EnvironmentVariables environmentVariables = new EnvironmentVariables();

    @After
    public void afterTest() {
        environmentVariables.clear(ConfigKey.VULNERABILITY_POLICY_BUNDLE_SOURCE_TYPE.getPropertyName());
    }

    @Test
    public void createBlobStorageHandlerForGenericTest() {
        environmentVariables.set("VULNERABILITY_POLICY_BUNDLE_SOURCE_TYPE", "test");
        Assertions.assertThrows(OperationNotSupportedException.class, BlobStorageAccessFactory::createStorageHandler);

    }

    @Test
    public void createBlobStorageHandlerForS3Test() throws OperationNotSupportedException {
        environmentVariables.set("VULNERABILITY_POLICY_BUNDLE_SOURCE_TYPE", "s3");
        BlobStorageAccessHandler handler = BlobStorageAccessFactory.createStorageHandler();
        assertThat(handler).isInstanceOf(S3StorageHandler.class);

    }

    @Test
    public void createBlobStorageHandlerForNginxTest() throws OperationNotSupportedException {
        environmentVariables.set("VULNERABILITY_POLICY_BUNDLE_SOURCE_TYPE", "nginx");
        BlobStorageAccessHandler handler = BlobStorageAccessFactory.createStorageHandler();
        assertThat(handler).isInstanceOf(NginxStorageHandler.class);

    }
}
