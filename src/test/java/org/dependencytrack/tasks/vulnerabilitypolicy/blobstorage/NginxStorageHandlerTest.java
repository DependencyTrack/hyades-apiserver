package org.dependencytrack.tasks.vulnerabilitypolicy.blobstorage;

import com.github.tomakehurst.wiremock.client.WireMock;
import com.github.tomakehurst.wiremock.junit.WireMockRule;
import org.apache.http.HttpStatus;
import org.assertj.core.api.Assertions;
import org.dependencytrack.PersistenceCapableTest;
import org.dependencytrack.model.ConfigPropertyConstants;
import org.junit.After;
import org.junit.Before;
import org.junit.Rule;
import org.junit.Test;
import org.junit.contrib.java.lang.system.EnvironmentVariables;

import java.io.IOException;

import static com.github.tomakehurst.wiremock.core.WireMockConfiguration.options;
import static org.assertj.core.api.Assertions.assertThat;
import static org.junit.Assert.assertThrows;

public class NginxStorageHandlerTest extends PersistenceCapableTest {

    @Rule
    public WireMockRule wireMockRule = new WireMockRule(options().dynamicPort());

    @Rule
    public EnvironmentVariables environmentVariables = new EnvironmentVariables();

    @Before
    public void beforeTest() {
        environmentVariables.set("VULNERABILITY_POLICY_BUNDLE_URL", wireMockRule.baseUrl() + "/bundles/test.zip");
        environmentVariables.set("VULNERABILITY_POLICY_BUNDLE_SOURCE_TYPE", "NGINX");
    }

    @After
    public void afterTest() {
        environmentVariables.clear("VULNERABILITY_POLICY_BUNDLE_URL",
                "VULNERABILITY_POLICY_BUNDLE_SOURCE_TYPE", "VULNERABILITY_POLICY_BUNDLE_AUTH_USERNAME",
                "VULNERABILITY_POLICY_BUNDLE_AUTH_PASSWORD",
                "VULNERABILITY_POLICY_BUNDLE_AUTH_BEARER_TOKEN");
    }

    @Test
    public void getHeaderWithUsername() {
        environmentVariables.set("VULNERABILITY_POLICY_BUNDLE_AUTH_USERNAME", "test");
        environmentVariables.set("VULNERABILITY_POLICY_BUNDLE_AUTH_PASSWORD", "test");
        NginxStorageHandler nginxStorageHandler = new NginxStorageHandler();
        String result = nginxStorageHandler.getAuthorizationHeader(nginxStorageHandler.username, nginxStorageHandler.password, nginxStorageHandler.bearerToken);
        Assertions.assertThat(result).isEqualTo("Basic dGVzdDp0ZXN0");
    }

    @Test
    public void getHeaderWithBearerToken() {
        environmentVariables.set("VULNERABILITY_POLICY_BUNDLE_AUTH_BEARER_TOKEN", "test");
        NginxStorageHandler nginxStorageHandler = new NginxStorageHandler();
        String result = nginxStorageHandler.getAuthorizationHeader(nginxStorageHandler.username, nginxStorageHandler.password, nginxStorageHandler.bearerToken);
        Assertions.assertThat(result).isEqualTo("Bearer test");
    }

    @Test
    public void getHeaderWithBearerTokenAndUserName() {
        environmentVariables.set("VULNERABILITY_POLICY_BUNDLE_AUTH_BEARER_TOKEN", "test");
        environmentVariables.set("VULNERABILITY_POLICY_BUNDLE_AUTH_USERNAME", "test");
        environmentVariables.set("VULNERABILITY_POLICY_BUNDLE_AUTH_PASSWORD", "test");
        NginxStorageHandler nginxStorageHandler = new NginxStorageHandler();
        String result = nginxStorageHandler.getAuthorizationHeader(nginxStorageHandler.username, nginxStorageHandler.password, nginxStorageHandler.bearerToken);
        Assertions.assertThat(result).isEqualTo("Basic dGVzdDp0ZXN0");
    }

    @Test
    public void testVerifyDownloadNeeded() throws IOException {
        WireMock.stubFor(WireMock.head(WireMock.urlPathMatching("/bundles/test.zip"))
                .willReturn(WireMock.aResponse().withStatus(HttpStatus.SC_OK)
                        .withHeader("ETag", "65708810-3a5")));
        NginxStorageHandler nginxStorageHandler = new NginxStorageHandler();
        assertThat(nginxStorageHandler.verifyDownloadNeeded()).isTrue();

    }

    @Test
    public void testVerifyDownloadNeededWithLastModifiedNull() throws IOException {
        if (qm.getConfigProperty(ConfigPropertyConstants.VULNERABILITY_POLICY_FILE_LAST_MODIFIED_HASH.getGroupName(),
                ConfigPropertyConstants.VULNERABILITY_POLICY_FILE_LAST_MODIFIED_HASH.getPropertyName()) == null) {
            qm.createConfigProperty(ConfigPropertyConstants.VULNERABILITY_POLICY_FILE_LAST_MODIFIED_HASH.getGroupName(),
                    ConfigPropertyConstants.VULNERABILITY_POLICY_FILE_LAST_MODIFIED_HASH.getPropertyName(),
                    null,
                    ConfigPropertyConstants.VULNERABILITY_POLICY_FILE_LAST_MODIFIED_HASH.getPropertyType(),
                    ConfigPropertyConstants.VULNERABILITY_POLICY_FILE_LAST_MODIFIED_HASH.getDescription());
        } else {
            qm.getConfigProperty(ConfigPropertyConstants.VULNERABILITY_POLICY_FILE_LAST_MODIFIED_HASH.getGroupName(),
                    ConfigPropertyConstants.VULNERABILITY_POLICY_FILE_LAST_MODIFIED_HASH.getPropertyName()).setPropertyValue(null);
        }
        WireMock.stubFor(WireMock.head(WireMock.urlPathMatching("/bundles/test.zip"))
                .willReturn(WireMock.aResponse().withStatus(HttpStatus.SC_OK)
                        .withHeader("Last-Modified", "Wed, 06 Dec 2023 14:41:20 GMT")
                        .withHeader("ETag", "65708810-3a5")));
        NginxStorageHandler nginxStorageHandler = new NginxStorageHandler();
        assertThat(nginxStorageHandler.verifyDownloadNeeded()).isTrue();

    }

    @Test
    public void testVerifyDownloadNeededWithLastModifiedSameAsUpstream() throws IOException {
        if (qm.getConfigProperty(ConfigPropertyConstants.VULNERABILITY_POLICY_FILE_LAST_MODIFIED_HASH.getGroupName(),
                ConfigPropertyConstants.VULNERABILITY_POLICY_FILE_LAST_MODIFIED_HASH.getPropertyName()) == null) {
            qm.createConfigProperty(ConfigPropertyConstants.VULNERABILITY_POLICY_FILE_LAST_MODIFIED_HASH.getGroupName(),
                    ConfigPropertyConstants.VULNERABILITY_POLICY_FILE_LAST_MODIFIED_HASH.getPropertyName(),
                    "65708810-3a5",
                    ConfigPropertyConstants.VULNERABILITY_POLICY_FILE_LAST_MODIFIED_HASH.getPropertyType(),
                    ConfigPropertyConstants.VULNERABILITY_POLICY_FILE_LAST_MODIFIED_HASH.getDescription());
        } else {
            qm.getConfigProperty(ConfigPropertyConstants.VULNERABILITY_POLICY_FILE_LAST_MODIFIED_HASH.getGroupName(),
                    ConfigPropertyConstants.VULNERABILITY_POLICY_FILE_LAST_MODIFIED_HASH.getPropertyName()).setPropertyValue("65708810-3a5");
        }
        WireMock.stubFor(WireMock.head(WireMock.urlPathMatching("/bundles/test.zip"))
                .willReturn(WireMock.aResponse().withStatus(HttpStatus.SC_OK)
                        .withHeader("Last-Modified", "Wed, 06 Dec 2023 14:41:20 GMT")
                        .withHeader("ETag", "65708810-3a5")));
        NginxStorageHandler nginxStorageHandler = new NginxStorageHandler();
        assertThat(nginxStorageHandler.verifyDownloadNeeded()).isFalse();

    }

    @Test
    public void testVerifyDownloadNeededEndPointReturningNon200Status() {
        WireMock.stubFor(WireMock.head(WireMock.urlPathMatching("/bundles/test.zip"))
                .willReturn(WireMock.aResponse()
                        .withStatus(HttpStatus.SC_NOT_FOUND)));
        NginxStorageHandler nginxStorageHandler = new NginxStorageHandler();
        assertThrows(IOException.class, nginxStorageHandler::verifyDownloadNeeded);
    }
}
