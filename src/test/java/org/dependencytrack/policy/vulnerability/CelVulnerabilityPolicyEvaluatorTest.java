package org.dependencytrack.policy.vulnerability;

import alpine.server.cache.AbstractCacheManager;
import org.dependencytrack.PersistenceCapableTest;
import org.dependencytrack.model.Component;
import org.dependencytrack.model.Project;
import org.dependencytrack.model.Vulnerability;
import org.dependencytrack.policy.cel.CelPolicyScriptHost;
import org.junit.Test;

import java.util.List;
import java.util.Map;
import java.util.UUID;

import static org.assertj.core.api.Assertions.assertThat;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.doReturn;
import static org.mockito.Mockito.mock;

public class CelVulnerabilityPolicyEvaluatorTest extends PersistenceCapableTest {

    @Test
    public void test() {
        final var cacheManager = new CelVulnerabilityPolicyCacheManager();
        final var scriptHost = new CelPolicyScriptHost(cacheManager);
        final var policyProviderMock = mock(VulnerabilityPolicyProvider.class);
        final var policyEvaluator = new CelVulnerabilityPolicyEvaluator(policyProviderMock, scriptHost, cacheManager);

        final var policy = new VulnerabilityPolicy();
        policy.setName("foo");
        policy.setConditions(List.of("""
                project.version == "kek" && component.purl.matches("lol")
                """));
        doReturn(List.of(policy)).when(policyProviderMock).getApplicablePolicies(any(Project.class));

        final var project = new Project();
        project.setName("foo");
        project.setVersion("bar");
        qm.persist(project);

        final var component = new Component();
        component.setProject(project);
        component.setName("baz");
        component.setVersion("qux");
        qm.persist(component);

        final var vuln = new Vulnerability();
        vuln.setVulnId("CVE-123");
        vuln.setSource(Vulnerability.Source.NVD);
        qm.persist(vuln);

        final Map<UUID, VulnerabilityPolicy> result = policyEvaluator.evaluate(project, component, List.of(vuln));
        assertThat(result).isEmpty();
    }

}