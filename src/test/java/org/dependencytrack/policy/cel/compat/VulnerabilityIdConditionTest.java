package org.dependencytrack.policy.cel.compat;

import junitparams.JUnitParamsRunner;
import junitparams.Parameters;
import org.dependencytrack.AbstractPostgresEnabledTest;
import org.dependencytrack.model.AnalyzerIdentity;
import org.dependencytrack.model.Component;
import org.dependencytrack.model.Policy;
import org.dependencytrack.model.PolicyCondition;
import org.dependencytrack.model.Project;
import org.dependencytrack.model.Vulnerability;
import org.dependencytrack.policy.cel.CelPolicyEngine;
import org.junit.Test;
import org.junit.runner.RunWith;

import static org.assertj.core.api.Assertions.assertThat;

@RunWith(JUnitParamsRunner.class)
public class VulnerabilityIdConditionTest extends AbstractPostgresEnabledTest {

    private Object[] parameters() {
        return new Object[]{
                // IS with exact match
                new Object[]{PolicyCondition.Operator.IS, "CVE-123", "CVE-123", true},
                // IS with regex match (regex is not supported by this condition)
                new Object[]{PolicyCondition.Operator.IS, "CVE-[0-9]+", "CVE-123", false},
                // IS with no match
                new Object[]{PolicyCondition.Operator.IS, "CVE-123", "CVE-666", false},
                // IS_NOT with no match
                new Object[]{PolicyCondition.Operator.IS_NOT, "CVE-123", "CVE-666", true},
                // IS_NOT with exact match
                new Object[]{PolicyCondition.Operator.IS_NOT, "CVE-123", "CVE-123", false},
                // IS with quotes
                new Object[]{PolicyCondition.Operator.IS, "\"CVE-123", "\"CVE-123", true}
        };
    }

    @Test
    @Parameters(method = "parameters")
    public void testCondition(final PolicyCondition.Operator operator, final String conditionVulnId, final String actualVulnId, final boolean expectViolation) {
        final Policy policy = qm.createPolicy("policy", Policy.Operator.ANY, Policy.ViolationState.INFO);
        qm.createPolicyCondition(policy, PolicyCondition.Subject.VULNERABILITY_ID, operator, conditionVulnId);

        final var project = new Project();
        project.setName("acme-app");
        qm.persist(project);

        final var component = new Component();
        component.setProject(project);
        component.setName("acme-lib");
        qm.persist(component);

        final var vulnA = new Vulnerability();
        vulnA.setVulnId(actualVulnId);
        vulnA.setSource(Vulnerability.Source.INTERNAL);
        qm.persist(vulnA);

        final var vulnB = new Vulnerability();
        vulnB.setVulnId("INT-666");
        vulnB.setSource(Vulnerability.Source.INTERNAL);
        qm.persist(vulnB);

        qm.addVulnerability(vulnA, component, AnalyzerIdentity.INTERNAL_ANALYZER);
        qm.addVulnerability(vulnB, component, AnalyzerIdentity.INTERNAL_ANALYZER);

        new CelPolicyEngine().evaluateProject(project.getUuid());
        if (expectViolation) {
            assertThat(qm.getAllPolicyViolations(component)).hasSize(1);
        } else {
            assertThat(qm.getAllPolicyViolations(component)).isEmpty();
        }
    }

}
