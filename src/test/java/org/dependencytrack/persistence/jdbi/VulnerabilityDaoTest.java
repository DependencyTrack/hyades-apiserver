/*
 * This file is part of Dependency-Track.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * SPDX-License-Identifier: Apache-2.0
 * Copyright (c) OWASP Foundation. All Rights Reserved.
 */
package org.dependencytrack.persistence.jdbi;

import org.dependencytrack.PersistenceCapableTest;
import org.dependencytrack.model.AnalyzerIdentity;
import org.dependencytrack.model.Component;
import org.dependencytrack.model.Vulnerability;
import org.jdbi.v3.core.Handle;
import org.junit.After;
import org.junit.Before;
import org.junit.Test;

import java.util.Date;

import static org.assertj.core.api.Assertions.assertThat;
import static org.dependencytrack.model.Vulnerability.Source.NVD;
import static org.dependencytrack.persistence.jdbi.JdbiFactory.openJdbiHandle;

public class VulnerabilityDaoTest extends PersistenceCapableTest {

    private Handle jdbiHandle;
    private VulnerabilityDao vulnerabilityDao;

    @Before
    public void before() throws Exception {
        super.before();
        jdbiHandle = openJdbiHandle();
        vulnerabilityDao = jdbiHandle.attach(VulnerabilityDao.class);
    }

    @After
    public void after() {
        if (jdbiHandle != null) {
            jdbiHandle.close();
        }
        super.after();
    }

    @Test
    public void testProjectHasVulnerabilities() {
        final var project = qm.createProject("acme-app", "Description 1", "1.0.0", null, null, null, null, false);

        final var component = new Component();
        component.setProject(project);
        component.setName("acme-lib");
        component.setVersion("2.0.0");
        qm.persist(component);

        final var vuln = new Vulnerability();
        vuln.setVulnId("INT-123");
        vuln.setSource(NVD);
        qm.persist(vuln);

        assertThat(vulnerabilityDao.hasVulnerabilities(project.getId())).isFalse();
        qm.addVulnerability(vuln, component, AnalyzerIdentity.INTERNAL_ANALYZER, "Vuln1", "http://vuln.com/vuln1", new Date());
        assertThat(vulnerabilityDao.hasVulnerabilities(project.getId())).isTrue();
    }

    @Test
    public void testGetVulnerabilityId() {
        final var vuln = new Vulnerability();
        vuln.setVulnId("INT-123");
        vuln.setSource(NVD);
        assertThat(vulnerabilityDao.getVulnerabilityId(vuln.getUuid())).isEqualTo(null);
        qm.persist(vuln);
        assertThat(vulnerabilityDao.getVulnerabilityId(vuln.getUuid())).isEqualTo(vuln.getId());
    }
}