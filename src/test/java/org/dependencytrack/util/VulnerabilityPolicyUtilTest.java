package org.dependencytrack.util;

import org.dependencytrack.PersistenceCapableTest;
import org.dependencytrack.model.ConfigPropertyConstants;
import org.dependencytrack.persistence.jdbi.VulnerabilityPolicyDao;
import org.dependencytrack.policy.vulnerability.VulnerabilityPolicy;
import org.junit.Test;
import org.junit.jupiter.api.Assertions;
import org.projectnessie.cel.tools.ScriptCreateException;
import org.projectnessie.cel.tools.ScriptException;

import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import static org.dependencytrack.persistence.jdbi.JdbiFactory.jdbi;
import static org.junit.Assert.assertEquals;

public class VulnerabilityPolicyUtilTest extends PersistenceCapableTest {

    @Test
    public void testParseVulnerabilityPolicy() throws ScriptCreateException, IOException {
        String out = """
                apiVersion: v1.0
                type: Vulnerability Policy
                name: Example2
                description: Foo bar
                author: Jane Doe
                validFrom: 2024-01-01T00:00:00Z
                validUntil: 2024-01-01T00:00:00Z
                conditions:
                  - vuln.id == "CVE-125" || vuln.aliases.exists(alias, alias.id == "CVE-123")
                  - |-
                    vuln.id == "CVE-156" || vuln.aliases.exists(alias, alias.id == "CVE-156")
                analysis:
                  state: NOT_AFFECTED
                  justification: CODE_NOT_REACHABLE
                  details: Because foo bar baz
                  suppress: true
                  vendorResponse: CAN_NOT_FIX
                ratings:
                  - method: CVSSV3
                    vector: CVSS:3.0/AV:N/AC:L/PR:L/UI:N/S:U/C:L/I:L/A:L
                    severity: MEDIUM
                    score: 6.3
                  - method: CVSSV2
                    vector: CVSS:2.0/AV:N/AC:L/PR:L/UI:N/S:U/C:L/I:L/A:L
                    severity: HIGH
                    score: 8.3""";
        List<VulnerabilityPolicy> createVulnerabilityPolicyList = new ArrayList<>();
        List<VulnerabilityPolicy> updateVulnerabilityPolicyList = new ArrayList<>();
        List<String> policyNames = new ArrayList<>();
        VulnerabilityPolicyUtil.parseVulnerabilityPolicy(out, createVulnerabilityPolicyList,
                updateVulnerabilityPolicyList, policyNames);
        Assertions.assertEquals(1, createVulnerabilityPolicyList.size());
    }

    @Test
    public void testParseVulnerabilityPolicyInvalid() throws ScriptCreateException, IOException {
        String out = """
                apiVersion: v1.0
                type: Vulnerability Policy
                name: Example2
                description: Foo bar
                author: Jane Doe
                validFrom: 2024-01-01T00:00:00Z
                validUntil: 2024-01-01T00:00:00Z
                conditions:
                  - vuln.id == "CVE-125" | vuln.aliases.exists(alias, alias.id == "CVE-123")
                  - |-
                    vuln.id == "CVE-156" | vuln.aliases.exists(alias, alias.id == "CVE-156")
                analysis:
                  state: NOT_AFFECTED
                  justification: CODE_NOT_REACHABLE
                  details: Because foo bar baz
                  suppress: true
                  vendorResponse: CAN_NOT_FIX
                ratings:
                  - method: CVSSV3
                    vector: CVSS:3.0/AV:N/AC:L/PR:L/UI:N/S:U/C:L/I:L/A:L
                    severity: MEDIUM
                    score: 6.3
                  - method: CVSSV2
                    vector: CVSS:2.0/AV:N/AC:L/PR:L/UI:N/S:U/C:L/I:L/A:L
                    severity: HIGH
                    score: 8.3""";
        List<VulnerabilityPolicy> createVulnerabilityPolicyList = new ArrayList<>();
        List<VulnerabilityPolicy> updateVulnerabilityPolicyList = new ArrayList<>();
        List<String> policyNames = new ArrayList<>();

        Assertions.assertThrows(ScriptException.class, () -> VulnerabilityPolicyUtil.parseVulnerabilityPolicy(out, createVulnerabilityPolicyList,
                updateVulnerabilityPolicyList, policyNames));
    }

    @Test
    public void testmatchWithHashConfigPropertyNull() {
        Assertions.assertTrue(VulnerabilityPolicyUtil.matchWithHashConfigProperty("test"));
    }

    @Test
    public void testmatchWithHashConfigPropertyDifferentValue() {
        qm.createConfigProperty(ConfigPropertyConstants.VULNERABILITY_POLICY_FILE_LAST_MODIFIED_HASH.getGroupName(),
                ConfigPropertyConstants.VULNERABILITY_POLICY_FILE_LAST_MODIFIED_HASH.getPropertyName(),
                "test1",
                ConfigPropertyConstants.VULNERABILITY_POLICY_FILE_LAST_MODIFIED_HASH.getPropertyType(),
                ConfigPropertyConstants.VULNERABILITY_POLICY_FILE_LAST_MODIFIED_HASH.getDescription());
        Assertions.assertTrue(VulnerabilityPolicyUtil.matchWithHashConfigProperty("test"));
    }

    @Test
    public void testmatchWithEtagNullValue() {
        qm.createConfigProperty(ConfigPropertyConstants.VULNERABILITY_POLICY_FILE_LAST_MODIFIED_HASH.getGroupName(),
                ConfigPropertyConstants.VULNERABILITY_POLICY_FILE_LAST_MODIFIED_HASH.getPropertyName(),
                "test1",
                ConfigPropertyConstants.VULNERABILITY_POLICY_FILE_LAST_MODIFIED_HASH.getPropertyType(),
                ConfigPropertyConstants.VULNERABILITY_POLICY_FILE_LAST_MODIFIED_HASH.getDescription());
        Assertions.assertTrue(VulnerabilityPolicyUtil.matchWithHashConfigProperty(null));
    }

    @Test
    public void testmatchWithHashConfigPropertySameValue() {
        qm.createConfigProperty(ConfigPropertyConstants.VULNERABILITY_POLICY_FILE_LAST_MODIFIED_HASH.getGroupName(),
                ConfigPropertyConstants.VULNERABILITY_POLICY_FILE_LAST_MODIFIED_HASH.getPropertyName(),
                "test",
                ConfigPropertyConstants.VULNERABILITY_POLICY_FILE_LAST_MODIFIED_HASH.getPropertyType(),
                ConfigPropertyConstants.VULNERABILITY_POLICY_FILE_LAST_MODIFIED_HASH.getDescription());
        Assertions.assertFalse(VulnerabilityPolicyUtil.matchWithHashConfigProperty("test"));
    }

    @Test
    public void testmatchWithHashConfigPropertyNullValue() {
        qm.createConfigProperty(ConfigPropertyConstants.VULNERABILITY_POLICY_FILE_LAST_MODIFIED_HASH.getGroupName(),
                ConfigPropertyConstants.VULNERABILITY_POLICY_FILE_LAST_MODIFIED_HASH.getPropertyName(),
                null,
                ConfigPropertyConstants.VULNERABILITY_POLICY_FILE_LAST_MODIFIED_HASH.getPropertyType(),
                ConfigPropertyConstants.VULNERABILITY_POLICY_FILE_LAST_MODIFIED_HASH.getDescription());
        Assertions.assertTrue(VulnerabilityPolicyUtil.matchWithHashConfigProperty("test"));
    }

    @Test
    public void testSaveParsedVulnerabilities() throws ScriptCreateException, IOException {
        String out = """
                apiVersion: v1.0
                type: Vulnerability Policy
                name: Example2
                description: Foo bar
                author: Jane Doe
                validFrom: 2024-01-01T00:00:00Z
                validUntil: 2024-01-01T00:00:00Z
                conditions:
                  - vuln.id == "CVE-125" || vuln.aliases.exists(alias, alias.id == "CVE-123")
                  - |-
                    vuln.id == "CVE-156" || vuln.aliases.exists(alias, alias.id == "CVE-156")
                analysis:
                  state: NOT_AFFECTED
                  justification: CODE_NOT_REACHABLE
                  details: Because foo bar baz
                  suppress: true
                  vendorResponse: CAN_NOT_FIX
                ratings:
                  - method: CVSSV3
                    vector: CVSS:3.0/AV:N/AC:L/PR:L/UI:N/S:U/C:L/I:L/A:L
                    severity: MEDIUM
                    score: 6.3
                  - method: CVSSV2
                    vector: CVSS:2.0/AV:N/AC:L/PR:L/UI:N/S:U/C:L/I:L/A:L
                    severity: HIGH
                    score: 8.3""";
        List<VulnerabilityPolicy> createVulnerabilityPolicyList = new ArrayList<>();
        List<VulnerabilityPolicy> updateVulnerabilityPolicyList = new ArrayList<>();
        List<String> policyNames = new ArrayList<>();
        VulnerabilityPolicyUtil.parseVulnerabilityPolicy(out, createVulnerabilityPolicyList,
                updateVulnerabilityPolicyList, policyNames);
        VulnerabilityPolicyUtil.saveParsedVulnerabilities(qm, createVulnerabilityPolicyList, updateVulnerabilityPolicyList, policyNames);
        Assertions.assertEquals(1, jdbi(qm).withExtension(VulnerabilityPolicyDao.class, VulnerabilityPolicyDao::getAll).size());
    }

    @Test
    public void updateVulnerabilityPolicyTest() throws ScriptCreateException, IOException {
        String out = """
                apiVersion: v1.0
                type: Vulnerability Policy
                name: Example2
                description: Foo bar
                author: Jane Doe
                validFrom: 2024-01-01T00:00:00Z
                validUntil: 2024-01-01T00:00:00Z
                conditions:
                  - vuln.id == "CVE-125" || vuln.aliases.exists(alias, alias.id == "CVE-123")
                  - |-
                    vuln.id == "CVE-156" || vuln.aliases.exists(alias, alias.id == "CVE-156")
                analysis:
                  state: NOT_AFFECTED
                  justification: CODE_NOT_REACHABLE
                  details: Because foo bar baz
                  suppress: true
                  vendorResponse: CAN_NOT_FIX
                ratings:
                  - method: CVSSV3
                    vector: CVSS:3.0/AV:N/AC:L/PR:L/UI:N/S:U/C:L/I:L/A:L
                    severity: MEDIUM
                    score: 6.3
                  - method: CVSSV2
                    vector: CVSS:2.0/AV:N/AC:L/PR:L/UI:N/S:U/C:L/I:L/A:L
                    severity: HIGH
                    score: 8.3""";
        var createVulnerabilityPolicyList = new ArrayList<VulnerabilityPolicy>();
        var updateVulnerabilityPolicyList = new ArrayList<VulnerabilityPolicy>();
        var policyNames = new ArrayList<String>();
        VulnerabilityPolicyUtil.parseVulnerabilityPolicy(out, createVulnerabilityPolicyList, updateVulnerabilityPolicyList, policyNames);
        VulnerabilityPolicyUtil.saveParsedVulnerabilities(qm, createVulnerabilityPolicyList, updateVulnerabilityPolicyList, policyNames);
        createVulnerabilityPolicyList = new ArrayList<>();
        policyNames.add("Example2");
        out = """
                apiVersion: v1.0
                type: Vulnerability Policy
                name: Example2
                description: Foo bar
                author: Jane Doe
                validFrom: 2024-01-01T00:00:00Z
                validUntil: 2024-01-01T00:00:00Z
                conditions:
                  - vuln.id == "CVE-125" || vuln.aliases.exists(alias, alias.id == "CVE-123")
                  - |-
                    vuln.id == "CVE-156" || vuln.aliases.exists(alias, alias.id == "CVE-156")
                analysis:
                  state: NOT_AFFECTED
                  justification: CODE_NOT_REACHABLE
                  details: Because foo bar baz
                  suppress: true
                  vendorResponse: UPDATE
                ratings:
                  - method: CVSSV3
                    vector: CVSS:3.0/AV:N/AC:L/PR:L/UI:N/S:U/C:L/I:L/A:L
                    severity: MEDIUM
                    score: 7.5
                  - method: CVSSV2
                    vector: CVSS:2.0/AV:N/AC:L/PR:L/UI:N/S:U/C:L/I:L/A:L
                    severity: HIGH
                    score: 8.3""";
        VulnerabilityPolicyUtil.parseVulnerabilityPolicy(out, createVulnerabilityPolicyList, updateVulnerabilityPolicyList, policyNames);
        VulnerabilityPolicyUtil.saveParsedVulnerabilities(qm, createVulnerabilityPolicyList, updateVulnerabilityPolicyList, policyNames);
        assertEquals(1, updateVulnerabilityPolicyList.size());
        assertEquals(Double.valueOf(7.5), jdbi(qm).withExtension(VulnerabilityPolicyDao.class, dao -> dao.getByName("Example2")).getRatings().get(0).getScore());
    }

    @Test
    public void deleteVulnerabilityPolicyTest() throws ScriptCreateException, IOException {
        String out = """
                apiVersion: v1.0
                type: Vulnerability Policy
                name: Example2
                description: Foo bar
                author: Jane Doe
                validFrom: 2024-01-01T00:00:00Z
                validUntil: 2024-01-01T00:00:00Z
                conditions:
                  - vuln.id == "CVE-125" || vuln.aliases.exists(alias, alias.id == "CVE-123")
                  - |-
                    vuln.id == "CVE-156" || vuln.aliases.exists(alias, alias.id == "CVE-156")
                analysis:
                  state: NOT_AFFECTED
                  justification: CODE_NOT_REACHABLE
                  details: Because foo bar baz
                  suppress: true
                  vendorResponse: CAN_NOT_FIX
                ratings:
                  - method: CVSSV3
                    vector: CVSS:3.0/AV:N/AC:L/PR:L/UI:N/S:U/C:L/I:L/A:L
                    severity: MEDIUM
                    score: 6.3
                  - method: CVSSV2
                    vector: CVSS:2.0/AV:N/AC:L/PR:L/UI:N/S:U/C:L/I:L/A:L
                    severity: HIGH
                    score: 8.3""";
        String out1 = """
                apiVersion: v1.0
                type: Vulnerability Policy
                name: Example
                description: Foo bar
                author: Jane Doe
                validFrom: 2024-01-01T00:00:00Z
                validUntil: 2024-01-01T00:00:00Z
                conditions:
                  - vuln.id == "CVE-125" || vuln.aliases.exists(alias, alias.id == "CVE-123")
                  - |-
                    vuln.id == "CVE-156" || vuln.aliases.exists(alias, alias.id == "CVE-156")
                analysis:
                  state: NOT_AFFECTED
                  justification: CODE_NOT_REACHABLE
                  details: Because foo bar baz
                  suppress: true
                  vendorResponse: CAN_NOT_FIX
                ratings:
                  - method: CVSSV3
                    vector: CVSS:3.0/AV:N/AC:L/PR:L/UI:N/S:U/C:L/I:L/A:L
                    severity: MEDIUM
                    score: 6.3
                  - method: CVSSV2
                    vector: CVSS:2.0/AV:N/AC:L/PR:L/UI:N/S:U/C:L/I:L/A:L
                    severity: HIGH
                    score: 8.3""";
        var createVulnerabilityPolicyList = new ArrayList<VulnerabilityPolicy>();
        var updateVulnerabilityPolicyList = new ArrayList<VulnerabilityPolicy>();
        var policyNames = new ArrayList<String>();
        VulnerabilityPolicyUtil.parseVulnerabilityPolicy(out, createVulnerabilityPolicyList, updateVulnerabilityPolicyList, policyNames);
        VulnerabilityPolicyUtil.saveParsedVulnerabilities(qm, createVulnerabilityPolicyList, updateVulnerabilityPolicyList, policyNames);
        createVulnerabilityPolicyList = new ArrayList<>();
        VulnerabilityPolicyUtil.parseVulnerabilityPolicy(out1, createVulnerabilityPolicyList, updateVulnerabilityPolicyList, policyNames);
        VulnerabilityPolicyUtil.saveParsedVulnerabilities(qm, createVulnerabilityPolicyList, updateVulnerabilityPolicyList, policyNames);
        policyNames.add("Example2");
        policyNames.add("Example");
        out = """
                apiVersion: v1.0
                type: Vulnerability Policy
                name: Example2
                description: Foo bar
                author: Jane Doe
                validFrom: 2024-01-01T00:00:00Z
                validUntil: 2024-01-01T00:00:00Z
                conditions:
                  - vuln.id == "CVE-125" || vuln.aliases.exists(alias, alias.id == "CVE-123")
                  - |-
                    vuln.id == "CVE-156" || vuln.aliases.exists(alias, alias.id == "CVE-156")
                analysis:
                  state: NOT_AFFECTED
                  justification: CODE_NOT_REACHABLE
                  details: Because foo bar baz
                  suppress: true
                  vendorResponse: UPDATE
                ratings:
                  - method: CVSSV3
                    vector: CVSS:3.0/AV:N/AC:L/PR:L/UI:N/S:U/C:L/I:L/A:L
                    severity: MEDIUM
                    score: 7.5
                  - method: CVSSV2
                    vector: CVSS:2.0/AV:N/AC:L/PR:L/UI:N/S:U/C:L/I:L/A:L
                    severity: HIGH
                    score: 8.3""";
        createVulnerabilityPolicyList = new ArrayList<>();
        VulnerabilityPolicyUtil.parseVulnerabilityPolicy(out, createVulnerabilityPolicyList, updateVulnerabilityPolicyList, policyNames);
        VulnerabilityPolicyUtil.saveParsedVulnerabilities(qm, createVulnerabilityPolicyList, updateVulnerabilityPolicyList, policyNames);
        assertEquals(1, jdbi(qm).withExtension(VulnerabilityPolicyDao.class, VulnerabilityPolicyDao::getAll).size());
        assertEquals(Double.valueOf(7.5), jdbi(qm).withExtension(VulnerabilityPolicyDao.class, dao -> dao.getByName("Example2")).getRatings().get(0).getScore());
    }

}
