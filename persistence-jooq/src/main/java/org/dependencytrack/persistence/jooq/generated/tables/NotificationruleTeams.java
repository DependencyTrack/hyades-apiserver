/*
 * This file is generated by jOOQ.
 */
package org.dependencytrack.persistence.jooq.generated.tables;


import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.dependencytrack.persistence.jooq.generated.Keys;
import org.dependencytrack.persistence.jooq.generated.Public;
import org.dependencytrack.persistence.jooq.generated.tables.Notificationrule.NotificationrulePath;
import org.dependencytrack.persistence.jooq.generated.tables.Team.TeamPath;
import org.dependencytrack.persistence.jooq.generated.tables.records.NotificationruleTeamsRecord;
import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class NotificationruleTeams extends TableImpl<NotificationruleTeamsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.NOTIFICATIONRULE_TEAMS</code>
     */
    public static final NotificationruleTeams NOTIFICATIONRULE_TEAMS = new NotificationruleTeams();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<NotificationruleTeamsRecord> getRecordType() {
        return NotificationruleTeamsRecord.class;
    }

    /**
     * The column
     * <code>public.NOTIFICATIONRULE_TEAMS.NOTIFICATIONRULE_ID</code>.
     */
    public final TableField<NotificationruleTeamsRecord, Long> NOTIFICATIONRULE_ID = createField(DSL.name("NOTIFICATIONRULE_ID"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.NOTIFICATIONRULE_TEAMS.TEAM_ID</code>.
     */
    public final TableField<NotificationruleTeamsRecord, Long> TEAM_ID = createField(DSL.name("TEAM_ID"), SQLDataType.BIGINT.nullable(false), this, "");

    private NotificationruleTeams(Name alias, Table<NotificationruleTeamsRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private NotificationruleTeams(Name alias, Table<NotificationruleTeamsRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.NOTIFICATIONRULE_TEAMS</code> table
     * reference
     */
    public NotificationruleTeams(String alias) {
        this(DSL.name(alias), NOTIFICATIONRULE_TEAMS);
    }

    /**
     * Create an aliased <code>public.NOTIFICATIONRULE_TEAMS</code> table
     * reference
     */
    public NotificationruleTeams(Name alias) {
        this(alias, NOTIFICATIONRULE_TEAMS);
    }

    /**
     * Create a <code>public.NOTIFICATIONRULE_TEAMS</code> table reference
     */
    public NotificationruleTeams() {
        this(DSL.name("NOTIFICATIONRULE_TEAMS"), null);
    }

    public <O extends Record> NotificationruleTeams(Table<O> path, ForeignKey<O, NotificationruleTeamsRecord> childPath, InverseForeignKey<O, NotificationruleTeamsRecord> parentPath) {
        super(path, childPath, parentPath, NOTIFICATIONRULE_TEAMS);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class NotificationruleTeamsPath extends NotificationruleTeams implements Path<NotificationruleTeamsRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> NotificationruleTeamsPath(Table<O> path, ForeignKey<O, NotificationruleTeamsRecord> childPath, InverseForeignKey<O, NotificationruleTeamsRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private NotificationruleTeamsPath(Name alias, Table<NotificationruleTeamsRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public NotificationruleTeamsPath as(String alias) {
            return new NotificationruleTeamsPath(DSL.name(alias), this);
        }

        @Override
        public NotificationruleTeamsPath as(Name alias) {
            return new NotificationruleTeamsPath(alias, this);
        }

        @Override
        public NotificationruleTeamsPath as(Table<?> alias) {
            return new NotificationruleTeamsPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public UniqueKey<NotificationruleTeamsRecord> getPrimaryKey() {
        return Keys.NOTIFICATIONRULE_TEAMS_PK;
    }

    @Override
    public List<ForeignKey<NotificationruleTeamsRecord, ?>> getReferences() {
        return Arrays.asList(Keys.NOTIFICATIONRULE_TEAMS__NOTIFICATIONRULE_TEAMS_NOTIFICATIONRULE_FK, Keys.NOTIFICATIONRULE_TEAMS__NOTIFICATIONRULE_TEAMS_TEAM_FK);
    }

    private transient NotificationrulePath _notificationrule;

    /**
     * Get the implicit join path to the <code>public.NOTIFICATIONRULE</code>
     * table.
     */
    public NotificationrulePath notificationrule() {
        if (_notificationrule == null)
            _notificationrule = new NotificationrulePath(this, Keys.NOTIFICATIONRULE_TEAMS__NOTIFICATIONRULE_TEAMS_NOTIFICATIONRULE_FK, null);

        return _notificationrule;
    }

    private transient TeamPath _team;

    /**
     * Get the implicit join path to the <code>public.TEAM</code> table.
     */
    public TeamPath team() {
        if (_team == null)
            _team = new TeamPath(this, Keys.NOTIFICATIONRULE_TEAMS__NOTIFICATIONRULE_TEAMS_TEAM_FK, null);

        return _team;
    }

    @Override
    public NotificationruleTeams as(String alias) {
        return new NotificationruleTeams(DSL.name(alias), this);
    }

    @Override
    public NotificationruleTeams as(Name alias) {
        return new NotificationruleTeams(alias, this);
    }

    @Override
    public NotificationruleTeams as(Table<?> alias) {
        return new NotificationruleTeams(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public NotificationruleTeams rename(String name) {
        return new NotificationruleTeams(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public NotificationruleTeams rename(Name name) {
        return new NotificationruleTeams(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public NotificationruleTeams rename(Table<?> name) {
        return new NotificationruleTeams(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public NotificationruleTeams where(Condition condition) {
        return new NotificationruleTeams(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public NotificationruleTeams where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public NotificationruleTeams where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public NotificationruleTeams where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public NotificationruleTeams where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public NotificationruleTeams where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public NotificationruleTeams where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public NotificationruleTeams where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public NotificationruleTeams whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public NotificationruleTeams whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
