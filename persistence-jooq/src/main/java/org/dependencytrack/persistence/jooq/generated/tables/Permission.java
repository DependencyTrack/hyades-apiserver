/*
 * This file is generated by jOOQ.
 */
package org.dependencytrack.persistence.jooq.generated.tables;


import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import javax.annotation.processing.Generated;

import org.dependencytrack.persistence.jooq.generated.DefaultSchema;
import org.dependencytrack.persistence.jooq.generated.Keys;
import org.dependencytrack.persistence.jooq.generated.tables.Role.RolePath;
import org.dependencytrack.persistence.jooq.generated.tables.RolesPermissions.RolesPermissionsPath;
import org.dependencytrack.persistence.jooq.generated.tables.Team.TeamPath;
import org.dependencytrack.persistence.jooq.generated.tables.TeamsPermissions.TeamsPermissionsPath;
import org.dependencytrack.persistence.jooq.generated.tables.User.UserPath;
import org.dependencytrack.persistence.jooq.generated.tables.UserProjectEffectivePermissions.UserProjectEffectivePermissionsPath;
import org.dependencytrack.persistence.jooq.generated.tables.UsersPermissions.UsersPermissionsPath;
import org.dependencytrack.persistence.jooq.generated.tables.records.PermissionRecord;
import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.20.4",
        "schema version:v5.6.0-28"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Permission extends TableImpl<PermissionRecord> {

    private static final long serialVersionUID = 1887509984;

    /**
     * The reference instance of <code>PERMISSION</code>
     */
    public static final Permission PERMISSION = new Permission();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PermissionRecord> getRecordType() {
        return PermissionRecord.class;
    }

    /**
     * The column <code>PERMISSION.ID</code>.
     */
    public final TableField<PermissionRecord, Long> id = createField(DSL.name("ID"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>PERMISSION.DESCRIPTION</code>.
     */
    public final TableField<PermissionRecord, String> description = createField(DSL.name("DESCRIPTION"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>PERMISSION.NAME</code>.
     */
    public final TableField<PermissionRecord, String> name = createField(DSL.name("NAME"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    private Permission(Name alias, Table<PermissionRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Permission(Name alias, Table<PermissionRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>PERMISSION</code> table reference
     */
    public Permission(String alias) {
        this(DSL.name(alias), PERMISSION);
    }

    /**
     * Create an aliased <code>PERMISSION</code> table reference
     */
    public Permission(Name alias) {
        this(alias, PERMISSION);
    }

    /**
     * Create a <code>PERMISSION</code> table reference
     */
    public Permission() {
        this(DSL.name("PERMISSION"), null);
    }

    public <O extends Record> Permission(Table<O> path, ForeignKey<O, PermissionRecord> childPath, InverseForeignKey<O, PermissionRecord> parentPath) {
        super(path, childPath, parentPath, PERMISSION);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    @Generated(
        value = {
            "https://www.jooq.org",
            "jOOQ version:3.20.4",
            "schema version:v5.6.0-28"
        },
        comments = "This class is generated by jOOQ"
    )
    public static class PermissionPath extends Permission implements Path<PermissionRecord> {

        private static final long serialVersionUID = 1887509984;
        public <O extends Record> PermissionPath(Table<O> path, ForeignKey<O, PermissionRecord> childPath, InverseForeignKey<O, PermissionRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private PermissionPath(Name alias, Table<PermissionRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public PermissionPath as(String alias) {
            return new PermissionPath(DSL.name(alias), this);
        }

        @Override
        public PermissionPath as(Name alias) {
            return new PermissionPath(alias, this);
        }

        @Override
        public PermissionPath as(Table<?> alias) {
            return new PermissionPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public Identity<PermissionRecord, Long> getIdentity() {
        return (Identity<PermissionRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<PermissionRecord> getPrimaryKey() {
        return Keys.PERMISSION_PK;
    }

    @Override
    public List<UniqueKey<PermissionRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.PERMISSION_IDX);
    }

    private transient RolesPermissionsPath _rolesPermissions;

    /**
     * Get the implicit to-many join path to the <code>ROLES_PERMISSIONS</code>
     * table
     */
    public RolesPermissionsPath rolesPermissions() {
        if (_rolesPermissions == null)
            _rolesPermissions = new RolesPermissionsPath(this, null, Keys.ROLES_PERMISSIONS_PERMISSION_FK.getInverseKey());

        return _rolesPermissions;
    }

    private transient TeamsPermissionsPath _teamsPermissions;

    /**
     * Get the implicit to-many join path to the <code>TEAMS_PERMISSIONS</code>
     * table
     */
    public TeamsPermissionsPath teamsPermissions() {
        if (_teamsPermissions == null)
            _teamsPermissions = new TeamsPermissionsPath(this, null, Keys.TEAMS_PERMISSIONS_PERMISSION_FK.getInverseKey());

        return _teamsPermissions;
    }

    private transient UserProjectEffectivePermissionsPath _userProjectEffectivePermissionsPermissionIdFk;

    /**
     * Get the implicit to-many join path to the
     * <code>USER_PROJECT_EFFECTIVE_PERMISSIONS</code> table, via the
     * <code>USER_PROJECT_EFFECTIVE_PERMISSIONS_PERMISSION_ID_FK</code> key
     */
    public UserProjectEffectivePermissionsPath userProjectEffectivePermissionsPermissionIdFk() {
        if (_userProjectEffectivePermissionsPermissionIdFk == null)
            _userProjectEffectivePermissionsPermissionIdFk = new UserProjectEffectivePermissionsPath(this, null, Keys.USER_PROJECT_EFFECTIVE_PERMISSIONS_PERMISSION_ID_FK.getInverseKey());

        return _userProjectEffectivePermissionsPermissionIdFk;
    }

    private transient UserProjectEffectivePermissionsPath _userProjectEffectivePermissionsPermissionNameFk;

    /**
     * Get the implicit to-many join path to the
     * <code>USER_PROJECT_EFFECTIVE_PERMISSIONS</code> table, via the
     * <code>USER_PROJECT_EFFECTIVE_PERMISSIONS_PERMISSION_NAME_FK</code> key
     */
    public UserProjectEffectivePermissionsPath userProjectEffectivePermissionsPermissionNameFk() {
        if (_userProjectEffectivePermissionsPermissionNameFk == null)
            _userProjectEffectivePermissionsPermissionNameFk = new UserProjectEffectivePermissionsPath(this, null, Keys.USER_PROJECT_EFFECTIVE_PERMISSIONS_PERMISSION_NAME_FK.getInverseKey());

        return _userProjectEffectivePermissionsPermissionNameFk;
    }

    private transient UsersPermissionsPath _usersPermissions;

    /**
     * Get the implicit to-many join path to the <code>USERS_PERMISSIONS</code>
     * table
     */
    public UsersPermissionsPath usersPermissions() {
        if (_usersPermissions == null)
            _usersPermissions = new UsersPermissionsPath(this, null, Keys.USERS_PERMISSIONS_PERMISSION_FK.getInverseKey());

        return _usersPermissions;
    }

    /**
     * Get the implicit many-to-many join path to the <code>ROLE</code> table
     */
    public RolePath role() {
        return rolesPermissions().role();
    }

    /**
     * Get the implicit many-to-many join path to the <code>TEAM</code> table
     */
    public TeamPath team() {
        return teamsPermissions().team();
    }

    /**
     * Get the implicit many-to-many join path to the <code>USER</code> table
     */
    public UserPath user() {
        return usersPermissions().user();
    }

    @Override
    public Permission as(String alias) {
        return new Permission(DSL.name(alias), this);
    }

    @Override
    public Permission as(Name alias) {
        return new Permission(alias, this);
    }

    @Override
    public Permission as(Table<?> alias) {
        return new Permission(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Permission rename(String name) {
        return new Permission(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Permission rename(Name name) {
        return new Permission(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Permission rename(Table<?> name) {
        return new Permission(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Permission where(Condition condition) {
        return new Permission(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Permission where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Permission where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Permission where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Permission where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Permission where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Permission where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Permission where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Permission whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Permission whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
