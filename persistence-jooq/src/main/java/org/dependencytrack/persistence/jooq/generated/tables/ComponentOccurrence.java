/*
 * This file is generated by jOOQ.
 */
package org.dependencytrack.persistence.jooq.generated.tables;


import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;
import java.util.UUID;

import javax.annotation.processing.Generated;

import org.dependencytrack.persistence.jooq.generated.DefaultSchema;
import org.dependencytrack.persistence.jooq.generated.Indexes;
import org.dependencytrack.persistence.jooq.generated.Keys;
import org.dependencytrack.persistence.jooq.generated.tables.Component.ComponentPath;
import org.dependencytrack.persistence.jooq.generated.tables.records.ComponentOccurrenceRecord;
import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.20.4",
        "schema version:v5.6.0-28"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class ComponentOccurrence extends TableImpl<ComponentOccurrenceRecord> {

    private static final long serialVersionUID = 812694584;

    /**
     * The reference instance of <code>COMPONENT_OCCURRENCE</code>
     */
    public static final ComponentOccurrence COMPONENT_OCCURRENCE = new ComponentOccurrence();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ComponentOccurrenceRecord> getRecordType() {
        return ComponentOccurrenceRecord.class;
    }

    /**
     * The column <code>COMPONENT_OCCURRENCE.ID</code>.
     */
    public final TableField<ComponentOccurrenceRecord, UUID> id = createField(DSL.name("ID"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>COMPONENT_OCCURRENCE.COMPONENT_ID</code>.
     */
    public final TableField<ComponentOccurrenceRecord, Long> componentId = createField(DSL.name("COMPONENT_ID"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>COMPONENT_OCCURRENCE.LOCATION</code>.
     */
    public final TableField<ComponentOccurrenceRecord, String> location = createField(DSL.name("LOCATION"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>COMPONENT_OCCURRENCE.LINE</code>.
     */
    public final TableField<ComponentOccurrenceRecord, Integer> line = createField(DSL.name("LINE"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>COMPONENT_OCCURRENCE.OFFSET</code>.
     */
    public final TableField<ComponentOccurrenceRecord, Integer> offset = createField(DSL.name("OFFSET"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>COMPONENT_OCCURRENCE.SYMBOL</code>.
     */
    public final TableField<ComponentOccurrenceRecord, String> symbol = createField(DSL.name("SYMBOL"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>COMPONENT_OCCURRENCE.CREATED_AT</code>.
     */
    public final TableField<ComponentOccurrenceRecord, OffsetDateTime> createdAt = createField(DSL.name("CREATED_AT"), SQLDataType.TIMESTAMPWITHTIMEZONE(3).nullable(false).defaultValue(DSL.field(DSL.raw("now()"), SQLDataType.TIMESTAMPWITHTIMEZONE)), this, "");

    private ComponentOccurrence(Name alias, Table<ComponentOccurrenceRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private ComponentOccurrence(Name alias, Table<ComponentOccurrenceRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>COMPONENT_OCCURRENCE</code> table reference
     */
    public ComponentOccurrence(String alias) {
        this(DSL.name(alias), COMPONENT_OCCURRENCE);
    }

    /**
     * Create an aliased <code>COMPONENT_OCCURRENCE</code> table reference
     */
    public ComponentOccurrence(Name alias) {
        this(alias, COMPONENT_OCCURRENCE);
    }

    /**
     * Create a <code>COMPONENT_OCCURRENCE</code> table reference
     */
    public ComponentOccurrence() {
        this(DSL.name("COMPONENT_OCCURRENCE"), null);
    }

    public <O extends Record> ComponentOccurrence(Table<O> path, ForeignKey<O, ComponentOccurrenceRecord> childPath, InverseForeignKey<O, ComponentOccurrenceRecord> parentPath) {
        super(path, childPath, parentPath, COMPONENT_OCCURRENCE);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    @Generated(
        value = {
            "https://www.jooq.org",
            "jOOQ version:3.20.4",
            "schema version:v5.6.0-28"
        },
        comments = "This class is generated by jOOQ"
    )
    public static class ComponentOccurrencePath extends ComponentOccurrence implements Path<ComponentOccurrenceRecord> {

        private static final long serialVersionUID = 812694584;
        public <O extends Record> ComponentOccurrencePath(Table<O> path, ForeignKey<O, ComponentOccurrenceRecord> childPath, InverseForeignKey<O, ComponentOccurrenceRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private ComponentOccurrencePath(Name alias, Table<ComponentOccurrenceRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public ComponentOccurrencePath as(String alias) {
            return new ComponentOccurrencePath(DSL.name(alias), this);
        }

        @Override
        public ComponentOccurrencePath as(Name alias) {
            return new ComponentOccurrencePath(alias, this);
        }

        @Override
        public ComponentOccurrencePath as(Table<?> alias) {
            return new ComponentOccurrencePath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.COMPONENT_OCCURRENCE_COMPONENT_ID_IDX);
    }

    @Override
    public UniqueKey<ComponentOccurrenceRecord> getPrimaryKey() {
        return Keys.COMPONENT_OCCURRENCE_PK;
    }

    @Override
    public List<ForeignKey<ComponentOccurrenceRecord, ?>> getReferences() {
        return Arrays.asList(Keys.COMPONENT_OCCURRENCE_COMPONENT_FK);
    }

    private transient ComponentPath _component;

    /**
     * Get the implicit join path to the <code>COMPONENT</code> table.
     */
    public ComponentPath component() {
        if (_component == null)
            _component = new ComponentPath(this, Keys.COMPONENT_OCCURRENCE_COMPONENT_FK, null);

        return _component;
    }

    @Override
    public ComponentOccurrence as(String alias) {
        return new ComponentOccurrence(DSL.name(alias), this);
    }

    @Override
    public ComponentOccurrence as(Name alias) {
        return new ComponentOccurrence(alias, this);
    }

    @Override
    public ComponentOccurrence as(Table<?> alias) {
        return new ComponentOccurrence(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public ComponentOccurrence rename(String name) {
        return new ComponentOccurrence(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ComponentOccurrence rename(Name name) {
        return new ComponentOccurrence(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public ComponentOccurrence rename(Table<?> name) {
        return new ComponentOccurrence(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ComponentOccurrence where(Condition condition) {
        return new ComponentOccurrence(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ComponentOccurrence where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ComponentOccurrence where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ComponentOccurrence where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public ComponentOccurrence where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public ComponentOccurrence where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public ComponentOccurrence where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public ComponentOccurrence where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ComponentOccurrence whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ComponentOccurrence whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
