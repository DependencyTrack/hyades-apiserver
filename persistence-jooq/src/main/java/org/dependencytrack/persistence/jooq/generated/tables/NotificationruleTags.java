/*
 * This file is generated by jOOQ.
 */
package org.dependencytrack.persistence.jooq.generated.tables;


import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.dependencytrack.persistence.jooq.generated.Indexes;
import org.dependencytrack.persistence.jooq.generated.Keys;
import org.dependencytrack.persistence.jooq.generated.Public;
import org.dependencytrack.persistence.jooq.generated.tables.Notificationrule.NotificationrulePath;
import org.dependencytrack.persistence.jooq.generated.tables.Tag.TagPath;
import org.dependencytrack.persistence.jooq.generated.tables.records.NotificationruleTagsRecord;
import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class NotificationruleTags extends TableImpl<NotificationruleTagsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.NOTIFICATIONRULE_TAGS</code>
     */
    public static final NotificationruleTags NOTIFICATIONRULE_TAGS = new NotificationruleTags();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<NotificationruleTagsRecord> getRecordType() {
        return NotificationruleTagsRecord.class;
    }

    /**
     * The column <code>public.NOTIFICATIONRULE_TAGS.NOTIFICATIONRULE_ID</code>.
     */
    public final TableField<NotificationruleTagsRecord, Long> NOTIFICATIONRULE_ID = createField(DSL.name("NOTIFICATIONRULE_ID"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.NOTIFICATIONRULE_TAGS.TAG_ID</code>.
     */
    public final TableField<NotificationruleTagsRecord, Long> TAG_ID = createField(DSL.name("TAG_ID"), SQLDataType.BIGINT, this, "");

    private NotificationruleTags(Name alias, Table<NotificationruleTagsRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private NotificationruleTags(Name alias, Table<NotificationruleTagsRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.NOTIFICATIONRULE_TAGS</code> table
     * reference
     */
    public NotificationruleTags(String alias) {
        this(DSL.name(alias), NOTIFICATIONRULE_TAGS);
    }

    /**
     * Create an aliased <code>public.NOTIFICATIONRULE_TAGS</code> table
     * reference
     */
    public NotificationruleTags(Name alias) {
        this(alias, NOTIFICATIONRULE_TAGS);
    }

    /**
     * Create a <code>public.NOTIFICATIONRULE_TAGS</code> table reference
     */
    public NotificationruleTags() {
        this(DSL.name("NOTIFICATIONRULE_TAGS"), null);
    }

    public <O extends Record> NotificationruleTags(Table<O> path, ForeignKey<O, NotificationruleTagsRecord> childPath, InverseForeignKey<O, NotificationruleTagsRecord> parentPath) {
        super(path, childPath, parentPath, NOTIFICATIONRULE_TAGS);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class NotificationruleTagsPath extends NotificationruleTags implements Path<NotificationruleTagsRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> NotificationruleTagsPath(Table<O> path, ForeignKey<O, NotificationruleTagsRecord> childPath, InverseForeignKey<O, NotificationruleTagsRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private NotificationruleTagsPath(Name alias, Table<NotificationruleTagsRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public NotificationruleTagsPath as(String alias) {
            return new NotificationruleTagsPath(DSL.name(alias), this);
        }

        @Override
        public NotificationruleTagsPath as(Name alias) {
            return new NotificationruleTagsPath(alias, this);
        }

        @Override
        public NotificationruleTagsPath as(Table<?> alias) {
            return new NotificationruleTagsPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.NOTIFICATIONRULE_TAGS_NOTIFICATIONRULE_ID_IDX, Indexes.NOTIFICATIONRULE_TAGS_TAG_ID_IDX);
    }

    @Override
    public List<ForeignKey<NotificationruleTagsRecord, ?>> getReferences() {
        return Arrays.asList(Keys.NOTIFICATIONRULE_TAGS__NOTIFICATIONRULE_TAGS_NOTIFICATIONRULE_FK, Keys.NOTIFICATIONRULE_TAGS__NOTIFICATIONRULE_TAGS_TAG_FK);
    }

    private transient NotificationrulePath _notificationrule;

    /**
     * Get the implicit join path to the <code>public.NOTIFICATIONRULE</code>
     * table.
     */
    public NotificationrulePath notificationrule() {
        if (_notificationrule == null)
            _notificationrule = new NotificationrulePath(this, Keys.NOTIFICATIONRULE_TAGS__NOTIFICATIONRULE_TAGS_NOTIFICATIONRULE_FK, null);

        return _notificationrule;
    }

    private transient TagPath _tag;

    /**
     * Get the implicit join path to the <code>public.TAG</code> table.
     */
    public TagPath tag() {
        if (_tag == null)
            _tag = new TagPath(this, Keys.NOTIFICATIONRULE_TAGS__NOTIFICATIONRULE_TAGS_TAG_FK, null);

        return _tag;
    }

    @Override
    public NotificationruleTags as(String alias) {
        return new NotificationruleTags(DSL.name(alias), this);
    }

    @Override
    public NotificationruleTags as(Name alias) {
        return new NotificationruleTags(alias, this);
    }

    @Override
    public NotificationruleTags as(Table<?> alias) {
        return new NotificationruleTags(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public NotificationruleTags rename(String name) {
        return new NotificationruleTags(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public NotificationruleTags rename(Name name) {
        return new NotificationruleTags(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public NotificationruleTags rename(Table<?> name) {
        return new NotificationruleTags(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public NotificationruleTags where(Condition condition) {
        return new NotificationruleTags(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public NotificationruleTags where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public NotificationruleTags where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public NotificationruleTags where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public NotificationruleTags where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public NotificationruleTags where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public NotificationruleTags where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public NotificationruleTags where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public NotificationruleTags whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public NotificationruleTags whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
