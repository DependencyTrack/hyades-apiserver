/*
 * This file is generated by jOOQ.
 */
package org.dependencytrack.persistence.jooq.generated.tables;


import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.dependencytrack.persistence.jooq.generated.Indexes;
import org.dependencytrack.persistence.jooq.generated.Keys;
import org.dependencytrack.persistence.jooq.generated.Public;
import org.dependencytrack.persistence.jooq.generated.tables.ApikeysTeams.ApikeysTeamsPath;
import org.dependencytrack.persistence.jooq.generated.tables.Team.TeamPath;
import org.dependencytrack.persistence.jooq.generated.tables.records.ApikeyRecord;
import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Apikey extends TableImpl<ApikeyRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.APIKEY</code>
     */
    public static final Apikey APIKEY = new Apikey();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ApikeyRecord> getRecordType() {
        return ApikeyRecord.class;
    }

    /**
     * The column <code>public.APIKEY.ID</code>.
     */
    public final TableField<ApikeyRecord, Long> ID = createField(DSL.name("ID"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.APIKEY.COMMENT</code>.
     */
    public final TableField<ApikeyRecord, String> COMMENT = createField(DSL.name("COMMENT"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.APIKEY.CREATED</code>.
     */
    public final TableField<ApikeyRecord, OffsetDateTime> CREATED = createField(DSL.name("CREATED"), SQLDataType.TIMESTAMPWITHTIMEZONE(6), this, "");

    /**
     * The column <code>public.APIKEY.LAST_USED</code>.
     */
    public final TableField<ApikeyRecord, OffsetDateTime> LAST_USED = createField(DSL.name("LAST_USED"), SQLDataType.TIMESTAMPWITHTIMEZONE(6), this, "");

    /**
     * The column <code>public.APIKEY.SECRET_HASH</code>.
     */
    public final TableField<ApikeyRecord, String> SECRET_HASH = createField(DSL.name("SECRET_HASH"), SQLDataType.VARCHAR(64).nullable(false), this, "");

    /**
     * The column <code>public.APIKEY.PUBLIC_ID</code>.
     */
    public final TableField<ApikeyRecord, String> PUBLIC_ID = createField(DSL.name("PUBLIC_ID"), SQLDataType.VARCHAR(8).nullable(false), this, "");

    /**
     * The column <code>public.APIKEY.IS_LEGACY</code>.
     */
    public final TableField<ApikeyRecord, Boolean> IS_LEGACY = createField(DSL.name("IS_LEGACY"), SQLDataType.BOOLEAN.nullable(false).defaultValue(DSL.field(DSL.raw("false"), SQLDataType.BOOLEAN)), this, "");

    private Apikey(Name alias, Table<ApikeyRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Apikey(Name alias, Table<ApikeyRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.APIKEY</code> table reference
     */
    public Apikey(String alias) {
        this(DSL.name(alias), APIKEY);
    }

    /**
     * Create an aliased <code>public.APIKEY</code> table reference
     */
    public Apikey(Name alias) {
        this(alias, APIKEY);
    }

    /**
     * Create a <code>public.APIKEY</code> table reference
     */
    public Apikey() {
        this(DSL.name("APIKEY"), null);
    }

    public <O extends Record> Apikey(Table<O> path, ForeignKey<O, ApikeyRecord> childPath, InverseForeignKey<O, ApikeyRecord> parentPath) {
        super(path, childPath, parentPath, APIKEY);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class ApikeyPath extends Apikey implements Path<ApikeyRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> ApikeyPath(Table<O> path, ForeignKey<O, ApikeyRecord> childPath, InverseForeignKey<O, ApikeyRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private ApikeyPath(Name alias, Table<ApikeyRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public ApikeyPath as(String alias) {
            return new ApikeyPath(DSL.name(alias), this);
        }

        @Override
        public ApikeyPath as(Name alias) {
            return new ApikeyPath(alias, this);
        }

        @Override
        public ApikeyPath as(Table<?> alias) {
            return new ApikeyPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.APIKEY_PUBLIC_ID_IDX);
    }

    @Override
    public Identity<ApikeyRecord, Long> getIdentity() {
        return (Identity<ApikeyRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<ApikeyRecord> getPrimaryKey() {
        return Keys.APIKEY_PK;
    }

    private transient ApikeysTeamsPath _apikeysTeams;

    /**
     * Get the implicit to-many join path to the
     * <code>public.APIKEYS_TEAMS</code> table
     */
    public ApikeysTeamsPath apikeysTeams() {
        if (_apikeysTeams == null)
            _apikeysTeams = new ApikeysTeamsPath(this, null, Keys.APIKEYS_TEAMS__APIKEYS_TEAMS_APIKEY_FK.getInverseKey());

        return _apikeysTeams;
    }

    /**
     * Get the implicit many-to-many join path to the <code>public.TEAM</code>
     * table
     */
    public TeamPath team() {
        return apikeysTeams().team();
    }

    @Override
    public Apikey as(String alias) {
        return new Apikey(DSL.name(alias), this);
    }

    @Override
    public Apikey as(Name alias) {
        return new Apikey(alias, this);
    }

    @Override
    public Apikey as(Table<?> alias) {
        return new Apikey(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Apikey rename(String name) {
        return new Apikey(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Apikey rename(Name name) {
        return new Apikey(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Apikey rename(Table<?> name) {
        return new Apikey(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Apikey where(Condition condition) {
        return new Apikey(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Apikey where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Apikey where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Apikey where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Apikey where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Apikey where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Apikey where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Apikey where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Apikey whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Apikey whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
