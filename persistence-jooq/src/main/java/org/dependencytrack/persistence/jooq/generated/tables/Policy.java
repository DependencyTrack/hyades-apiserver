/*
 * This file is generated by jOOQ.
 */
package org.dependencytrack.persistence.jooq.generated.tables;


import java.util.Arrays;
import java.util.Collection;
import java.util.List;
import java.util.UUID;

import javax.annotation.processing.Generated;

import org.dependencytrack.persistence.jooq.generated.DefaultSchema;
import org.dependencytrack.persistence.jooq.generated.Indexes;
import org.dependencytrack.persistence.jooq.generated.Keys;
import org.dependencytrack.persistence.jooq.generated.tables.PolicyCondition.PolicyConditionPath;
import org.dependencytrack.persistence.jooq.generated.tables.PolicyProjects.PolicyProjectsPath;
import org.dependencytrack.persistence.jooq.generated.tables.PolicyTags.PolicyTagsPath;
import org.dependencytrack.persistence.jooq.generated.tables.Tag.TagPath;
import org.dependencytrack.persistence.jooq.generated.tables.records.PolicyRecord;
import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.20.4",
        "schema version:v5.6.0-28"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Policy extends TableImpl<PolicyRecord> {

    private static final long serialVersionUID = -1941017999;

    /**
     * The reference instance of <code>POLICY</code>
     */
    public static final Policy POLICY = new Policy();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PolicyRecord> getRecordType() {
        return PolicyRecord.class;
    }

    /**
     * The column <code>POLICY.ID</code>.
     */
    public final TableField<PolicyRecord, Long> id = createField(DSL.name("ID"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>POLICY.INCLUDE_CHILDREN</code>.
     */
    public final TableField<PolicyRecord, Boolean> includeChildren = createField(DSL.name("INCLUDE_CHILDREN"), SQLDataType.BOOLEAN, this, "");

    /**
     * The column <code>POLICY.NAME</code>.
     */
    public final TableField<PolicyRecord, String> name = createField(DSL.name("NAME"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>POLICY.OPERATOR</code>.
     */
    public final TableField<PolicyRecord, String> operator = createField(DSL.name("OPERATOR"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>POLICY.UUID</code>.
     */
    public final TableField<PolicyRecord, UUID> uuid = createField(DSL.name("UUID"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>POLICY.VIOLATIONSTATE</code>.
     */
    public final TableField<PolicyRecord, String> violationState = createField(DSL.name("VIOLATIONSTATE"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>POLICY.ONLY_LATEST_PROJECT_VERSION</code>.
     */
    public final TableField<PolicyRecord, Boolean> onlyLatestProjectVersion = createField(DSL.name("ONLY_LATEST_PROJECT_VERSION"), SQLDataType.BOOLEAN.nullable(false).defaultValue(DSL.field(DSL.raw("false"), SQLDataType.BOOLEAN)), this, "");

    private Policy(Name alias, Table<PolicyRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Policy(Name alias, Table<PolicyRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>POLICY</code> table reference
     */
    public Policy(String alias) {
        this(DSL.name(alias), POLICY);
    }

    /**
     * Create an aliased <code>POLICY</code> table reference
     */
    public Policy(Name alias) {
        this(alias, POLICY);
    }

    /**
     * Create a <code>POLICY</code> table reference
     */
    public Policy() {
        this(DSL.name("POLICY"), null);
    }

    public <O extends Record> Policy(Table<O> path, ForeignKey<O, PolicyRecord> childPath, InverseForeignKey<O, PolicyRecord> parentPath) {
        super(path, childPath, parentPath, POLICY);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    @Generated(
        value = {
            "https://www.jooq.org",
            "jOOQ version:3.20.4",
            "schema version:v5.6.0-28"
        },
        comments = "This class is generated by jOOQ"
    )
    public static class PolicyPath extends Policy implements Path<PolicyRecord> {

        private static final long serialVersionUID = -1941017999;
        public <O extends Record> PolicyPath(Table<O> path, ForeignKey<O, PolicyRecord> childPath, InverseForeignKey<O, PolicyRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private PolicyPath(Name alias, Table<PolicyRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public PolicyPath as(String alias) {
            return new PolicyPath(DSL.name(alias), this);
        }

        @Override
        public PolicyPath as(Name alias) {
            return new PolicyPath(alias, this);
        }

        @Override
        public PolicyPath as(Table<?> alias) {
            return new PolicyPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.POLICY_NAME_IDX);
    }

    @Override
    public Identity<PolicyRecord, Long> getIdentity() {
        return (Identity<PolicyRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<PolicyRecord> getPrimaryKey() {
        return Keys.POLICY_PK;
    }

    @Override
    public List<UniqueKey<PolicyRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.POLICY_UUID_IDX);
    }

    private transient PolicyProjectsPath _policyProjects;

    /**
     * Get the implicit to-many join path to the <code>POLICY_PROJECTS</code>
     * table
     */
    public PolicyProjectsPath policyProjects() {
        if (_policyProjects == null)
            _policyProjects = new PolicyProjectsPath(this, null, Keys.POLICY_PROJECTS_POLICY_FK.getInverseKey());

        return _policyProjects;
    }

    private transient PolicyTagsPath _policyTags;

    /**
     * Get the implicit to-many join path to the <code>POLICY_TAGS</code> table
     */
    public PolicyTagsPath policyTags() {
        if (_policyTags == null)
            _policyTags = new PolicyTagsPath(this, null, Keys.POLICY_TAGS_POLICY_FK.getInverseKey());

        return _policyTags;
    }

    private transient PolicyConditionPath _policyCondition;

    /**
     * Get the implicit to-many join path to the <code>POLICYCONDITION</code>
     * table
     */
    public PolicyConditionPath policyCondition() {
        if (_policyCondition == null)
            _policyCondition = new PolicyConditionPath(this, null, Keys.POLICYCONDITION_POLICY_FK.getInverseKey());

        return _policyCondition;
    }

    /**
     * Get the implicit many-to-many join path to the <code>TAG</code> table
     */
    public TagPath tag() {
        return policyTags().tag();
    }

    @Override
    public Policy as(String alias) {
        return new Policy(DSL.name(alias), this);
    }

    @Override
    public Policy as(Name alias) {
        return new Policy(alias, this);
    }

    @Override
    public Policy as(Table<?> alias) {
        return new Policy(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Policy rename(String name) {
        return new Policy(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Policy rename(Name name) {
        return new Policy(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Policy rename(Table<?> name) {
        return new Policy(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Policy where(Condition condition) {
        return new Policy(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Policy where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Policy where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Policy where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Policy where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Policy where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Policy where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Policy where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Policy whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Policy whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
