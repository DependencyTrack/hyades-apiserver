/*
 * This file is generated by jOOQ.
 */
package org.dependencytrack.persistence.jooq.generated.tables;


import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.dependencytrack.persistence.jooq.generated.Keys;
import org.dependencytrack.persistence.jooq.generated.Public;
import org.dependencytrack.persistence.jooq.generated.tables.Ldapuser.LdapuserPath;
import org.dependencytrack.persistence.jooq.generated.tables.Team.TeamPath;
import org.dependencytrack.persistence.jooq.generated.tables.records.LdapusersTeamsRecord;
import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class LdapusersTeams extends TableImpl<LdapusersTeamsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.LDAPUSERS_TEAMS</code>
     */
    public static final LdapusersTeams LDAPUSERS_TEAMS = new LdapusersTeams();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<LdapusersTeamsRecord> getRecordType() {
        return LdapusersTeamsRecord.class;
    }

    /**
     * The column <code>public.LDAPUSERS_TEAMS.TEAM_ID</code>.
     */
    public final TableField<LdapusersTeamsRecord, Long> TEAM_ID = createField(DSL.name("TEAM_ID"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.LDAPUSERS_TEAMS.LDAPUSER_ID</code>.
     */
    public final TableField<LdapusersTeamsRecord, Long> LDAPUSER_ID = createField(DSL.name("LDAPUSER_ID"), SQLDataType.BIGINT.nullable(false), this, "");

    private LdapusersTeams(Name alias, Table<LdapusersTeamsRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private LdapusersTeams(Name alias, Table<LdapusersTeamsRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.LDAPUSERS_TEAMS</code> table reference
     */
    public LdapusersTeams(String alias) {
        this(DSL.name(alias), LDAPUSERS_TEAMS);
    }

    /**
     * Create an aliased <code>public.LDAPUSERS_TEAMS</code> table reference
     */
    public LdapusersTeams(Name alias) {
        this(alias, LDAPUSERS_TEAMS);
    }

    /**
     * Create a <code>public.LDAPUSERS_TEAMS</code> table reference
     */
    public LdapusersTeams() {
        this(DSL.name("LDAPUSERS_TEAMS"), null);
    }

    public <O extends Record> LdapusersTeams(Table<O> path, ForeignKey<O, LdapusersTeamsRecord> childPath, InverseForeignKey<O, LdapusersTeamsRecord> parentPath) {
        super(path, childPath, parentPath, LDAPUSERS_TEAMS);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class LdapusersTeamsPath extends LdapusersTeams implements Path<LdapusersTeamsRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> LdapusersTeamsPath(Table<O> path, ForeignKey<O, LdapusersTeamsRecord> childPath, InverseForeignKey<O, LdapusersTeamsRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private LdapusersTeamsPath(Name alias, Table<LdapusersTeamsRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public LdapusersTeamsPath as(String alias) {
            return new LdapusersTeamsPath(DSL.name(alias), this);
        }

        @Override
        public LdapusersTeamsPath as(Name alias) {
            return new LdapusersTeamsPath(alias, this);
        }

        @Override
        public LdapusersTeamsPath as(Table<?> alias) {
            return new LdapusersTeamsPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public UniqueKey<LdapusersTeamsRecord> getPrimaryKey() {
        return Keys.LDAPUSERS_TEAMS_PK;
    }

    @Override
    public List<ForeignKey<LdapusersTeamsRecord, ?>> getReferences() {
        return Arrays.asList(Keys.LDAPUSERS_TEAMS__LDAPUSERS_TEAMS_LDAPUSER_FK, Keys.LDAPUSERS_TEAMS__LDAPUSERS_TEAMS_TEAM_FK);
    }

    private transient LdapuserPath _ldapuser;

    /**
     * Get the implicit join path to the <code>public.LDAPUSER</code> table.
     */
    public LdapuserPath ldapuser() {
        if (_ldapuser == null)
            _ldapuser = new LdapuserPath(this, Keys.LDAPUSERS_TEAMS__LDAPUSERS_TEAMS_LDAPUSER_FK, null);

        return _ldapuser;
    }

    private transient TeamPath _team;

    /**
     * Get the implicit join path to the <code>public.TEAM</code> table.
     */
    public TeamPath team() {
        if (_team == null)
            _team = new TeamPath(this, Keys.LDAPUSERS_TEAMS__LDAPUSERS_TEAMS_TEAM_FK, null);

        return _team;
    }

    @Override
    public LdapusersTeams as(String alias) {
        return new LdapusersTeams(DSL.name(alias), this);
    }

    @Override
    public LdapusersTeams as(Name alias) {
        return new LdapusersTeams(alias, this);
    }

    @Override
    public LdapusersTeams as(Table<?> alias) {
        return new LdapusersTeams(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public LdapusersTeams rename(String name) {
        return new LdapusersTeams(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public LdapusersTeams rename(Name name) {
        return new LdapusersTeams(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public LdapusersTeams rename(Table<?> name) {
        return new LdapusersTeams(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public LdapusersTeams where(Condition condition) {
        return new LdapusersTeams(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public LdapusersTeams where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public LdapusersTeams where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public LdapusersTeams where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public LdapusersTeams where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public LdapusersTeams where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public LdapusersTeams where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public LdapusersTeams where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public LdapusersTeams whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public LdapusersTeams whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
