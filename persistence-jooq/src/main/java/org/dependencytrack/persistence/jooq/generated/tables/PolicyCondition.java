/*
 * This file is generated by jOOQ.
 */
package org.dependencytrack.persistence.jooq.generated.tables;


import java.util.Arrays;
import java.util.Collection;
import java.util.List;
import java.util.UUID;

import javax.annotation.processing.Generated;

import org.dependencytrack.persistence.jooq.generated.DefaultSchema;
import org.dependencytrack.persistence.jooq.generated.Indexes;
import org.dependencytrack.persistence.jooq.generated.Keys;
import org.dependencytrack.persistence.jooq.generated.tables.Policy.PolicyPath;
import org.dependencytrack.persistence.jooq.generated.tables.PolicyViolation.PolicyViolationPath;
import org.dependencytrack.persistence.jooq.generated.tables.records.PolicyConditionRecord;
import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.20.4",
        "schema version:v5.6.0-28"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class PolicyCondition extends TableImpl<PolicyConditionRecord> {

    private static final long serialVersionUID = 1066216251;

    /**
     * The reference instance of <code>POLICYCONDITION</code>
     */
    public static final PolicyCondition POLICYCONDITION = new PolicyCondition();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PolicyConditionRecord> getRecordType() {
        return PolicyConditionRecord.class;
    }

    /**
     * The column <code>POLICYCONDITION.ID</code>.
     */
    public final TableField<PolicyConditionRecord, Long> id = createField(DSL.name("ID"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>POLICYCONDITION.OPERATOR</code>.
     */
    public final TableField<PolicyConditionRecord, String> operator = createField(DSL.name("OPERATOR"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>POLICYCONDITION.POLICY_ID</code>.
     */
    public final TableField<PolicyConditionRecord, Long> policyId = createField(DSL.name("POLICY_ID"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>POLICYCONDITION.SUBJECT</code>.
     */
    public final TableField<PolicyConditionRecord, String> subject = createField(DSL.name("SUBJECT"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>POLICYCONDITION.UUID</code>.
     */
    public final TableField<PolicyConditionRecord, UUID> uuid = createField(DSL.name("UUID"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>POLICYCONDITION.VALUE</code>.
     */
    public final TableField<PolicyConditionRecord, String> value = createField(DSL.name("VALUE"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>POLICYCONDITION.VIOLATIONTYPE</code>.
     */
    public final TableField<PolicyConditionRecord, String> violationType = createField(DSL.name("VIOLATIONTYPE"), SQLDataType.VARCHAR(255), this, "");

    private PolicyCondition(Name alias, Table<PolicyConditionRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private PolicyCondition(Name alias, Table<PolicyConditionRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>POLICYCONDITION</code> table reference
     */
    public PolicyCondition(String alias) {
        this(DSL.name(alias), POLICYCONDITION);
    }

    /**
     * Create an aliased <code>POLICYCONDITION</code> table reference
     */
    public PolicyCondition(Name alias) {
        this(alias, POLICYCONDITION);
    }

    /**
     * Create a <code>POLICYCONDITION</code> table reference
     */
    public PolicyCondition() {
        this(DSL.name("POLICYCONDITION"), null);
    }

    public <O extends Record> PolicyCondition(Table<O> path, ForeignKey<O, PolicyConditionRecord> childPath, InverseForeignKey<O, PolicyConditionRecord> parentPath) {
        super(path, childPath, parentPath, POLICYCONDITION);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    @Generated(
        value = {
            "https://www.jooq.org",
            "jOOQ version:3.20.4",
            "schema version:v5.6.0-28"
        },
        comments = "This class is generated by jOOQ"
    )
    public static class PolicyConditionPath extends PolicyCondition implements Path<PolicyConditionRecord> {

        private static final long serialVersionUID = 1066216251;
        public <O extends Record> PolicyConditionPath(Table<O> path, ForeignKey<O, PolicyConditionRecord> childPath, InverseForeignKey<O, PolicyConditionRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private PolicyConditionPath(Name alias, Table<PolicyConditionRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public PolicyConditionPath as(String alias) {
            return new PolicyConditionPath(DSL.name(alias), this);
        }

        @Override
        public PolicyConditionPath as(Name alias) {
            return new PolicyConditionPath(alias, this);
        }

        @Override
        public PolicyConditionPath as(Table<?> alias) {
            return new PolicyConditionPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.POLICYCONDITION_POLICY_ID_IDX);
    }

    @Override
    public Identity<PolicyConditionRecord, Long> getIdentity() {
        return (Identity<PolicyConditionRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<PolicyConditionRecord> getPrimaryKey() {
        return Keys.POLICYCONDITION_PK;
    }

    @Override
    public List<UniqueKey<PolicyConditionRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.POLICYCONDITION_UUID_IDX);
    }

    @Override
    public List<ForeignKey<PolicyConditionRecord, ?>> getReferences() {
        return Arrays.asList(Keys.POLICYCONDITION_POLICY_FK);
    }

    private transient PolicyPath _policy;

    /**
     * Get the implicit join path to the <code>POLICY</code> table.
     */
    public PolicyPath policy() {
        if (_policy == null)
            _policy = new PolicyPath(this, Keys.POLICYCONDITION_POLICY_FK, null);

        return _policy;
    }

    private transient PolicyViolationPath _policyViolation;

    /**
     * Get the implicit to-many join path to the <code>POLICYVIOLATION</code>
     * table
     */
    public PolicyViolationPath policyViolation() {
        if (_policyViolation == null)
            _policyViolation = new PolicyViolationPath(this, null, Keys.POLICYVIOLATION_POLICYCONDITION_FK.getInverseKey());

        return _policyViolation;
    }

    @Override
    public PolicyCondition as(String alias) {
        return new PolicyCondition(DSL.name(alias), this);
    }

    @Override
    public PolicyCondition as(Name alias) {
        return new PolicyCondition(alias, this);
    }

    @Override
    public PolicyCondition as(Table<?> alias) {
        return new PolicyCondition(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public PolicyCondition rename(String name) {
        return new PolicyCondition(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public PolicyCondition rename(Name name) {
        return new PolicyCondition(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public PolicyCondition rename(Table<?> name) {
        return new PolicyCondition(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public PolicyCondition where(Condition condition) {
        return new PolicyCondition(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public PolicyCondition where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public PolicyCondition where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public PolicyCondition where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public PolicyCondition where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public PolicyCondition where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public PolicyCondition where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public PolicyCondition where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public PolicyCondition whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public PolicyCondition whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
