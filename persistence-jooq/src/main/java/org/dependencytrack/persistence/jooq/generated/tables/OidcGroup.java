/*
 * This file is generated by jOOQ.
 */
package org.dependencytrack.persistence.jooq.generated.tables;


import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.dependencytrack.persistence.jooq.generated.Indexes;
import org.dependencytrack.persistence.jooq.generated.Keys;
import org.dependencytrack.persistence.jooq.generated.Public;
import org.dependencytrack.persistence.jooq.generated.tables.MappedOidcGroup.MappedoidcgroupPath;
import org.dependencytrack.persistence.jooq.generated.tables.Team.TeamPath;
import org.dependencytrack.persistence.jooq.generated.tables.records.OidcGroupRecord;
import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class OidcGroup extends TableImpl<OidcGroupRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.OIDCGROUP</code>
     */
    public static final OidcGroup OIDCGROUP = new OidcGroup();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<OidcGroupRecord> getRecordType() {
        return OidcGroupRecord.class;
    }

    /**
     * The column <code>public.OIDCGROUP.ID</code>.
     */
    public final TableField<OidcGroupRecord, Long> ID = createField(DSL.name("ID"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.OIDCGROUP.NAME</code>.
     */
    public final TableField<OidcGroupRecord, String> NAME = createField(DSL.name("NAME"), SQLDataType.VARCHAR(1024).nullable(false), this, "");

    /**
     * The column <code>public.OIDCGROUP.UUID</code>.
     */
    public final TableField<OidcGroupRecord, String> UUID = createField(DSL.name("UUID"), SQLDataType.VARCHAR(36).nullable(false), this, "");

    private OidcGroup(Name alias, Table<OidcGroupRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private OidcGroup(Name alias, Table<OidcGroupRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.OIDCGROUP</code> table reference
     */
    public OidcGroup(String alias) {
        this(DSL.name(alias), OIDCGROUP);
    }

    /**
     * Create an aliased <code>public.OIDCGROUP</code> table reference
     */
    public OidcGroup(Name alias) {
        this(alias, OIDCGROUP);
    }

    /**
     * Create a <code>public.OIDCGROUP</code> table reference
     */
    public OidcGroup() {
        this(DSL.name("OIDCGROUP"), null);
    }

    public <O extends Record> OidcGroup(Table<O> path, ForeignKey<O, OidcGroupRecord> childPath, InverseForeignKey<O, OidcGroupRecord> parentPath) {
        super(path, childPath, parentPath, OIDCGROUP);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class OidcgroupPath extends OidcGroup implements Path<OidcGroupRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> OidcgroupPath(Table<O> path, ForeignKey<O, OidcGroupRecord> childPath, InverseForeignKey<O, OidcGroupRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private OidcgroupPath(Name alias, Table<OidcGroupRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public OidcgroupPath as(String alias) {
            return new OidcgroupPath(DSL.name(alias), this);
        }

        @Override
        public OidcgroupPath as(Name alias) {
            return new OidcgroupPath(alias, this);
        }

        @Override
        public OidcgroupPath as(Table<?> alias) {
            return new OidcgroupPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.OIDCGROUP_NAME_IDX);
    }

    @Override
    public Identity<OidcGroupRecord, Long> getIdentity() {
        return (Identity<OidcGroupRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<OidcGroupRecord> getPrimaryKey() {
        return Keys.OIDCGROUP_PK;
    }

    @Override
    public List<UniqueKey<OidcGroupRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.OIDCGROUP_UUID_IDX);
    }

    private transient MappedoidcgroupPath _mappedoidcgroup;

    /**
     * Get the implicit to-many join path to the
     * <code>public.MAPPEDOIDCGROUP</code> table
     */
    public MappedoidcgroupPath mappedoidcgroup() {
        if (_mappedoidcgroup == null)
            _mappedoidcgroup = new MappedoidcgroupPath(this, null, Keys.MAPPEDOIDCGROUP__MAPPEDOIDCGROUP_OIDCGROUP_FK.getInverseKey());

        return _mappedoidcgroup;
    }

    /**
     * Get the implicit many-to-many join path to the <code>public.TEAM</code>
     * table
     */
    public TeamPath team() {
        return mappedoidcgroup().team();
    }

    @Override
    public OidcGroup as(String alias) {
        return new OidcGroup(DSL.name(alias), this);
    }

    @Override
    public OidcGroup as(Name alias) {
        return new OidcGroup(alias, this);
    }

    @Override
    public OidcGroup as(Table<?> alias) {
        return new OidcGroup(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public OidcGroup rename(String name) {
        return new OidcGroup(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public OidcGroup rename(Name name) {
        return new OidcGroup(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public OidcGroup rename(Table<?> name) {
        return new OidcGroup(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public OidcGroup where(Condition condition) {
        return new OidcGroup(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public OidcGroup where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public OidcGroup where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public OidcGroup where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public OidcGroup where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public OidcGroup where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public OidcGroup where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public OidcGroup where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public OidcGroup whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public OidcGroup whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
