/*
 * This file is generated by jOOQ.
 */
package org.dependencytrack.persistence.jooq.generated.tables;


import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import javax.annotation.processing.Generated;

import org.dependencytrack.persistence.jooq.generated.DefaultSchema;
import org.dependencytrack.persistence.jooq.generated.Keys;
import org.dependencytrack.persistence.jooq.generated.tables.Component.ComponentPath;
import org.dependencytrack.persistence.jooq.generated.tables.Project.ProjectPath;
import org.dependencytrack.persistence.jooq.generated.tables.records.DependencyMetricsRecord;
import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.20.4",
        "schema version:v5.6.0-28"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class DependencyMetrics extends TableImpl<DependencyMetricsRecord> {

    private static final long serialVersionUID = -876525619;

    /**
     * The reference instance of <code>DEPENDENCYMETRICS</code>
     */
    public static final DependencyMetrics DEPENDENCYMETRICS = new DependencyMetrics();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<DependencyMetricsRecord> getRecordType() {
        return DependencyMetricsRecord.class;
    }

    /**
     * The column <code>DEPENDENCYMETRICS.COMPONENT_ID</code>.
     */
    public final TableField<DependencyMetricsRecord, Long> componentId = createField(DSL.name("COMPONENT_ID"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>DEPENDENCYMETRICS.CRITICAL</code>.
     */
    public final TableField<DependencyMetricsRecord, Integer> critical = createField(DSL.name("CRITICAL"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>DEPENDENCYMETRICS.FINDINGS_AUDITED</code>.
     */
    public final TableField<DependencyMetricsRecord, Integer> findingsAudited = createField(DSL.name("FINDINGS_AUDITED"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>DEPENDENCYMETRICS.FINDINGS_TOTAL</code>.
     */
    public final TableField<DependencyMetricsRecord, Integer> findingsTotal = createField(DSL.name("FINDINGS_TOTAL"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>DEPENDENCYMETRICS.FINDINGS_UNAUDITED</code>.
     */
    public final TableField<DependencyMetricsRecord, Integer> findingsUnaudited = createField(DSL.name("FINDINGS_UNAUDITED"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>DEPENDENCYMETRICS.FIRST_OCCURRENCE</code>.
     */
    public final TableField<DependencyMetricsRecord, OffsetDateTime> firstOccurrence = createField(DSL.name("FIRST_OCCURRENCE"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).nullable(false), this, "");

    /**
     * The column <code>DEPENDENCYMETRICS.HIGH</code>.
     */
    public final TableField<DependencyMetricsRecord, Integer> high = createField(DSL.name("HIGH"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>DEPENDENCYMETRICS.RISKSCORE</code>.
     */
    public final TableField<DependencyMetricsRecord, Double> riskScore = createField(DSL.name("RISKSCORE"), SQLDataType.DOUBLE.nullable(false), this, "");

    /**
     * The column <code>DEPENDENCYMETRICS.LAST_OCCURRENCE</code>.
     */
    public final TableField<DependencyMetricsRecord, OffsetDateTime> lastOccurrence = createField(DSL.name("LAST_OCCURRENCE"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).nullable(false), this, "");

    /**
     * The column <code>DEPENDENCYMETRICS.LOW</code>.
     */
    public final TableField<DependencyMetricsRecord, Integer> low = createField(DSL.name("LOW"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>DEPENDENCYMETRICS.MEDIUM</code>.
     */
    public final TableField<DependencyMetricsRecord, Integer> medium = createField(DSL.name("MEDIUM"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>DEPENDENCYMETRICS.POLICYVIOLATIONS_AUDITED</code>.
     */
    public final TableField<DependencyMetricsRecord, Integer> policyViolationsAudited = createField(DSL.name("POLICYVIOLATIONS_AUDITED"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>DEPENDENCYMETRICS.POLICYVIOLATIONS_FAIL</code>.
     */
    public final TableField<DependencyMetricsRecord, Integer> policyViolationsFail = createField(DSL.name("POLICYVIOLATIONS_FAIL"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>DEPENDENCYMETRICS.POLICYVIOLATIONS_INFO</code>.
     */
    public final TableField<DependencyMetricsRecord, Integer> policyViolationsInfo = createField(DSL.name("POLICYVIOLATIONS_INFO"), SQLDataType.INTEGER, this, "");

    /**
     * The column
     * <code>DEPENDENCYMETRICS.POLICYVIOLATIONS_LICENSE_AUDITED</code>.
     */
    public final TableField<DependencyMetricsRecord, Integer> policyViolationsLicenseAudited = createField(DSL.name("POLICYVIOLATIONS_LICENSE_AUDITED"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>DEPENDENCYMETRICS.POLICYVIOLATIONS_LICENSE_TOTAL</code>.
     */
    public final TableField<DependencyMetricsRecord, Integer> policyViolationsLicenseTotal = createField(DSL.name("POLICYVIOLATIONS_LICENSE_TOTAL"), SQLDataType.INTEGER, this, "");

    /**
     * The column
     * <code>DEPENDENCYMETRICS.POLICYVIOLATIONS_LICENSE_UNAUDITED</code>.
     */
    public final TableField<DependencyMetricsRecord, Integer> policyViolationsLicenseUnaudited = createField(DSL.name("POLICYVIOLATIONS_LICENSE_UNAUDITED"), SQLDataType.INTEGER, this, "");

    /**
     * The column
     * <code>DEPENDENCYMETRICS.POLICYVIOLATIONS_OPERATIONAL_AUDITED</code>.
     */
    public final TableField<DependencyMetricsRecord, Integer> policyViolationsOperationalAudited = createField(DSL.name("POLICYVIOLATIONS_OPERATIONAL_AUDITED"), SQLDataType.INTEGER, this, "");

    /**
     * The column
     * <code>DEPENDENCYMETRICS.POLICYVIOLATIONS_OPERATIONAL_TOTAL</code>.
     */
    public final TableField<DependencyMetricsRecord, Integer> policyViolationsOperationalTotal = createField(DSL.name("POLICYVIOLATIONS_OPERATIONAL_TOTAL"), SQLDataType.INTEGER, this, "");

    /**
     * The column
     * <code>DEPENDENCYMETRICS.POLICYVIOLATIONS_OPERATIONAL_UNAUDITED</code>.
     */
    public final TableField<DependencyMetricsRecord, Integer> policyViolationsOperationalUnaudited = createField(DSL.name("POLICYVIOLATIONS_OPERATIONAL_UNAUDITED"), SQLDataType.INTEGER, this, "");

    /**
     * The column
     * <code>DEPENDENCYMETRICS.POLICYVIOLATIONS_SECURITY_AUDITED</code>.
     */
    public final TableField<DependencyMetricsRecord, Integer> policyViolationsSecurityAudited = createField(DSL.name("POLICYVIOLATIONS_SECURITY_AUDITED"), SQLDataType.INTEGER, this, "");

    /**
     * The column
     * <code>DEPENDENCYMETRICS.POLICYVIOLATIONS_SECURITY_TOTAL</code>.
     */
    public final TableField<DependencyMetricsRecord, Integer> policyViolationsSecurityTotal = createField(DSL.name("POLICYVIOLATIONS_SECURITY_TOTAL"), SQLDataType.INTEGER, this, "");

    /**
     * The column
     * <code>DEPENDENCYMETRICS.POLICYVIOLATIONS_SECURITY_UNAUDITED</code>.
     */
    public final TableField<DependencyMetricsRecord, Integer> policyViolationsSecurityUnaudited = createField(DSL.name("POLICYVIOLATIONS_SECURITY_UNAUDITED"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>DEPENDENCYMETRICS.POLICYVIOLATIONS_TOTAL</code>.
     */
    public final TableField<DependencyMetricsRecord, Integer> policyViolationsTotal = createField(DSL.name("POLICYVIOLATIONS_TOTAL"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>DEPENDENCYMETRICS.POLICYVIOLATIONS_UNAUDITED</code>.
     */
    public final TableField<DependencyMetricsRecord, Integer> policyViolationsUnaudited = createField(DSL.name("POLICYVIOLATIONS_UNAUDITED"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>DEPENDENCYMETRICS.POLICYVIOLATIONS_WARN</code>.
     */
    public final TableField<DependencyMetricsRecord, Integer> policyViolationsWarn = createField(DSL.name("POLICYVIOLATIONS_WARN"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>DEPENDENCYMETRICS.PROJECT_ID</code>.
     */
    public final TableField<DependencyMetricsRecord, Long> projectId = createField(DSL.name("PROJECT_ID"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>DEPENDENCYMETRICS.SUPPRESSED</code>.
     */
    public final TableField<DependencyMetricsRecord, Integer> suppressed = createField(DSL.name("SUPPRESSED"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>DEPENDENCYMETRICS.UNASSIGNED_SEVERITY</code>.
     */
    public final TableField<DependencyMetricsRecord, Integer> unassignedSeverity = createField(DSL.name("UNASSIGNED_SEVERITY"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>DEPENDENCYMETRICS.VULNERABILITIES</code>.
     */
    public final TableField<DependencyMetricsRecord, Integer> vulnerabilities = createField(DSL.name("VULNERABILITIES"), SQLDataType.INTEGER.nullable(false), this, "");

    private DependencyMetrics(Name alias, Table<DependencyMetricsRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private DependencyMetrics(Name alias, Table<DependencyMetricsRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>DEPENDENCYMETRICS</code> table reference
     */
    public DependencyMetrics(String alias) {
        this(DSL.name(alias), DEPENDENCYMETRICS);
    }

    /**
     * Create an aliased <code>DEPENDENCYMETRICS</code> table reference
     */
    public DependencyMetrics(Name alias) {
        this(alias, DEPENDENCYMETRICS);
    }

    /**
     * Create a <code>DEPENDENCYMETRICS</code> table reference
     */
    public DependencyMetrics() {
        this(DSL.name("DEPENDENCYMETRICS"), null);
    }

    public <O extends Record> DependencyMetrics(Table<O> path, ForeignKey<O, DependencyMetricsRecord> childPath, InverseForeignKey<O, DependencyMetricsRecord> parentPath) {
        super(path, childPath, parentPath, DEPENDENCYMETRICS);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    @Generated(
        value = {
            "https://www.jooq.org",
            "jOOQ version:3.20.4",
            "schema version:v5.6.0-28"
        },
        comments = "This class is generated by jOOQ"
    )
    public static class DependencyMetricsPath extends DependencyMetrics implements Path<DependencyMetricsRecord> {

        private static final long serialVersionUID = -876525619;
        public <O extends Record> DependencyMetricsPath(Table<O> path, ForeignKey<O, DependencyMetricsRecord> childPath, InverseForeignKey<O, DependencyMetricsRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private DependencyMetricsPath(Name alias, Table<DependencyMetricsRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public DependencyMetricsPath as(String alias) {
            return new DependencyMetricsPath(DSL.name(alias), this);
        }

        @Override
        public DependencyMetricsPath as(Name alias) {
            return new DependencyMetricsPath(alias, this);
        }

        @Override
        public DependencyMetricsPath as(Table<?> alias) {
            return new DependencyMetricsPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public UniqueKey<DependencyMetricsRecord> getPrimaryKey() {
        return Keys.DEPENDENCYMETRICS_PK;
    }

    @Override
    public List<ForeignKey<DependencyMetricsRecord, ?>> getReferences() {
        return Arrays.asList(Keys.DEPENDENCYMETRICS_COMPONENT_FK, Keys.DEPENDENCYMETRICS_PROJECT_FK);
    }

    private transient ComponentPath _component;

    /**
     * Get the implicit join path to the <code>COMPONENT</code> table.
     */
    public ComponentPath component() {
        if (_component == null)
            _component = new ComponentPath(this, Keys.DEPENDENCYMETRICS_COMPONENT_FK, null);

        return _component;
    }

    private transient ProjectPath _project;

    /**
     * Get the implicit join path to the <code>PROJECT</code> table.
     */
    public ProjectPath project() {
        if (_project == null)
            _project = new ProjectPath(this, Keys.DEPENDENCYMETRICS_PROJECT_FK, null);

        return _project;
    }

    @Override
    public DependencyMetrics as(String alias) {
        return new DependencyMetrics(DSL.name(alias), this);
    }

    @Override
    public DependencyMetrics as(Name alias) {
        return new DependencyMetrics(alias, this);
    }

    @Override
    public DependencyMetrics as(Table<?> alias) {
        return new DependencyMetrics(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public DependencyMetrics rename(String name) {
        return new DependencyMetrics(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public DependencyMetrics rename(Name name) {
        return new DependencyMetrics(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public DependencyMetrics rename(Table<?> name) {
        return new DependencyMetrics(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public DependencyMetrics where(Condition condition) {
        return new DependencyMetrics(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public DependencyMetrics where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public DependencyMetrics where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public DependencyMetrics where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public DependencyMetrics where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public DependencyMetrics where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public DependencyMetrics where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public DependencyMetrics where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public DependencyMetrics whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public DependencyMetrics whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
