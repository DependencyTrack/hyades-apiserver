/*
 * This file is generated by jOOQ.
 */
package org.dependencytrack.persistence.jooq.generated.tables;


import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.dependencytrack.persistence.jooq.generated.Indexes;
import org.dependencytrack.persistence.jooq.generated.Keys;
import org.dependencytrack.persistence.jooq.generated.Public;
import org.dependencytrack.persistence.jooq.generated.tables.Analysis.AnalysisPath;
import org.dependencytrack.persistence.jooq.generated.tables.Component.ComponentPath;
import org.dependencytrack.persistence.jooq.generated.tables.ComponentOccurrence.ComponentOccurrencePath;
import org.dependencytrack.persistence.jooq.generated.tables.ComponentProperty.ComponentPropertyPath;
import org.dependencytrack.persistence.jooq.generated.tables.ComponentsVulnerabilities.ComponentsVulnerabilitiesPath;
import org.dependencytrack.persistence.jooq.generated.tables.DependencyMetrics.DependencymetricsPath;
import org.dependencytrack.persistence.jooq.generated.tables.FindingAttribution.FindingattributionPath;
import org.dependencytrack.persistence.jooq.generated.tables.IntegrityAnalysis.IntegrityAnalysisPath;
import org.dependencytrack.persistence.jooq.generated.tables.License.LicensePath;
import org.dependencytrack.persistence.jooq.generated.tables.PolicyViolation.PolicyviolationPath;
import org.dependencytrack.persistence.jooq.generated.tables.Project.ProjectPath;
import org.dependencytrack.persistence.jooq.generated.tables.ViolationAnalysis.ViolationanalysisPath;
import org.dependencytrack.persistence.jooq.generated.tables.records.ComponentRecord;
import org.jooq.Check;
import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.InverseForeignKey;
import org.jooq.JSONB;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Component extends TableImpl<ComponentRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.COMPONENT</code>
     */
    public static final Component COMPONENT = new Component();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ComponentRecord> getRecordType() {
        return ComponentRecord.class;
    }

    /**
     * The column <code>public.COMPONENT.ID</code>.
     */
    public final TableField<ComponentRecord, Long> ID = createField(DSL.name("ID"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.COMPONENT.BLAKE2B_256</code>.
     */
    public final TableField<ComponentRecord, String> BLAKE2B_256 = createField(DSL.name("BLAKE2B_256"), SQLDataType.VARCHAR(64), this, "");

    /**
     * The column <code>public.COMPONENT.BLAKE2B_384</code>.
     */
    public final TableField<ComponentRecord, String> BLAKE2B_384 = createField(DSL.name("BLAKE2B_384"), SQLDataType.VARCHAR(96), this, "");

    /**
     * The column <code>public.COMPONENT.BLAKE2B_512</code>.
     */
    public final TableField<ComponentRecord, String> BLAKE2B_512 = createField(DSL.name("BLAKE2B_512"), SQLDataType.VARCHAR(128), this, "");

    /**
     * The column <code>public.COMPONENT.BLAKE3</code>.
     */
    public final TableField<ComponentRecord, String> BLAKE3 = createField(DSL.name("BLAKE3"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.COMPONENT.CLASSIFIER</code>.
     */
    public final TableField<ComponentRecord, String> CLASSIFIER = createField(DSL.name("CLASSIFIER"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.COMPONENT.COPYRIGHT</code>.
     */
    public final TableField<ComponentRecord, String> COPYRIGHT = createField(DSL.name("COPYRIGHT"), SQLDataType.VARCHAR(1024), this, "");

    /**
     * The column <code>public.COMPONENT.CPE</code>.
     */
    public final TableField<ComponentRecord, String> CPE = createField(DSL.name("CPE"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.COMPONENT.DESCRIPTION</code>.
     */
    public final TableField<ComponentRecord, String> DESCRIPTION = createField(DSL.name("DESCRIPTION"), SQLDataType.VARCHAR(1024), this, "");

    /**
     * The column <code>public.COMPONENT.DIRECT_DEPENDENCIES</code>.
     */
    public final TableField<ComponentRecord, JSONB> DIRECT_DEPENDENCIES = createField(DSL.name("DIRECT_DEPENDENCIES"), SQLDataType.JSONB, this, "");

    /**
     * The column <code>public.COMPONENT.EXTENSION</code>.
     */
    public final TableField<ComponentRecord, String> EXTENSION = createField(DSL.name("EXTENSION"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.COMPONENT.EXTERNAL_REFERENCES</code>.
     */
    public final TableField<ComponentRecord, byte[]> EXTERNAL_REFERENCES = createField(DSL.name("EXTERNAL_REFERENCES"), SQLDataType.BLOB, this, "");

    /**
     * The column <code>public.COMPONENT.FILENAME</code>.
     */
    public final TableField<ComponentRecord, String> FILENAME = createField(DSL.name("FILENAME"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.COMPONENT.GROUP</code>.
     */
    public final TableField<ComponentRecord, String> GROUP = createField(DSL.name("GROUP"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.COMPONENT.INTERNAL</code>.
     */
    public final TableField<ComponentRecord, Boolean> INTERNAL = createField(DSL.name("INTERNAL"), SQLDataType.BOOLEAN, this, "");

    /**
     * The column <code>public.COMPONENT.LAST_RISKSCORE</code>.
     */
    public final TableField<ComponentRecord, Double> LAST_RISKSCORE = createField(DSL.name("LAST_RISKSCORE"), SQLDataType.DOUBLE, this, "");

    /**
     * The column <code>public.COMPONENT.LICENSE</code>.
     */
    public final TableField<ComponentRecord, String> LICENSE = createField(DSL.name("LICENSE"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.COMPONENT.LICENSE_EXPRESSION</code>.
     */
    public final TableField<ComponentRecord, String> LICENSE_EXPRESSION = createField(DSL.name("LICENSE_EXPRESSION"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.COMPONENT.LICENSE_URL</code>.
     */
    public final TableField<ComponentRecord, String> LICENSE_URL = createField(DSL.name("LICENSE_URL"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.COMPONENT.MD5</code>.
     */
    public final TableField<ComponentRecord, String> MD5 = createField(DSL.name("MD5"), SQLDataType.VARCHAR(32), this, "");

    /**
     * The column <code>public.COMPONENT.NAME</code>.
     */
    public final TableField<ComponentRecord, String> NAME = createField(DSL.name("NAME"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>public.COMPONENT.TEXT</code>.
     */
    public final TableField<ComponentRecord, String> TEXT = createField(DSL.name("TEXT"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.COMPONENT.PARENT_COMPONENT_ID</code>.
     */
    public final TableField<ComponentRecord, Long> PARENT_COMPONENT_ID = createField(DSL.name("PARENT_COMPONENT_ID"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>public.COMPONENT.PROJECT_ID</code>.
     */
    public final TableField<ComponentRecord, Long> PROJECT_ID = createField(DSL.name("PROJECT_ID"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.COMPONENT.PUBLISHER</code>.
     */
    public final TableField<ComponentRecord, String> PUBLISHER = createField(DSL.name("PUBLISHER"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.COMPONENT.PURL</code>.
     */
    public final TableField<ComponentRecord, String> PURL = createField(DSL.name("PURL"), SQLDataType.VARCHAR(1024), this, "");

    /**
     * The column <code>public.COMPONENT.PURLCOORDINATES</code>.
     */
    public final TableField<ComponentRecord, String> PURLCOORDINATES = createField(DSL.name("PURLCOORDINATES"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.COMPONENT.LICENSE_ID</code>.
     */
    public final TableField<ComponentRecord, Long> LICENSE_ID = createField(DSL.name("LICENSE_ID"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>public.COMPONENT.SHA1</code>.
     */
    public final TableField<ComponentRecord, String> SHA1 = createField(DSL.name("SHA1"), SQLDataType.VARCHAR(40), this, "");

    /**
     * The column <code>public.COMPONENT.SHA_256</code>.
     */
    public final TableField<ComponentRecord, String> SHA_256 = createField(DSL.name("SHA_256"), SQLDataType.VARCHAR(64), this, "");

    /**
     * The column <code>public.COMPONENT.SHA_384</code>.
     */
    public final TableField<ComponentRecord, String> SHA_384 = createField(DSL.name("SHA_384"), SQLDataType.VARCHAR(96), this, "");

    /**
     * The column <code>public.COMPONENT.SHA3_256</code>.
     */
    public final TableField<ComponentRecord, String> SHA3_256 = createField(DSL.name("SHA3_256"), SQLDataType.VARCHAR(64), this, "");

    /**
     * The column <code>public.COMPONENT.SHA3_384</code>.
     */
    public final TableField<ComponentRecord, String> SHA3_384 = createField(DSL.name("SHA3_384"), SQLDataType.VARCHAR(96), this, "");

    /**
     * The column <code>public.COMPONENT.SHA3_512</code>.
     */
    public final TableField<ComponentRecord, String> SHA3_512 = createField(DSL.name("SHA3_512"), SQLDataType.VARCHAR(128), this, "");

    /**
     * The column <code>public.COMPONENT.SHA_512</code>.
     */
    public final TableField<ComponentRecord, String> SHA_512 = createField(DSL.name("SHA_512"), SQLDataType.VARCHAR(128), this, "");

    /**
     * The column <code>public.COMPONENT.SWIDTAGID</code>.
     */
    public final TableField<ComponentRecord, String> SWIDTAGID = createField(DSL.name("SWIDTAGID"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.COMPONENT.UUID</code>.
     */
    public final TableField<ComponentRecord, java.util.UUID> UUID = createField(DSL.name("UUID"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.COMPONENT.VERSION</code>.
     */
    public final TableField<ComponentRecord, String> VERSION = createField(DSL.name("VERSION"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.COMPONENT.SUPPLIER</code>.
     */
    public final TableField<ComponentRecord, String> SUPPLIER = createField(DSL.name("SUPPLIER"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.COMPONENT.AUTHORS</code>.
     */
    public final TableField<ComponentRecord, String> AUTHORS = createField(DSL.name("AUTHORS"), SQLDataType.CLOB, this, "");

    private Component(Name alias, Table<ComponentRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Component(Name alias, Table<ComponentRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.COMPONENT</code> table reference
     */
    public Component(String alias) {
        this(DSL.name(alias), COMPONENT);
    }

    /**
     * Create an aliased <code>public.COMPONENT</code> table reference
     */
    public Component(Name alias) {
        this(alias, COMPONENT);
    }

    /**
     * Create a <code>public.COMPONENT</code> table reference
     */
    public Component() {
        this(DSL.name("COMPONENT"), null);
    }

    public <O extends Record> Component(Table<O> path, ForeignKey<O, ComponentRecord> childPath, InverseForeignKey<O, ComponentRecord> parentPath) {
        super(path, childPath, parentPath, COMPONENT);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class ComponentPath extends Component implements Path<ComponentRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> ComponentPath(Table<O> path, ForeignKey<O, ComponentRecord> childPath, InverseForeignKey<O, ComponentRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private ComponentPath(Name alias, Table<ComponentRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public ComponentPath as(String alias) {
            return new ComponentPath(DSL.name(alias), this);
        }

        @Override
        public ComponentPath as(Name alias) {
            return new ComponentPath(alias, this);
        }

        @Override
        public ComponentPath as(Table<?> alias) {
            return new ComponentPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.COMPONENT_BLAKE2B_256_IDX, Indexes.COMPONENT_BLAKE2B_384_IDX, Indexes.COMPONENT_BLAKE2B_512_IDX, Indexes.COMPONENT_BLAKE3_IDX, Indexes.COMPONENT_CLASSIFIER_IDX, Indexes.COMPONENT_CPE_IDX, Indexes.COMPONENT_DIRECT_DEPENDENCIES_JSONB_IDX, Indexes.COMPONENT_GROUP_IDX, Indexes.COMPONENT_LAST_RISKSCORE_IDX, Indexes.COMPONENT_LICENSE_ID_IDX, Indexes.COMPONENT_MD5_IDX, Indexes.COMPONENT_NAME_IDX, Indexes.COMPONENT_PARENT_COMPONENT_ID_IDX, Indexes.COMPONENT_PROJECT_ID_IDX, Indexes.COMPONENT_PURL_COORDINATES_IDX, Indexes.COMPONENT_PURL_IDX, Indexes.COMPONENT_SHA1_IDX, Indexes.COMPONENT_SHA3_256_IDX, Indexes.COMPONENT_SHA3_384_IDX, Indexes.COMPONENT_SHA3_512_IDX, Indexes.COMPONENT_SHA_256_IDX, Indexes.COMPONENT_SHA_384_IDX, Indexes.COMPONENT_SHA_512_IDX, Indexes.COMPONENT_SWID_TAGID_IDX);
    }

    @Override
    public Identity<ComponentRecord, Long> getIdentity() {
        return (Identity<ComponentRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<ComponentRecord> getPrimaryKey() {
        return Keys.COMPONENT_PK;
    }

    @Override
    public List<UniqueKey<ComponentRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.COMPONENT_UUID_IDX);
    }

    @Override
    public List<ForeignKey<ComponentRecord, ?>> getReferences() {
        return Arrays.asList(Keys.COMPONENT__COMPONENT_COMPONENT_FK, Keys.COMPONENT__COMPONENT_LICENSE_FK, Keys.COMPONENT__COMPONENT_PROJECT_FK);
    }

    private transient ComponentPath _component;

    /**
     * Get the implicit join path to the <code>public.COMPONENT</code> table.
     */
    public ComponentPath component() {
        if (_component == null)
            _component = new ComponentPath(this, Keys.COMPONENT__COMPONENT_COMPONENT_FK, null);

        return _component;
    }

    private transient LicensePath _license;

    /**
     * Get the implicit join path to the <code>public.LICENSE</code> table.
     */
    public LicensePath license() {
        if (_license == null)
            _license = new LicensePath(this, Keys.COMPONENT__COMPONENT_LICENSE_FK, null);

        return _license;
    }

    private transient ProjectPath _project;

    /**
     * Get the implicit join path to the <code>public.PROJECT</code> table.
     */
    public ProjectPath project() {
        if (_project == null)
            _project = new ProjectPath(this, Keys.COMPONENT__COMPONENT_PROJECT_FK, null);

        return _project;
    }

    private transient AnalysisPath _analysis;

    /**
     * Get the implicit to-many join path to the <code>public.ANALYSIS</code>
     * table
     */
    public AnalysisPath analysis() {
        if (_analysis == null)
            _analysis = new AnalysisPath(this, null, Keys.ANALYSIS__ANALYSIS_COMPONENT_FK.getInverseKey());

        return _analysis;
    }

    private transient ComponentOccurrencePath _componentOccurrence;

    /**
     * Get the implicit to-many join path to the
     * <code>public.COMPONENT_OCCURRENCE</code> table
     */
    public ComponentOccurrencePath componentOccurrence() {
        if (_componentOccurrence == null)
            _componentOccurrence = new ComponentOccurrencePath(this, null, Keys.COMPONENT_OCCURRENCE__COMPONENT_OCCURRENCE_COMPONENT_FK.getInverseKey());

        return _componentOccurrence;
    }

    private transient ComponentPropertyPath _componentProperty;

    /**
     * Get the implicit to-many join path to the
     * <code>public.COMPONENT_PROPERTY</code> table
     */
    public ComponentPropertyPath componentProperty() {
        if (_componentProperty == null)
            _componentProperty = new ComponentPropertyPath(this, null, Keys.COMPONENT_PROPERTY__COMPONENT_PROPERTY_COMPONENT_ID_FK.getInverseKey());

        return _componentProperty;
    }

    private transient ComponentsVulnerabilitiesPath _componentsVulnerabilities;

    /**
     * Get the implicit to-many join path to the
     * <code>public.COMPONENTS_VULNERABILITIES</code> table
     */
    public ComponentsVulnerabilitiesPath componentsVulnerabilities() {
        if (_componentsVulnerabilities == null)
            _componentsVulnerabilities = new ComponentsVulnerabilitiesPath(this, null, Keys.COMPONENTS_VULNERABILITIES__COMPONENTS_VULNERABILITIES_COMPONENT_FK.getInverseKey());

        return _componentsVulnerabilities;
    }

    private transient DependencymetricsPath _dependencymetrics;

    /**
     * Get the implicit to-many join path to the
     * <code>public.DEPENDENCYMETRICS</code> table
     */
    public DependencymetricsPath dependencymetrics() {
        if (_dependencymetrics == null)
            _dependencymetrics = new DependencymetricsPath(this, null, Keys.DEPENDENCYMETRICS__DEPENDENCYMETRICS_COMPONENT_FK.getInverseKey());

        return _dependencymetrics;
    }

    private transient FindingattributionPath _findingattribution;

    /**
     * Get the implicit to-many join path to the
     * <code>public.FINDINGATTRIBUTION</code> table
     */
    public FindingattributionPath findingattribution() {
        if (_findingattribution == null)
            _findingattribution = new FindingattributionPath(this, null, Keys.FINDINGATTRIBUTION__FINDINGATTRIBUTION_COMPONENT_FK.getInverseKey());

        return _findingattribution;
    }

    private transient IntegrityAnalysisPath _integrityAnalysis;

    /**
     * Get the implicit to-many join path to the
     * <code>public.INTEGRITY_ANALYSIS</code> table
     */
    public IntegrityAnalysisPath integrityAnalysis() {
        if (_integrityAnalysis == null)
            _integrityAnalysis = new IntegrityAnalysisPath(this, null, Keys.INTEGRITY_ANALYSIS__INTEGRITY_ANALYSIS_COMPONENT_FK.getInverseKey());

        return _integrityAnalysis;
    }

    private transient PolicyviolationPath _policyviolation;

    /**
     * Get the implicit to-many join path to the
     * <code>public.POLICYVIOLATION</code> table
     */
    public PolicyviolationPath policyviolation() {
        if (_policyviolation == null)
            _policyviolation = new PolicyviolationPath(this, null, Keys.POLICYVIOLATION__POLICYVIOLATION_COMPONENT_FK.getInverseKey());

        return _policyviolation;
    }

    private transient ViolationanalysisPath _violationanalysis;

    /**
     * Get the implicit to-many join path to the
     * <code>public.VIOLATIONANALYSIS</code> table
     */
    public ViolationanalysisPath violationanalysis() {
        if (_violationanalysis == null)
            _violationanalysis = new ViolationanalysisPath(this, null, Keys.VIOLATIONANALYSIS__VIOLATIONANALYSIS_COMPONENT_FK.getInverseKey());

        return _violationanalysis;
    }

    @Override
    public List<Check<ComponentRecord>> getChecks() {
        return Arrays.asList(
            Internal.createCheck(this, DSL.name("COMPONENT_CLASSIFIER_check"), "(((\"CLASSIFIER\" IS NULL) OR ((\"CLASSIFIER\")::text = ANY (ARRAY['APPLICATION'::text, 'CONTAINER'::text, 'DEVICE'::text, 'FILE'::text, 'FIRMWARE'::text, 'FRAMEWORK'::text, 'LIBRARY'::text, 'OPERATING_SYSTEM'::text]))))", true)
        );
    }

    @Override
    public Component as(String alias) {
        return new Component(DSL.name(alias), this);
    }

    @Override
    public Component as(Name alias) {
        return new Component(alias, this);
    }

    @Override
    public Component as(Table<?> alias) {
        return new Component(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Component rename(String name) {
        return new Component(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Component rename(Name name) {
        return new Component(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Component rename(Table<?> name) {
        return new Component(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Component where(Condition condition) {
        return new Component(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Component where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Component where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Component where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Component where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Component where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Component where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Component where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Component whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Component whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
