/*
 * This file is generated by jOOQ.
 */
package org.dependencytrack.persistence.jooq.generated.tables;


import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.dependencytrack.persistence.jooq.generated.Indexes;
import org.dependencytrack.persistence.jooq.generated.Keys;
import org.dependencytrack.persistence.jooq.generated.Public;
import org.dependencytrack.persistence.jooq.generated.tables.Component.ComponentPath;
import org.dependencytrack.persistence.jooq.generated.tables.Project.ProjectPath;
import org.dependencytrack.persistence.jooq.generated.tables.Vulnerability.VulnerabilityPath;
import org.dependencytrack.persistence.jooq.generated.tables.records.FindingattributionRecord;
import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Findingattribution extends TableImpl<FindingattributionRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.FINDINGATTRIBUTION</code>
     */
    public static final Findingattribution FINDINGATTRIBUTION = new Findingattribution();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<FindingattributionRecord> getRecordType() {
        return FindingattributionRecord.class;
    }

    /**
     * The column <code>public.FINDINGATTRIBUTION.ID</code>.
     */
    public final TableField<FindingattributionRecord, Long> ID = createField(DSL.name("ID"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.FINDINGATTRIBUTION.ALT_ID</code>.
     */
    public final TableField<FindingattributionRecord, String> ALT_ID = createField(DSL.name("ALT_ID"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.FINDINGATTRIBUTION.ANALYZERIDENTITY</code>.
     */
    public final TableField<FindingattributionRecord, String> ANALYZERIDENTITY = createField(DSL.name("ANALYZERIDENTITY"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>public.FINDINGATTRIBUTION.ATTRIBUTED_ON</code>.
     */
    public final TableField<FindingattributionRecord, OffsetDateTime> ATTRIBUTED_ON = createField(DSL.name("ATTRIBUTED_ON"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).nullable(false), this, "");

    /**
     * The column <code>public.FINDINGATTRIBUTION.COMPONENT_ID</code>.
     */
    public final TableField<FindingattributionRecord, Long> COMPONENT_ID = createField(DSL.name("COMPONENT_ID"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.FINDINGATTRIBUTION.PROJECT_ID</code>.
     */
    public final TableField<FindingattributionRecord, Long> PROJECT_ID = createField(DSL.name("PROJECT_ID"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.FINDINGATTRIBUTION.REFERENCE_URL</code>.
     */
    public final TableField<FindingattributionRecord, String> REFERENCE_URL = createField(DSL.name("REFERENCE_URL"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.FINDINGATTRIBUTION.UUID</code>.
     */
    public final TableField<FindingattributionRecord, java.util.UUID> UUID = createField(DSL.name("UUID"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.FINDINGATTRIBUTION.VULNERABILITY_ID</code>.
     */
    public final TableField<FindingattributionRecord, Long> VULNERABILITY_ID = createField(DSL.name("VULNERABILITY_ID"), SQLDataType.BIGINT.nullable(false), this, "");

    private Findingattribution(Name alias, Table<FindingattributionRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Findingattribution(Name alias, Table<FindingattributionRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.FINDINGATTRIBUTION</code> table reference
     */
    public Findingattribution(String alias) {
        this(DSL.name(alias), FINDINGATTRIBUTION);
    }

    /**
     * Create an aliased <code>public.FINDINGATTRIBUTION</code> table reference
     */
    public Findingattribution(Name alias) {
        this(alias, FINDINGATTRIBUTION);
    }

    /**
     * Create a <code>public.FINDINGATTRIBUTION</code> table reference
     */
    public Findingattribution() {
        this(DSL.name("FINDINGATTRIBUTION"), null);
    }

    public <O extends Record> Findingattribution(Table<O> path, ForeignKey<O, FindingattributionRecord> childPath, InverseForeignKey<O, FindingattributionRecord> parentPath) {
        super(path, childPath, parentPath, FINDINGATTRIBUTION);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class FindingattributionPath extends Findingattribution implements Path<FindingattributionRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> FindingattributionPath(Table<O> path, ForeignKey<O, FindingattributionRecord> childPath, InverseForeignKey<O, FindingattributionRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private FindingattributionPath(Name alias, Table<FindingattributionRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public FindingattributionPath as(String alias) {
            return new FindingattributionPath(DSL.name(alias), this);
        }

        @Override
        public FindingattributionPath as(Name alias) {
            return new FindingattributionPath(alias, this);
        }

        @Override
        public FindingattributionPath as(Table<?> alias) {
            return new FindingattributionPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.FINDINGATTRIBUTION_COMPOUND_IDX, Indexes.FINDINGATTRIBUTION_PROJECT_ID_IDX, Indexes.FINDINGATTRIBUTION_VULNERABILITY_ID_IDX);
    }

    @Override
    public Identity<FindingattributionRecord, Long> getIdentity() {
        return (Identity<FindingattributionRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<FindingattributionRecord> getPrimaryKey() {
        return Keys.FINDINGATTRIBUTION_PK;
    }

    @Override
    public List<UniqueKey<FindingattributionRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.FINDINGATTRIBUTION_UUID_IDX);
    }

    @Override
    public List<ForeignKey<FindingattributionRecord, ?>> getReferences() {
        return Arrays.asList(Keys.FINDINGATTRIBUTION__FINDINGATTRIBUTION_COMPONENT_FK, Keys.FINDINGATTRIBUTION__FINDINGATTRIBUTION_PROJECT_FK, Keys.FINDINGATTRIBUTION__FINDINGATTRIBUTION_VULNERABILITY_FK);
    }

    private transient ComponentPath _component;

    /**
     * Get the implicit join path to the <code>public.COMPONENT</code> table.
     */
    public ComponentPath component() {
        if (_component == null)
            _component = new ComponentPath(this, Keys.FINDINGATTRIBUTION__FINDINGATTRIBUTION_COMPONENT_FK, null);

        return _component;
    }

    private transient ProjectPath _project;

    /**
     * Get the implicit join path to the <code>public.PROJECT</code> table.
     */
    public ProjectPath project() {
        if (_project == null)
            _project = new ProjectPath(this, Keys.FINDINGATTRIBUTION__FINDINGATTRIBUTION_PROJECT_FK, null);

        return _project;
    }

    private transient VulnerabilityPath _vulnerability;

    /**
     * Get the implicit join path to the <code>public.VULNERABILITY</code>
     * table.
     */
    public VulnerabilityPath vulnerability() {
        if (_vulnerability == null)
            _vulnerability = new VulnerabilityPath(this, Keys.FINDINGATTRIBUTION__FINDINGATTRIBUTION_VULNERABILITY_FK, null);

        return _vulnerability;
    }

    @Override
    public Findingattribution as(String alias) {
        return new Findingattribution(DSL.name(alias), this);
    }

    @Override
    public Findingattribution as(Name alias) {
        return new Findingattribution(alias, this);
    }

    @Override
    public Findingattribution as(Table<?> alias) {
        return new Findingattribution(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Findingattribution rename(String name) {
        return new Findingattribution(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Findingattribution rename(Name name) {
        return new Findingattribution(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Findingattribution rename(Table<?> name) {
        return new Findingattribution(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Findingattribution where(Condition condition) {
        return new Findingattribution(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Findingattribution where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Findingattribution where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Findingattribution where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Findingattribution where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Findingattribution where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Findingattribution where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Findingattribution where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Findingattribution whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Findingattribution whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
