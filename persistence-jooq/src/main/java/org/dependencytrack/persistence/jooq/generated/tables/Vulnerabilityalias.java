/*
 * This file is generated by jOOQ.
 */
package org.dependencytrack.persistence.jooq.generated.tables;


import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.dependencytrack.persistence.jooq.generated.Indexes;
import org.dependencytrack.persistence.jooq.generated.Keys;
import org.dependencytrack.persistence.jooq.generated.Public;
import org.dependencytrack.persistence.jooq.generated.tables.records.VulnerabilityaliasRecord;
import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Vulnerabilityalias extends TableImpl<VulnerabilityaliasRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.VULNERABILITYALIAS</code>
     */
    public static final Vulnerabilityalias VULNERABILITYALIAS = new Vulnerabilityalias();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<VulnerabilityaliasRecord> getRecordType() {
        return VulnerabilityaliasRecord.class;
    }

    /**
     * The column <code>public.VULNERABILITYALIAS.ID</code>.
     */
    public final TableField<VulnerabilityaliasRecord, Long> ID = createField(DSL.name("ID"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.VULNERABILITYALIAS.CVE_ID</code>.
     */
    public final TableField<VulnerabilityaliasRecord, String> CVE_ID = createField(DSL.name("CVE_ID"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.VULNERABILITYALIAS.GHSA_ID</code>.
     */
    public final TableField<VulnerabilityaliasRecord, String> GHSA_ID = createField(DSL.name("GHSA_ID"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.VULNERABILITYALIAS.GSD_ID</code>.
     */
    public final TableField<VulnerabilityaliasRecord, String> GSD_ID = createField(DSL.name("GSD_ID"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.VULNERABILITYALIAS.INTERNAL_ID</code>.
     */
    public final TableField<VulnerabilityaliasRecord, String> INTERNAL_ID = createField(DSL.name("INTERNAL_ID"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.VULNERABILITYALIAS.OSV_ID</code>.
     */
    public final TableField<VulnerabilityaliasRecord, String> OSV_ID = createField(DSL.name("OSV_ID"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.VULNERABILITYALIAS.SNYK_ID</code>.
     */
    public final TableField<VulnerabilityaliasRecord, String> SNYK_ID = createField(DSL.name("SNYK_ID"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.VULNERABILITYALIAS.SONATYPE_ID</code>.
     */
    public final TableField<VulnerabilityaliasRecord, String> SONATYPE_ID = createField(DSL.name("SONATYPE_ID"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.VULNERABILITYALIAS.UUID</code>.
     */
    public final TableField<VulnerabilityaliasRecord, java.util.UUID> UUID = createField(DSL.name("UUID"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.VULNERABILITYALIAS.VULNDB_ID</code>.
     */
    public final TableField<VulnerabilityaliasRecord, String> VULNDB_ID = createField(DSL.name("VULNDB_ID"), SQLDataType.VARCHAR(255), this, "");

    private Vulnerabilityalias(Name alias, Table<VulnerabilityaliasRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Vulnerabilityalias(Name alias, Table<VulnerabilityaliasRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.VULNERABILITYALIAS</code> table reference
     */
    public Vulnerabilityalias(String alias) {
        this(DSL.name(alias), VULNERABILITYALIAS);
    }

    /**
     * Create an aliased <code>public.VULNERABILITYALIAS</code> table reference
     */
    public Vulnerabilityalias(Name alias) {
        this(alias, VULNERABILITYALIAS);
    }

    /**
     * Create a <code>public.VULNERABILITYALIAS</code> table reference
     */
    public Vulnerabilityalias() {
        this(DSL.name("VULNERABILITYALIAS"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.VULNERABILITYALIAS_CVE_ID_IDX, Indexes.VULNERABILITYALIAS_GHSA_ID_IDX, Indexes.VULNERABILITYALIAS_GSD_ID_IDX, Indexes.VULNERABILITYALIAS_INTERNAL_ID_IDX, Indexes.VULNERABILITYALIAS_OSV_ID_IDX, Indexes.VULNERABILITYALIAS_SNYK_ID_IDX, Indexes.VULNERABILITYALIAS_SONATYPE_ID_IDX, Indexes.VULNERABILITYALIAS_VULNDB_ID_IDX);
    }

    @Override
    public Identity<VulnerabilityaliasRecord, Long> getIdentity() {
        return (Identity<VulnerabilityaliasRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<VulnerabilityaliasRecord> getPrimaryKey() {
        return Keys.VULNERABILITYALIAS_PK;
    }

    @Override
    public List<UniqueKey<VulnerabilityaliasRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.VULNERABILITYALIAS_UUID_IDX);
    }

    @Override
    public Vulnerabilityalias as(String alias) {
        return new Vulnerabilityalias(DSL.name(alias), this);
    }

    @Override
    public Vulnerabilityalias as(Name alias) {
        return new Vulnerabilityalias(alias, this);
    }

    @Override
    public Vulnerabilityalias as(Table<?> alias) {
        return new Vulnerabilityalias(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Vulnerabilityalias rename(String name) {
        return new Vulnerabilityalias(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Vulnerabilityalias rename(Name name) {
        return new Vulnerabilityalias(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Vulnerabilityalias rename(Table<?> name) {
        return new Vulnerabilityalias(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Vulnerabilityalias where(Condition condition) {
        return new Vulnerabilityalias(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Vulnerabilityalias where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Vulnerabilityalias where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Vulnerabilityalias where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Vulnerabilityalias where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Vulnerabilityalias where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Vulnerabilityalias where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Vulnerabilityalias where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Vulnerabilityalias whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Vulnerabilityalias whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
