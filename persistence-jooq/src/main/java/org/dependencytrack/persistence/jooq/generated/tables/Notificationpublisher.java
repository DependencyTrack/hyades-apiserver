/*
 * This file is generated by jOOQ.
 */
package org.dependencytrack.persistence.jooq.generated.tables;


import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.dependencytrack.persistence.jooq.generated.Keys;
import org.dependencytrack.persistence.jooq.generated.Public;
import org.dependencytrack.persistence.jooq.generated.tables.Notificationrule.NotificationrulePath;
import org.dependencytrack.persistence.jooq.generated.tables.records.NotificationpublisherRecord;
import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Notificationpublisher extends TableImpl<NotificationpublisherRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.NOTIFICATIONPUBLISHER</code>
     */
    public static final Notificationpublisher NOTIFICATIONPUBLISHER = new Notificationpublisher();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<NotificationpublisherRecord> getRecordType() {
        return NotificationpublisherRecord.class;
    }

    /**
     * The column <code>public.NOTIFICATIONPUBLISHER.ID</code>.
     */
    public final TableField<NotificationpublisherRecord, Long> ID = createField(DSL.name("ID"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.NOTIFICATIONPUBLISHER.DEFAULT_PUBLISHER</code>.
     */
    public final TableField<NotificationpublisherRecord, Boolean> DEFAULT_PUBLISHER = createField(DSL.name("DEFAULT_PUBLISHER"), SQLDataType.BOOLEAN.nullable(false), this, "");

    /**
     * The column <code>public.NOTIFICATIONPUBLISHER.DESCRIPTION</code>.
     */
    public final TableField<NotificationpublisherRecord, String> DESCRIPTION = createField(DSL.name("DESCRIPTION"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.NOTIFICATIONPUBLISHER.NAME</code>.
     */
    public final TableField<NotificationpublisherRecord, String> NAME = createField(DSL.name("NAME"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>public.NOTIFICATIONPUBLISHER.PUBLISHER_CLASS</code>.
     */
    public final TableField<NotificationpublisherRecord, String> PUBLISHER_CLASS = createField(DSL.name("PUBLISHER_CLASS"), SQLDataType.VARCHAR(1024).nullable(false), this, "");

    /**
     * The column <code>public.NOTIFICATIONPUBLISHER.TEMPLATE</code>.
     */
    public final TableField<NotificationpublisherRecord, String> TEMPLATE = createField(DSL.name("TEMPLATE"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.NOTIFICATIONPUBLISHER.TEMPLATE_MIME_TYPE</code>.
     */
    public final TableField<NotificationpublisherRecord, String> TEMPLATE_MIME_TYPE = createField(DSL.name("TEMPLATE_MIME_TYPE"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>public.NOTIFICATIONPUBLISHER.UUID</code>.
     */
    public final TableField<NotificationpublisherRecord, java.util.UUID> UUID = createField(DSL.name("UUID"), SQLDataType.UUID.nullable(false), this, "");

    private Notificationpublisher(Name alias, Table<NotificationpublisherRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Notificationpublisher(Name alias, Table<NotificationpublisherRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.NOTIFICATIONPUBLISHER</code> table
     * reference
     */
    public Notificationpublisher(String alias) {
        this(DSL.name(alias), NOTIFICATIONPUBLISHER);
    }

    /**
     * Create an aliased <code>public.NOTIFICATIONPUBLISHER</code> table
     * reference
     */
    public Notificationpublisher(Name alias) {
        this(alias, NOTIFICATIONPUBLISHER);
    }

    /**
     * Create a <code>public.NOTIFICATIONPUBLISHER</code> table reference
     */
    public Notificationpublisher() {
        this(DSL.name("NOTIFICATIONPUBLISHER"), null);
    }

    public <O extends Record> Notificationpublisher(Table<O> path, ForeignKey<O, NotificationpublisherRecord> childPath, InverseForeignKey<O, NotificationpublisherRecord> parentPath) {
        super(path, childPath, parentPath, NOTIFICATIONPUBLISHER);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class NotificationpublisherPath extends Notificationpublisher implements Path<NotificationpublisherRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> NotificationpublisherPath(Table<O> path, ForeignKey<O, NotificationpublisherRecord> childPath, InverseForeignKey<O, NotificationpublisherRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private NotificationpublisherPath(Name alias, Table<NotificationpublisherRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public NotificationpublisherPath as(String alias) {
            return new NotificationpublisherPath(DSL.name(alias), this);
        }

        @Override
        public NotificationpublisherPath as(Name alias) {
            return new NotificationpublisherPath(alias, this);
        }

        @Override
        public NotificationpublisherPath as(Table<?> alias) {
            return new NotificationpublisherPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public Identity<NotificationpublisherRecord, Long> getIdentity() {
        return (Identity<NotificationpublisherRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<NotificationpublisherRecord> getPrimaryKey() {
        return Keys.NOTIFICATIONPUBLISHER_PK;
    }

    @Override
    public List<UniqueKey<NotificationpublisherRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.NOTIFICATIONPUBLISHER_UUID_IDX);
    }

    private transient NotificationrulePath _notificationrule;

    /**
     * Get the implicit to-many join path to the
     * <code>public.NOTIFICATIONRULE</code> table
     */
    public NotificationrulePath notificationrule() {
        if (_notificationrule == null)
            _notificationrule = new NotificationrulePath(this, null, Keys.NOTIFICATIONRULE__NOTIFICATIONRULE_NOTIFICATIONPUBLISHER_FK.getInverseKey());

        return _notificationrule;
    }

    @Override
    public Notificationpublisher as(String alias) {
        return new Notificationpublisher(DSL.name(alias), this);
    }

    @Override
    public Notificationpublisher as(Name alias) {
        return new Notificationpublisher(alias, this);
    }

    @Override
    public Notificationpublisher as(Table<?> alias) {
        return new Notificationpublisher(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Notificationpublisher rename(String name) {
        return new Notificationpublisher(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Notificationpublisher rename(Name name) {
        return new Notificationpublisher(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Notificationpublisher rename(Table<?> name) {
        return new Notificationpublisher(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Notificationpublisher where(Condition condition) {
        return new Notificationpublisher(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Notificationpublisher where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Notificationpublisher where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Notificationpublisher where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Notificationpublisher where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Notificationpublisher where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Notificationpublisher where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Notificationpublisher where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Notificationpublisher whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Notificationpublisher whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
