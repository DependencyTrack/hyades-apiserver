/*
 * This file is generated by jOOQ.
 */
package org.dependencytrack.persistence.jooq.generated.tables;


import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.dependencytrack.persistence.jooq.generated.Indexes;
import org.dependencytrack.persistence.jooq.generated.Keys;
import org.dependencytrack.persistence.jooq.generated.Public;
import org.dependencytrack.persistence.jooq.generated.tables.Project.ProjectPath;
import org.dependencytrack.persistence.jooq.generated.tables.ServiceComponent.ServicecomponentPath;
import org.dependencytrack.persistence.jooq.generated.tables.ServiceComponentsVulnerabilities.ServicecomponentsVulnerabilitiesPath;
import org.dependencytrack.persistence.jooq.generated.tables.records.ServiceComponentRecord;
import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class ServiceComponent extends TableImpl<ServiceComponentRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.SERVICECOMPONENT</code>
     */
    public static final ServiceComponent SERVICECOMPONENT = new ServiceComponent();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ServiceComponentRecord> getRecordType() {
        return ServiceComponentRecord.class;
    }

    /**
     * The column <code>public.SERVICECOMPONENT.ID</code>.
     */
    public final TableField<ServiceComponentRecord, Long> ID = createField(DSL.name("ID"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.SERVICECOMPONENT.AUTHENTICATED</code>.
     */
    public final TableField<ServiceComponentRecord, Boolean> AUTHENTICATED = createField(DSL.name("AUTHENTICATED"), SQLDataType.BOOLEAN, this, "");

    /**
     * The column <code>public.SERVICECOMPONENT.X_TRUST_BOUNDARY</code>.
     */
    public final TableField<ServiceComponentRecord, Boolean> X_TRUST_BOUNDARY = createField(DSL.name("X_TRUST_BOUNDARY"), SQLDataType.BOOLEAN, this, "");

    /**
     * The column <code>public.SERVICECOMPONENT.DATA</code>.
     */
    public final TableField<ServiceComponentRecord, byte[]> DATA = createField(DSL.name("DATA"), SQLDataType.BLOB, this, "");

    /**
     * The column <code>public.SERVICECOMPONENT.DESCRIPTION</code>.
     */
    public final TableField<ServiceComponentRecord, String> DESCRIPTION = createField(DSL.name("DESCRIPTION"), SQLDataType.VARCHAR(1024), this, "");

    /**
     * The column <code>public.SERVICECOMPONENT.ENDPOINTS</code>.
     */
    public final TableField<ServiceComponentRecord, byte[]> ENDPOINTS = createField(DSL.name("ENDPOINTS"), SQLDataType.BLOB, this, "");

    /**
     * The column <code>public.SERVICECOMPONENT.EXTERNAL_REFERENCES</code>.
     */
    public final TableField<ServiceComponentRecord, byte[]> EXTERNAL_REFERENCES = createField(DSL.name("EXTERNAL_REFERENCES"), SQLDataType.BLOB, this, "");

    /**
     * The column <code>public.SERVICECOMPONENT.GROUP</code>.
     */
    public final TableField<ServiceComponentRecord, String> GROUP = createField(DSL.name("GROUP"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.SERVICECOMPONENT.LAST_RISKSCORE</code>.
     */
    public final TableField<ServiceComponentRecord, Double> LAST_RISKSCORE = createField(DSL.name("LAST_RISKSCORE"), SQLDataType.DOUBLE.nullable(false).defaultValue(DSL.field(DSL.raw("'0'::double precision"), SQLDataType.DOUBLE)), this, "");

    /**
     * The column <code>public.SERVICECOMPONENT.NAME</code>.
     */
    public final TableField<ServiceComponentRecord, String> NAME = createField(DSL.name("NAME"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>public.SERVICECOMPONENT.TEXT</code>.
     */
    public final TableField<ServiceComponentRecord, String> TEXT = createField(DSL.name("TEXT"), SQLDataType.CLOB, this, "");

    /**
     * The column
     * <code>public.SERVICECOMPONENT.PARENT_SERVICECOMPONENT_ID</code>.
     */
    public final TableField<ServiceComponentRecord, Long> PARENT_SERVICECOMPONENT_ID = createField(DSL.name("PARENT_SERVICECOMPONENT_ID"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>public.SERVICECOMPONENT.PROJECT_ID</code>.
     */
    public final TableField<ServiceComponentRecord, Long> PROJECT_ID = createField(DSL.name("PROJECT_ID"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.SERVICECOMPONENT.PROVIDER_ID</code>.
     */
    public final TableField<ServiceComponentRecord, byte[]> PROVIDER_ID = createField(DSL.name("PROVIDER_ID"), SQLDataType.BLOB, this, "");

    /**
     * The column <code>public.SERVICECOMPONENT.UUID</code>.
     */
    public final TableField<ServiceComponentRecord, java.util.UUID> UUID = createField(DSL.name("UUID"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.SERVICECOMPONENT.VERSION</code>.
     */
    public final TableField<ServiceComponentRecord, String> VERSION = createField(DSL.name("VERSION"), SQLDataType.VARCHAR(255), this, "");

    private ServiceComponent(Name alias, Table<ServiceComponentRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private ServiceComponent(Name alias, Table<ServiceComponentRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.SERVICECOMPONENT</code> table reference
     */
    public ServiceComponent(String alias) {
        this(DSL.name(alias), SERVICECOMPONENT);
    }

    /**
     * Create an aliased <code>public.SERVICECOMPONENT</code> table reference
     */
    public ServiceComponent(Name alias) {
        this(alias, SERVICECOMPONENT);
    }

    /**
     * Create a <code>public.SERVICECOMPONENT</code> table reference
     */
    public ServiceComponent() {
        this(DSL.name("SERVICECOMPONENT"), null);
    }

    public <O extends Record> ServiceComponent(Table<O> path, ForeignKey<O, ServiceComponentRecord> childPath, InverseForeignKey<O, ServiceComponentRecord> parentPath) {
        super(path, childPath, parentPath, SERVICECOMPONENT);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class ServicecomponentPath extends ServiceComponent implements Path<ServiceComponentRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> ServicecomponentPath(Table<O> path, ForeignKey<O, ServiceComponentRecord> childPath, InverseForeignKey<O, ServiceComponentRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private ServicecomponentPath(Name alias, Table<ServiceComponentRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public ServicecomponentPath as(String alias) {
            return new ServicecomponentPath(DSL.name(alias), this);
        }

        @Override
        public ServicecomponentPath as(Name alias) {
            return new ServicecomponentPath(alias, this);
        }

        @Override
        public ServicecomponentPath as(Table<?> alias) {
            return new ServicecomponentPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.SERVICECOMPONENT_LAST_RISKSCORE_IDX, Indexes.SERVICECOMPONENT_PARENT_SERVICECOMPONENT_ID_IDX, Indexes.SERVICECOMPONENT_PROJECT_ID_IDX);
    }

    @Override
    public Identity<ServiceComponentRecord, Long> getIdentity() {
        return (Identity<ServiceComponentRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<ServiceComponentRecord> getPrimaryKey() {
        return Keys.SERVICECOMPONENT_PK;
    }

    @Override
    public List<UniqueKey<ServiceComponentRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.SERVICECOMPONENT_UUID_IDX);
    }

    @Override
    public List<ForeignKey<ServiceComponentRecord, ?>> getReferences() {
        return Arrays.asList(Keys.SERVICECOMPONENT__SERVICECOMPONENT_PROJECT_FK, Keys.SERVICECOMPONENT__SERVICECOMPONENT_SERVICECOMPONENT_FK);
    }

    private transient ProjectPath _project;

    /**
     * Get the implicit join path to the <code>public.PROJECT</code> table.
     */
    public ProjectPath project() {
        if (_project == null)
            _project = new ProjectPath(this, Keys.SERVICECOMPONENT__SERVICECOMPONENT_PROJECT_FK, null);

        return _project;
    }

    private transient ServicecomponentPath _servicecomponent;

    /**
     * Get the implicit join path to the <code>public.SERVICECOMPONENT</code>
     * table.
     */
    public ServicecomponentPath servicecomponent() {
        if (_servicecomponent == null)
            _servicecomponent = new ServicecomponentPath(this, Keys.SERVICECOMPONENT__SERVICECOMPONENT_SERVICECOMPONENT_FK, null);

        return _servicecomponent;
    }

    private transient ServicecomponentsVulnerabilitiesPath _servicecomponentsVulnerabilities;

    /**
     * Get the implicit to-many join path to the
     * <code>public.SERVICECOMPONENTS_VULNERABILITIES</code> table
     */
    public ServicecomponentsVulnerabilitiesPath servicecomponentsVulnerabilities() {
        if (_servicecomponentsVulnerabilities == null)
            _servicecomponentsVulnerabilities = new ServicecomponentsVulnerabilitiesPath(this, null, Keys.SERVICECOMPONENTS_VULNERABILITIES__SERVICECOMPONENTS_VULNERABILITIES_SERVICECOMPONENT_FK.getInverseKey());

        return _servicecomponentsVulnerabilities;
    }

    @Override
    public ServiceComponent as(String alias) {
        return new ServiceComponent(DSL.name(alias), this);
    }

    @Override
    public ServiceComponent as(Name alias) {
        return new ServiceComponent(alias, this);
    }

    @Override
    public ServiceComponent as(Table<?> alias) {
        return new ServiceComponent(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public ServiceComponent rename(String name) {
        return new ServiceComponent(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ServiceComponent rename(Name name) {
        return new ServiceComponent(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public ServiceComponent rename(Table<?> name) {
        return new ServiceComponent(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ServiceComponent where(Condition condition) {
        return new ServiceComponent(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ServiceComponent where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ServiceComponent where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ServiceComponent where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public ServiceComponent where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public ServiceComponent where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public ServiceComponent where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public ServiceComponent where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ServiceComponent whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ServiceComponent whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
