/*
 * This file is generated by jOOQ.
 */
package org.dependencytrack.persistence.jooq.generated.tables;


import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.dependencytrack.persistence.jooq.generated.Indexes;
import org.dependencytrack.persistence.jooq.generated.Keys;
import org.dependencytrack.persistence.jooq.generated.Public;
import org.dependencytrack.persistence.jooq.generated.tables.Servicecomponent.ServicecomponentPath;
import org.dependencytrack.persistence.jooq.generated.tables.Vulnerability.VulnerabilityPath;
import org.dependencytrack.persistence.jooq.generated.tables.records.ServicecomponentsVulnerabilitiesRecord;
import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class ServicecomponentsVulnerabilities extends TableImpl<ServicecomponentsVulnerabilitiesRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of
     * <code>public.SERVICECOMPONENTS_VULNERABILITIES</code>
     */
    public static final ServicecomponentsVulnerabilities SERVICECOMPONENTS_VULNERABILITIES = new ServicecomponentsVulnerabilities();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ServicecomponentsVulnerabilitiesRecord> getRecordType() {
        return ServicecomponentsVulnerabilitiesRecord.class;
    }

    /**
     * The column
     * <code>public.SERVICECOMPONENTS_VULNERABILITIES.VULNERABILITY_ID</code>.
     */
    public final TableField<ServicecomponentsVulnerabilitiesRecord, Long> VULNERABILITY_ID = createField(DSL.name("VULNERABILITY_ID"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column
     * <code>public.SERVICECOMPONENTS_VULNERABILITIES.SERVICECOMPONENT_ID</code>.
     */
    public final TableField<ServicecomponentsVulnerabilitiesRecord, Long> SERVICECOMPONENT_ID = createField(DSL.name("SERVICECOMPONENT_ID"), SQLDataType.BIGINT.nullable(false), this, "");

    private ServicecomponentsVulnerabilities(Name alias, Table<ServicecomponentsVulnerabilitiesRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private ServicecomponentsVulnerabilities(Name alias, Table<ServicecomponentsVulnerabilitiesRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.SERVICECOMPONENTS_VULNERABILITIES</code>
     * table reference
     */
    public ServicecomponentsVulnerabilities(String alias) {
        this(DSL.name(alias), SERVICECOMPONENTS_VULNERABILITIES);
    }

    /**
     * Create an aliased <code>public.SERVICECOMPONENTS_VULNERABILITIES</code>
     * table reference
     */
    public ServicecomponentsVulnerabilities(Name alias) {
        this(alias, SERVICECOMPONENTS_VULNERABILITIES);
    }

    /**
     * Create a <code>public.SERVICECOMPONENTS_VULNERABILITIES</code> table
     * reference
     */
    public ServicecomponentsVulnerabilities() {
        this(DSL.name("SERVICECOMPONENTS_VULNERABILITIES"), null);
    }

    public <O extends Record> ServicecomponentsVulnerabilities(Table<O> path, ForeignKey<O, ServicecomponentsVulnerabilitiesRecord> childPath, InverseForeignKey<O, ServicecomponentsVulnerabilitiesRecord> parentPath) {
        super(path, childPath, parentPath, SERVICECOMPONENTS_VULNERABILITIES);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class ServicecomponentsVulnerabilitiesPath extends ServicecomponentsVulnerabilities implements Path<ServicecomponentsVulnerabilitiesRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> ServicecomponentsVulnerabilitiesPath(Table<O> path, ForeignKey<O, ServicecomponentsVulnerabilitiesRecord> childPath, InverseForeignKey<O, ServicecomponentsVulnerabilitiesRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private ServicecomponentsVulnerabilitiesPath(Name alias, Table<ServicecomponentsVulnerabilitiesRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public ServicecomponentsVulnerabilitiesPath as(String alias) {
            return new ServicecomponentsVulnerabilitiesPath(DSL.name(alias), this);
        }

        @Override
        public ServicecomponentsVulnerabilitiesPath as(Name alias) {
            return new ServicecomponentsVulnerabilitiesPath(alias, this);
        }

        @Override
        public ServicecomponentsVulnerabilitiesPath as(Table<?> alias) {
            return new ServicecomponentsVulnerabilitiesPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.SERVICECOMPONENTS_VULNERABILITIES_SERVICECOMPONENT_ID_IDX, Indexes.SERVICECOMPONENTS_VULNERABILITIES_VULNERABILITY_ID_IDX);
    }

    @Override
    public List<ForeignKey<ServicecomponentsVulnerabilitiesRecord, ?>> getReferences() {
        return Arrays.asList(Keys.SERVICECOMPONENTS_VULNERABILITIES__SERVICECOMPONENTS_VULNERABILITIES_SERVICECOMPONENT_FK, Keys.SERVICECOMPONENTS_VULNERABILITIES__SERVICECOMPONENTS_VULNERABILITIES_VULNERABILITY_FK);
    }

    private transient ServicecomponentPath _servicecomponent;

    /**
     * Get the implicit join path to the <code>public.SERVICECOMPONENT</code>
     * table.
     */
    public ServicecomponentPath servicecomponent() {
        if (_servicecomponent == null)
            _servicecomponent = new ServicecomponentPath(this, Keys.SERVICECOMPONENTS_VULNERABILITIES__SERVICECOMPONENTS_VULNERABILITIES_SERVICECOMPONENT_FK, null);

        return _servicecomponent;
    }

    private transient VulnerabilityPath _vulnerability;

    /**
     * Get the implicit join path to the <code>public.VULNERABILITY</code>
     * table.
     */
    public VulnerabilityPath vulnerability() {
        if (_vulnerability == null)
            _vulnerability = new VulnerabilityPath(this, Keys.SERVICECOMPONENTS_VULNERABILITIES__SERVICECOMPONENTS_VULNERABILITIES_VULNERABILITY_FK, null);

        return _vulnerability;
    }

    @Override
    public ServicecomponentsVulnerabilities as(String alias) {
        return new ServicecomponentsVulnerabilities(DSL.name(alias), this);
    }

    @Override
    public ServicecomponentsVulnerabilities as(Name alias) {
        return new ServicecomponentsVulnerabilities(alias, this);
    }

    @Override
    public ServicecomponentsVulnerabilities as(Table<?> alias) {
        return new ServicecomponentsVulnerabilities(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public ServicecomponentsVulnerabilities rename(String name) {
        return new ServicecomponentsVulnerabilities(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ServicecomponentsVulnerabilities rename(Name name) {
        return new ServicecomponentsVulnerabilities(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public ServicecomponentsVulnerabilities rename(Table<?> name) {
        return new ServicecomponentsVulnerabilities(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ServicecomponentsVulnerabilities where(Condition condition) {
        return new ServicecomponentsVulnerabilities(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ServicecomponentsVulnerabilities where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ServicecomponentsVulnerabilities where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ServicecomponentsVulnerabilities where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public ServicecomponentsVulnerabilities where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public ServicecomponentsVulnerabilities where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public ServicecomponentsVulnerabilities where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public ServicecomponentsVulnerabilities where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ServicecomponentsVulnerabilities whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ServicecomponentsVulnerabilities whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
