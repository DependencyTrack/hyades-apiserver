/*
 * This file is generated by jOOQ.
 */
package org.dependencytrack.persistence.jooq.generated.tables;


import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import javax.annotation.processing.Generated;

import org.dependencytrack.persistence.jooq.generated.DefaultSchema;
import org.dependencytrack.persistence.jooq.generated.Indexes;
import org.dependencytrack.persistence.jooq.generated.Keys;
import org.dependencytrack.persistence.jooq.generated.tables.Analysis.AnalysisPath;
import org.dependencytrack.persistence.jooq.generated.tables.records.VulnerabilityPolicyRecord;
import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.InverseForeignKey;
import org.jooq.JSONB;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.20.4",
        "schema version:v5.6.0-28"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class VulnerabilityPolicy extends TableImpl<VulnerabilityPolicyRecord> {

    private static final long serialVersionUID = 322144298;

    /**
     * The reference instance of <code>VULNERABILITY_POLICY</code>
     */
    public static final VulnerabilityPolicy VULNERABILITY_POLICY = new VulnerabilityPolicy();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<VulnerabilityPolicyRecord> getRecordType() {
        return VulnerabilityPolicyRecord.class;
    }

    /**
     * The column <code>VULNERABILITY_POLICY.ID</code>.
     */
    public final TableField<VulnerabilityPolicyRecord, Long> id = createField(DSL.name("ID"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>VULNERABILITY_POLICY.ANALYSIS</code>.
     */
    public final TableField<VulnerabilityPolicyRecord, JSONB> analysis = createField(DSL.name("ANALYSIS"), SQLDataType.JSONB.nullable(false), this, "");

    /**
     * The column <code>VULNERABILITY_POLICY.AUTHOR</code>.
     */
    public final TableField<VulnerabilityPolicyRecord, String> author = createField(DSL.name("AUTHOR"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>VULNERABILITY_POLICY.CONDITIONS</code>.
     */
    public final TableField<VulnerabilityPolicyRecord, String[]> conditions = createField(DSL.name("CONDITIONS"), SQLDataType.CLOB.array().nullable(false), this, "");

    /**
     * The column <code>VULNERABILITY_POLICY.CREATED</code>.
     */
    public final TableField<VulnerabilityPolicyRecord, OffsetDateTime> created = createField(DSL.name("CREATED"), SQLDataType.TIMESTAMPWITHTIMEZONE(6), this, "");

    /**
     * The column <code>VULNERABILITY_POLICY.DESCRIPTION</code>.
     */
    public final TableField<VulnerabilityPolicyRecord, String> description = createField(DSL.name("DESCRIPTION"), SQLDataType.VARCHAR(512), this, "");

    /**
     * The column <code>VULNERABILITY_POLICY.NAME</code>.
     */
    public final TableField<VulnerabilityPolicyRecord, String> name = createField(DSL.name("NAME"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>VULNERABILITY_POLICY.RATINGS</code>.
     */
    public final TableField<VulnerabilityPolicyRecord, JSONB> ratings = createField(DSL.name("RATINGS"), SQLDataType.JSONB, this, "");

    /**
     * The column <code>VULNERABILITY_POLICY.UPDATED</code>.
     */
    public final TableField<VulnerabilityPolicyRecord, OffsetDateTime> updated = createField(DSL.name("UPDATED"), SQLDataType.TIMESTAMPWITHTIMEZONE(6), this, "");

    /**
     * The column <code>VULNERABILITY_POLICY.VALID_FROM</code>.
     */
    public final TableField<VulnerabilityPolicyRecord, OffsetDateTime> validFrom = createField(DSL.name("VALID_FROM"), SQLDataType.TIMESTAMPWITHTIMEZONE(6), this, "");

    /**
     * The column <code>VULNERABILITY_POLICY.VALID_UNTIL</code>.
     */
    public final TableField<VulnerabilityPolicyRecord, OffsetDateTime> validUntil = createField(DSL.name("VALID_UNTIL"), SQLDataType.TIMESTAMPWITHTIMEZONE(6), this, "");

    /**
     * The column <code>VULNERABILITY_POLICY.OPERATION_MODE</code>.
     */
    public final TableField<VulnerabilityPolicyRecord, String> operationMode = createField(DSL.name("OPERATION_MODE"), SQLDataType.VARCHAR(255).nullable(false).defaultValue(DSL.field(DSL.raw("'APPLY'::character varying"), SQLDataType.VARCHAR)), this, "");

    private VulnerabilityPolicy(Name alias, Table<VulnerabilityPolicyRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private VulnerabilityPolicy(Name alias, Table<VulnerabilityPolicyRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>VULNERABILITY_POLICY</code> table reference
     */
    public VulnerabilityPolicy(String alias) {
        this(DSL.name(alias), VULNERABILITY_POLICY);
    }

    /**
     * Create an aliased <code>VULNERABILITY_POLICY</code> table reference
     */
    public VulnerabilityPolicy(Name alias) {
        this(alias, VULNERABILITY_POLICY);
    }

    /**
     * Create a <code>VULNERABILITY_POLICY</code> table reference
     */
    public VulnerabilityPolicy() {
        this(DSL.name("VULNERABILITY_POLICY"), null);
    }

    public <O extends Record> VulnerabilityPolicy(Table<O> path, ForeignKey<O, VulnerabilityPolicyRecord> childPath, InverseForeignKey<O, VulnerabilityPolicyRecord> parentPath) {
        super(path, childPath, parentPath, VULNERABILITY_POLICY);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    @Generated(
        value = {
            "https://www.jooq.org",
            "jOOQ version:3.20.4",
            "schema version:v5.6.0-28"
        },
        comments = "This class is generated by jOOQ"
    )
    public static class VulnerabilityPolicyPath extends VulnerabilityPolicy implements Path<VulnerabilityPolicyRecord> {

        private static final long serialVersionUID = 322144298;
        public <O extends Record> VulnerabilityPolicyPath(Table<O> path, ForeignKey<O, VulnerabilityPolicyRecord> childPath, InverseForeignKey<O, VulnerabilityPolicyRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private VulnerabilityPolicyPath(Name alias, Table<VulnerabilityPolicyRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public VulnerabilityPolicyPath as(String alias) {
            return new VulnerabilityPolicyPath(DSL.name(alias), this);
        }

        @Override
        public VulnerabilityPolicyPath as(Name alias) {
            return new VulnerabilityPolicyPath(alias, this);
        }

        @Override
        public VulnerabilityPolicyPath as(Table<?> alias) {
            return new VulnerabilityPolicyPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.VULNERABILITY_POLICY_NAME_IDX);
    }

    @Override
    public Identity<VulnerabilityPolicyRecord, Long> getIdentity() {
        return (Identity<VulnerabilityPolicyRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<VulnerabilityPolicyRecord> getPrimaryKey() {
        return Keys.VULNERABILITYPOLICY_PK;
    }

    private transient AnalysisPath _analysis;

    /**
     * Get the implicit to-many join path to the <code>ANALYSIS</code> table
     */
    public AnalysisPath analysis() {
        if (_analysis == null)
            _analysis = new AnalysisPath(this, null, Keys.ANALYSIS_VULNERABILITY_POLICY_ID_FK.getInverseKey());

        return _analysis;
    }

    @Override
    public VulnerabilityPolicy as(String alias) {
        return new VulnerabilityPolicy(DSL.name(alias), this);
    }

    @Override
    public VulnerabilityPolicy as(Name alias) {
        return new VulnerabilityPolicy(alias, this);
    }

    @Override
    public VulnerabilityPolicy as(Table<?> alias) {
        return new VulnerabilityPolicy(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public VulnerabilityPolicy rename(String name) {
        return new VulnerabilityPolicy(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public VulnerabilityPolicy rename(Name name) {
        return new VulnerabilityPolicy(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public VulnerabilityPolicy rename(Table<?> name) {
        return new VulnerabilityPolicy(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public VulnerabilityPolicy where(Condition condition) {
        return new VulnerabilityPolicy(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public VulnerabilityPolicy where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public VulnerabilityPolicy where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public VulnerabilityPolicy where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public VulnerabilityPolicy where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public VulnerabilityPolicy where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public VulnerabilityPolicy where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public VulnerabilityPolicy where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public VulnerabilityPolicy whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public VulnerabilityPolicy whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
