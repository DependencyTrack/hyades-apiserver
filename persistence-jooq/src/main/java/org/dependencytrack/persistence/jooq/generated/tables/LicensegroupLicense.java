/*
 * This file is generated by jOOQ.
 */
package org.dependencytrack.persistence.jooq.generated.tables;


import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.dependencytrack.persistence.jooq.generated.Indexes;
import org.dependencytrack.persistence.jooq.generated.Keys;
import org.dependencytrack.persistence.jooq.generated.Public;
import org.dependencytrack.persistence.jooq.generated.tables.License.LicensePath;
import org.dependencytrack.persistence.jooq.generated.tables.Licensegroup.LicensegroupPath;
import org.dependencytrack.persistence.jooq.generated.tables.records.LicensegroupLicenseRecord;
import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class LicensegroupLicense extends TableImpl<LicensegroupLicenseRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.LICENSEGROUP_LICENSE</code>
     */
    public static final LicensegroupLicense LICENSEGROUP_LICENSE = new LicensegroupLicense();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<LicensegroupLicenseRecord> getRecordType() {
        return LicensegroupLicenseRecord.class;
    }

    /**
     * The column <code>public.LICENSEGROUP_LICENSE.LICENSEGROUP_ID</code>.
     */
    public final TableField<LicensegroupLicenseRecord, Long> LICENSEGROUP_ID = createField(DSL.name("LICENSEGROUP_ID"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.LICENSEGROUP_LICENSE.LICENSE_ID</code>.
     */
    public final TableField<LicensegroupLicenseRecord, Long> LICENSE_ID = createField(DSL.name("LICENSE_ID"), SQLDataType.BIGINT.nullable(false), this, "");

    private LicensegroupLicense(Name alias, Table<LicensegroupLicenseRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private LicensegroupLicense(Name alias, Table<LicensegroupLicenseRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.LICENSEGROUP_LICENSE</code> table
     * reference
     */
    public LicensegroupLicense(String alias) {
        this(DSL.name(alias), LICENSEGROUP_LICENSE);
    }

    /**
     * Create an aliased <code>public.LICENSEGROUP_LICENSE</code> table
     * reference
     */
    public LicensegroupLicense(Name alias) {
        this(alias, LICENSEGROUP_LICENSE);
    }

    /**
     * Create a <code>public.LICENSEGROUP_LICENSE</code> table reference
     */
    public LicensegroupLicense() {
        this(DSL.name("LICENSEGROUP_LICENSE"), null);
    }

    public <O extends Record> LicensegroupLicense(Table<O> path, ForeignKey<O, LicensegroupLicenseRecord> childPath, InverseForeignKey<O, LicensegroupLicenseRecord> parentPath) {
        super(path, childPath, parentPath, LICENSEGROUP_LICENSE);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class LicensegroupLicensePath extends LicensegroupLicense implements Path<LicensegroupLicenseRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> LicensegroupLicensePath(Table<O> path, ForeignKey<O, LicensegroupLicenseRecord> childPath, InverseForeignKey<O, LicensegroupLicenseRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private LicensegroupLicensePath(Name alias, Table<LicensegroupLicenseRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public LicensegroupLicensePath as(String alias) {
            return new LicensegroupLicensePath(DSL.name(alias), this);
        }

        @Override
        public LicensegroupLicensePath as(Name alias) {
            return new LicensegroupLicensePath(alias, this);
        }

        @Override
        public LicensegroupLicensePath as(Table<?> alias) {
            return new LicensegroupLicensePath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.LICENSEGROUP_LICENSE_LICENSE_ID_IDX, Indexes.LICENSEGROUP_LICENSE_LICENSEGROUP_ID_IDX);
    }

    @Override
    public List<ForeignKey<LicensegroupLicenseRecord, ?>> getReferences() {
        return Arrays.asList(Keys.LICENSEGROUP_LICENSE__LICENSEGROUP_LICENSE_LICENSE_FK, Keys.LICENSEGROUP_LICENSE__LICENSEGROUP_LICENSE_LICENSEGROUP_FK);
    }

    private transient LicensePath _license;

    /**
     * Get the implicit join path to the <code>public.LICENSE</code> table.
     */
    public LicensePath license() {
        if (_license == null)
            _license = new LicensePath(this, Keys.LICENSEGROUP_LICENSE__LICENSEGROUP_LICENSE_LICENSE_FK, null);

        return _license;
    }

    private transient LicensegroupPath _licensegroup;

    /**
     * Get the implicit join path to the <code>public.LICENSEGROUP</code> table.
     */
    public LicensegroupPath licensegroup() {
        if (_licensegroup == null)
            _licensegroup = new LicensegroupPath(this, Keys.LICENSEGROUP_LICENSE__LICENSEGROUP_LICENSE_LICENSEGROUP_FK, null);

        return _licensegroup;
    }

    @Override
    public LicensegroupLicense as(String alias) {
        return new LicensegroupLicense(DSL.name(alias), this);
    }

    @Override
    public LicensegroupLicense as(Name alias) {
        return new LicensegroupLicense(alias, this);
    }

    @Override
    public LicensegroupLicense as(Table<?> alias) {
        return new LicensegroupLicense(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public LicensegroupLicense rename(String name) {
        return new LicensegroupLicense(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public LicensegroupLicense rename(Name name) {
        return new LicensegroupLicense(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public LicensegroupLicense rename(Table<?> name) {
        return new LicensegroupLicense(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public LicensegroupLicense where(Condition condition) {
        return new LicensegroupLicense(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public LicensegroupLicense where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public LicensegroupLicense where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public LicensegroupLicense where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public LicensegroupLicense where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public LicensegroupLicense where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public LicensegroupLicense where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public LicensegroupLicense where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public LicensegroupLicense whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public LicensegroupLicense whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
