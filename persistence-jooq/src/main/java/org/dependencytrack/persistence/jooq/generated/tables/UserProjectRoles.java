/*
 * This file is generated by jOOQ.
 */
package org.dependencytrack.persistence.jooq.generated.tables;


import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import javax.annotation.processing.Generated;

import org.dependencytrack.persistence.jooq.generated.DefaultSchema;
import org.dependencytrack.persistence.jooq.generated.Keys;
import org.dependencytrack.persistence.jooq.generated.tables.Project.ProjectPath;
import org.dependencytrack.persistence.jooq.generated.tables.Role.RolePath;
import org.dependencytrack.persistence.jooq.generated.tables.User.UserPath;
import org.dependencytrack.persistence.jooq.generated.tables.records.UserProjectRolesRecord;
import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.20.4",
        "schema version:v5.6.0-28"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class UserProjectRoles extends TableImpl<UserProjectRolesRecord> {

    private static final long serialVersionUID = 1709797821;

    /**
     * The reference instance of <code>USER_PROJECT_ROLES</code>
     */
    public static final UserProjectRoles USER_PROJECT_ROLES = new UserProjectRoles();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<UserProjectRolesRecord> getRecordType() {
        return UserProjectRolesRecord.class;
    }

    /**
     * The column <code>USER_PROJECT_ROLES.USER_ID</code>.
     */
    public final TableField<UserProjectRolesRecord, Long> userId = createField(DSL.name("USER_ID"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>USER_PROJECT_ROLES.PROJECT_ID</code>.
     */
    public final TableField<UserProjectRolesRecord, Long> projectId = createField(DSL.name("PROJECT_ID"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>USER_PROJECT_ROLES.ROLE_ID</code>.
     */
    public final TableField<UserProjectRolesRecord, Long> roleId = createField(DSL.name("ROLE_ID"), SQLDataType.BIGINT.nullable(false), this, "");

    private UserProjectRoles(Name alias, Table<UserProjectRolesRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private UserProjectRoles(Name alias, Table<UserProjectRolesRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>USER_PROJECT_ROLES</code> table reference
     */
    public UserProjectRoles(String alias) {
        this(DSL.name(alias), USER_PROJECT_ROLES);
    }

    /**
     * Create an aliased <code>USER_PROJECT_ROLES</code> table reference
     */
    public UserProjectRoles(Name alias) {
        this(alias, USER_PROJECT_ROLES);
    }

    /**
     * Create a <code>USER_PROJECT_ROLES</code> table reference
     */
    public UserProjectRoles() {
        this(DSL.name("USER_PROJECT_ROLES"), null);
    }

    public <O extends Record> UserProjectRoles(Table<O> path, ForeignKey<O, UserProjectRolesRecord> childPath, InverseForeignKey<O, UserProjectRolesRecord> parentPath) {
        super(path, childPath, parentPath, USER_PROJECT_ROLES);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    @Generated(
        value = {
            "https://www.jooq.org",
            "jOOQ version:3.20.4",
            "schema version:v5.6.0-28"
        },
        comments = "This class is generated by jOOQ"
    )
    public static class UserProjectRolesPath extends UserProjectRoles implements Path<UserProjectRolesRecord> {

        private static final long serialVersionUID = 1709797821;
        public <O extends Record> UserProjectRolesPath(Table<O> path, ForeignKey<O, UserProjectRolesRecord> childPath, InverseForeignKey<O, UserProjectRolesRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private UserProjectRolesPath(Name alias, Table<UserProjectRolesRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public UserProjectRolesPath as(String alias) {
            return new UserProjectRolesPath(DSL.name(alias), this);
        }

        @Override
        public UserProjectRolesPath as(Name alias) {
            return new UserProjectRolesPath(alias, this);
        }

        @Override
        public UserProjectRolesPath as(Table<?> alias) {
            return new UserProjectRolesPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public UniqueKey<UserProjectRolesRecord> getPrimaryKey() {
        return Keys.USER_PROJECT_ROLES_PK;
    }

    @Override
    public List<ForeignKey<UserProjectRolesRecord, ?>> getReferences() {
        return Arrays.asList(Keys.USER_PROJECT_ROLES_PROJECT_FK, Keys.USER_PROJECT_ROLES_ROLE_FK, Keys.USER_PROJECT_ROLES_USER_FK);
    }

    private transient ProjectPath _project;

    /**
     * Get the implicit join path to the <code>PROJECT</code> table.
     */
    public ProjectPath project() {
        if (_project == null)
            _project = new ProjectPath(this, Keys.USER_PROJECT_ROLES_PROJECT_FK, null);

        return _project;
    }

    private transient RolePath _role;

    /**
     * Get the implicit join path to the <code>ROLE</code> table.
     */
    public RolePath role() {
        if (_role == null)
            _role = new RolePath(this, Keys.USER_PROJECT_ROLES_ROLE_FK, null);

        return _role;
    }

    private transient UserPath _user;

    /**
     * Get the implicit join path to the <code>USER</code> table.
     */
    public UserPath user() {
        if (_user == null)
            _user = new UserPath(this, Keys.USER_PROJECT_ROLES_USER_FK, null);

        return _user;
    }

    @Override
    public UserProjectRoles as(String alias) {
        return new UserProjectRoles(DSL.name(alias), this);
    }

    @Override
    public UserProjectRoles as(Name alias) {
        return new UserProjectRoles(alias, this);
    }

    @Override
    public UserProjectRoles as(Table<?> alias) {
        return new UserProjectRoles(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public UserProjectRoles rename(String name) {
        return new UserProjectRoles(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public UserProjectRoles rename(Name name) {
        return new UserProjectRoles(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public UserProjectRoles rename(Table<?> name) {
        return new UserProjectRoles(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public UserProjectRoles where(Condition condition) {
        return new UserProjectRoles(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public UserProjectRoles where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public UserProjectRoles where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public UserProjectRoles where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public UserProjectRoles where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public UserProjectRoles where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public UserProjectRoles where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public UserProjectRoles where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public UserProjectRoles whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public UserProjectRoles whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
