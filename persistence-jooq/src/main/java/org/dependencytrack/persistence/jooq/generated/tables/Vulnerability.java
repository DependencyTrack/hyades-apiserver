/*
 * This file is generated by jOOQ.
 */
package org.dependencytrack.persistence.jooq.generated.tables;


import java.math.BigDecimal;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;
import java.util.UUID;

import javax.annotation.processing.Generated;

import org.dependencytrack.persistence.jooq.generated.DefaultSchema;
import org.dependencytrack.persistence.jooq.generated.Indexes;
import org.dependencytrack.persistence.jooq.generated.Keys;
import org.dependencytrack.persistence.jooq.generated.enums.Severity;
import org.dependencytrack.persistence.jooq.generated.tables.AffectedVersionAttribution.AffectedVersionAttributionPath;
import org.dependencytrack.persistence.jooq.generated.tables.Analysis.AnalysisPath;
import org.dependencytrack.persistence.jooq.generated.tables.ComponentsVulnerabilities.ComponentsVulnerabilitiesPath;
import org.dependencytrack.persistence.jooq.generated.tables.FindingAttribution.FindingAttributionPath;
import org.dependencytrack.persistence.jooq.generated.tables.ServiceComponentsVulnerabilities.ServiceComponentsVulnerabilitiesPath;
import org.dependencytrack.persistence.jooq.generated.tables.Tag.TagPath;
import org.dependencytrack.persistence.jooq.generated.tables.VulnerabilitiesTags.VulnerabilitiesTagsPath;
import org.dependencytrack.persistence.jooq.generated.tables.VulnerableSoftwareVulnerabilities.VulnerableSoftwareVulnerabilitiesPath;
import org.dependencytrack.persistence.jooq.generated.tables.records.VulnerabilityRecord;
import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.20.4",
        "schema version:v5.6.0-28"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Vulnerability extends TableImpl<VulnerabilityRecord> {

    private static final long serialVersionUID = -528883931;

    /**
     * The reference instance of <code>VULNERABILITY</code>
     */
    public static final Vulnerability VULNERABILITY = new Vulnerability();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<VulnerabilityRecord> getRecordType() {
        return VulnerabilityRecord.class;
    }

    /**
     * The column <code>VULNERABILITY.ID</code>.
     */
    public final TableField<VulnerabilityRecord, Long> id = createField(DSL.name("ID"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>VULNERABILITY.CREATED</code>.
     */
    public final TableField<VulnerabilityRecord, OffsetDateTime> created = createField(DSL.name("CREATED"), SQLDataType.TIMESTAMPWITHTIMEZONE(6), this, "");

    /**
     * The column <code>VULNERABILITY.CREDITS</code>.
     */
    public final TableField<VulnerabilityRecord, String> credits = createField(DSL.name("CREDITS"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>VULNERABILITY.CVSSV2BASESCORE</code>.
     */
    public final TableField<VulnerabilityRecord, BigDecimal> cvssV2BaseScore = createField(DSL.name("CVSSV2BASESCORE"), SQLDataType.NUMERIC, this, "");

    /**
     * The column <code>VULNERABILITY.CVSSV2EXPLOITSCORE</code>.
     */
    public final TableField<VulnerabilityRecord, BigDecimal> cvssV2ExploitScore = createField(DSL.name("CVSSV2EXPLOITSCORE"), SQLDataType.NUMERIC, this, "");

    /**
     * The column <code>VULNERABILITY.CVSSV2IMPACTSCORE</code>.
     */
    public final TableField<VulnerabilityRecord, BigDecimal> cvssV2ImpactScore = createField(DSL.name("CVSSV2IMPACTSCORE"), SQLDataType.NUMERIC, this, "");

    /**
     * The column <code>VULNERABILITY.CVSSV2VECTOR</code>.
     */
    public final TableField<VulnerabilityRecord, String> cvssV2Vector = createField(DSL.name("CVSSV2VECTOR"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>VULNERABILITY.CVSSV3BASESCORE</code>.
     */
    public final TableField<VulnerabilityRecord, BigDecimal> cvssV3BaseScore = createField(DSL.name("CVSSV3BASESCORE"), SQLDataType.NUMERIC, this, "");

    /**
     * The column <code>VULNERABILITY.CVSSV3EXPLOITSCORE</code>.
     */
    public final TableField<VulnerabilityRecord, BigDecimal> cvssV3ExploitScore = createField(DSL.name("CVSSV3EXPLOITSCORE"), SQLDataType.NUMERIC, this, "");

    /**
     * The column <code>VULNERABILITY.CVSSV3IMPACTSCORE</code>.
     */
    public final TableField<VulnerabilityRecord, BigDecimal> cvssV3ImpactScore = createField(DSL.name("CVSSV3IMPACTSCORE"), SQLDataType.NUMERIC, this, "");

    /**
     * The column <code>VULNERABILITY.CVSSV3VECTOR</code>.
     */
    public final TableField<VulnerabilityRecord, String> cvssV3Vector = createField(DSL.name("CVSSV3VECTOR"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>VULNERABILITY.CWES</code>.
     */
    public final TableField<VulnerabilityRecord, String> cwes = createField(DSL.name("CWES"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>VULNERABILITY.DESCRIPTION</code>.
     */
    public final TableField<VulnerabilityRecord, String> description = createField(DSL.name("DESCRIPTION"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>VULNERABILITY.DETAIL</code>.
     */
    public final TableField<VulnerabilityRecord, String> detail = createField(DSL.name("DETAIL"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>VULNERABILITY.FRIENDLYVULNID</code>.
     */
    public final TableField<VulnerabilityRecord, String> friendlyVulnId = createField(DSL.name("FRIENDLYVULNID"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>VULNERABILITY.OWASPRRBUSINESSIMPACTSCORE</code>.
     */
    public final TableField<VulnerabilityRecord, BigDecimal> owaspRrBusinessImpactScore = createField(DSL.name("OWASPRRBUSINESSIMPACTSCORE"), SQLDataType.NUMERIC, this, "");

    /**
     * The column <code>VULNERABILITY.OWASPRRLIKELIHOODSCORE</code>.
     */
    public final TableField<VulnerabilityRecord, BigDecimal> owaspRrLikelihoodScore = createField(DSL.name("OWASPRRLIKELIHOODSCORE"), SQLDataType.NUMERIC, this, "");

    /**
     * The column <code>VULNERABILITY.OWASPRRTECHNICALIMPACTSCORE</code>.
     */
    public final TableField<VulnerabilityRecord, BigDecimal> owaspRrTechnicalImpactScore = createField(DSL.name("OWASPRRTECHNICALIMPACTSCORE"), SQLDataType.NUMERIC, this, "");

    /**
     * The column <code>VULNERABILITY.OWASPRRVECTOR</code>.
     */
    public final TableField<VulnerabilityRecord, String> owaspRrVector = createField(DSL.name("OWASPRRVECTOR"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>VULNERABILITY.PATCHEDVERSIONS</code>.
     */
    public final TableField<VulnerabilityRecord, String> patchedVersions = createField(DSL.name("PATCHEDVERSIONS"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>VULNERABILITY.PUBLISHED</code>.
     */
    public final TableField<VulnerabilityRecord, OffsetDateTime> published = createField(DSL.name("PUBLISHED"), SQLDataType.TIMESTAMPWITHTIMEZONE(6), this, "");

    /**
     * The column <code>VULNERABILITY.RECOMMENDATION</code>.
     */
    public final TableField<VulnerabilityRecord, String> recommendation = createField(DSL.name("RECOMMENDATION"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>VULNERABILITY.REFERENCES</code>.
     */
    public final TableField<VulnerabilityRecord, String> references = createField(DSL.name("REFERENCES"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>VULNERABILITY.SEVERITY</code>.
     */
    public final TableField<VulnerabilityRecord, Severity> severity = createField(DSL.name("SEVERITY"), SQLDataType.VARCHAR.asEnumDataType(Severity.class), this, "");

    /**
     * The column <code>VULNERABILITY.SOURCE</code>.
     */
    public final TableField<VulnerabilityRecord, String> source = createField(DSL.name("SOURCE"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>VULNERABILITY.SUBTITLE</code>.
     */
    public final TableField<VulnerabilityRecord, String> subtitle = createField(DSL.name("SUBTITLE"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>VULNERABILITY.TITLE</code>.
     */
    public final TableField<VulnerabilityRecord, String> title = createField(DSL.name("TITLE"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>VULNERABILITY.UPDATED</code>.
     */
    public final TableField<VulnerabilityRecord, OffsetDateTime> updated = createField(DSL.name("UPDATED"), SQLDataType.TIMESTAMPWITHTIMEZONE(6), this, "");

    /**
     * The column <code>VULNERABILITY.UUID</code>.
     */
    public final TableField<VulnerabilityRecord, UUID> uuid = createField(DSL.name("UUID"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>VULNERABILITY.VULNID</code>.
     */
    public final TableField<VulnerabilityRecord, String> vulnId = createField(DSL.name("VULNID"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>VULNERABILITY.VULNERABLEVERSIONS</code>.
     */
    public final TableField<VulnerabilityRecord, String> vulnerableVersions = createField(DSL.name("VULNERABLEVERSIONS"), SQLDataType.VARCHAR(255), this, "");

    private Vulnerability(Name alias, Table<VulnerabilityRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Vulnerability(Name alias, Table<VulnerabilityRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>VULNERABILITY</code> table reference
     */
    public Vulnerability(String alias) {
        this(DSL.name(alias), VULNERABILITY);
    }

    /**
     * Create an aliased <code>VULNERABILITY</code> table reference
     */
    public Vulnerability(Name alias) {
        this(alias, VULNERABILITY);
    }

    /**
     * Create a <code>VULNERABILITY</code> table reference
     */
    public Vulnerability() {
        this(DSL.name("VULNERABILITY"), null);
    }

    public <O extends Record> Vulnerability(Table<O> path, ForeignKey<O, VulnerabilityRecord> childPath, InverseForeignKey<O, VulnerabilityRecord> parentPath) {
        super(path, childPath, parentPath, VULNERABILITY);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    @Generated(
        value = {
            "https://www.jooq.org",
            "jOOQ version:3.20.4",
            "schema version:v5.6.0-28"
        },
        comments = "This class is generated by jOOQ"
    )
    public static class VulnerabilityPath extends Vulnerability implements Path<VulnerabilityRecord> {

        private static final long serialVersionUID = -528883931;
        public <O extends Record> VulnerabilityPath(Table<O> path, ForeignKey<O, VulnerabilityRecord> childPath, InverseForeignKey<O, VulnerabilityRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private VulnerabilityPath(Name alias, Table<VulnerabilityRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public VulnerabilityPath as(String alias) {
            return new VulnerabilityPath(DSL.name(alias), this);
        }

        @Override
        public VulnerabilityPath as(Name alias) {
            return new VulnerabilityPath(alias, this);
        }

        @Override
        public VulnerabilityPath as(Table<?> alias) {
            return new VulnerabilityPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.VULNERABILITY_CREATED_IDX, Indexes.VULNERABILITY_PUBLISHED_IDX, Indexes.VULNERABILITY_UPDATED_IDX);
    }

    @Override
    public Identity<VulnerabilityRecord, Long> getIdentity() {
        return (Identity<VulnerabilityRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<VulnerabilityRecord> getPrimaryKey() {
        return Keys.VULNERABILITY_PK;
    }

    @Override
    public List<UniqueKey<VulnerabilityRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.VULNERABILITY_U1, Keys.VULNERABILITY_UUID_IDX);
    }

    private transient AffectedVersionAttributionPath _affectedVersionAttribution;

    /**
     * Get the implicit to-many join path to the
     * <code>AFFECTEDVERSIONATTRIBUTION</code> table
     */
    public AffectedVersionAttributionPath affectedVersionAttribution() {
        if (_affectedVersionAttribution == null)
            _affectedVersionAttribution = new AffectedVersionAttributionPath(this, null, Keys.AFFECTEDVERSIONATTRIBUTION_VULNERABILITY_FK.getInverseKey());

        return _affectedVersionAttribution;
    }

    private transient AnalysisPath _analysis;

    /**
     * Get the implicit to-many join path to the <code>ANALYSIS</code> table
     */
    public AnalysisPath analysis() {
        if (_analysis == null)
            _analysis = new AnalysisPath(this, null, Keys.ANALYSIS_VULNERABILITY_FK.getInverseKey());

        return _analysis;
    }

    private transient ComponentsVulnerabilitiesPath _componentsVulnerabilities;

    /**
     * Get the implicit to-many join path to the
     * <code>COMPONENTS_VULNERABILITIES</code> table
     */
    public ComponentsVulnerabilitiesPath componentsVulnerabilities() {
        if (_componentsVulnerabilities == null)
            _componentsVulnerabilities = new ComponentsVulnerabilitiesPath(this, null, Keys.COMPONENTS_VULNERABILITIES_VULNERABILITY_FK.getInverseKey());

        return _componentsVulnerabilities;
    }

    private transient FindingAttributionPath _findingAttribution;

    /**
     * Get the implicit to-many join path to the <code>FINDINGATTRIBUTION</code>
     * table
     */
    public FindingAttributionPath findingAttribution() {
        if (_findingAttribution == null)
            _findingAttribution = new FindingAttributionPath(this, null, Keys.FINDINGATTRIBUTION_VULNERABILITY_FK.getInverseKey());

        return _findingAttribution;
    }

    private transient ServiceComponentsVulnerabilitiesPath _serviceComponentsVulnerabilities;

    /**
     * Get the implicit to-many join path to the
     * <code>SERVICECOMPONENTS_VULNERABILITIES</code> table
     */
    public ServiceComponentsVulnerabilitiesPath serviceComponentsVulnerabilities() {
        if (_serviceComponentsVulnerabilities == null)
            _serviceComponentsVulnerabilities = new ServiceComponentsVulnerabilitiesPath(this, null, Keys.SERVICECOMPONENTS_VULNERABILITIES_VULNERABILITY_FK.getInverseKey());

        return _serviceComponentsVulnerabilities;
    }

    private transient VulnerabilitiesTagsPath _vulnerabilitiesTags;

    /**
     * Get the implicit to-many join path to the
     * <code>VULNERABILITIES_TAGS</code> table
     */
    public VulnerabilitiesTagsPath vulnerabilitiesTags() {
        if (_vulnerabilitiesTags == null)
            _vulnerabilitiesTags = new VulnerabilitiesTagsPath(this, null, Keys.VULNERABILITIES_TAGS_VULNERABILITY_FK.getInverseKey());

        return _vulnerabilitiesTags;
    }

    private transient VulnerableSoftwareVulnerabilitiesPath _vulnerableSoftwareVulnerabilities;

    /**
     * Get the implicit to-many join path to the
     * <code>VULNERABLESOFTWARE_VULNERABILITIES</code> table
     */
    public VulnerableSoftwareVulnerabilitiesPath vulnerableSoftwareVulnerabilities() {
        if (_vulnerableSoftwareVulnerabilities == null)
            _vulnerableSoftwareVulnerabilities = new VulnerableSoftwareVulnerabilitiesPath(this, null, Keys.VULNERABLESOFTWARE_VULNERABILITIES_VULNERABILITY_FK.getInverseKey());

        return _vulnerableSoftwareVulnerabilities;
    }

    /**
     * Get the implicit many-to-many join path to the <code>TAG</code> table
     */
    public TagPath tag() {
        return vulnerabilitiesTags().tag();
    }

    @Override
    public Vulnerability as(String alias) {
        return new Vulnerability(DSL.name(alias), this);
    }

    @Override
    public Vulnerability as(Name alias) {
        return new Vulnerability(alias, this);
    }

    @Override
    public Vulnerability as(Table<?> alias) {
        return new Vulnerability(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Vulnerability rename(String name) {
        return new Vulnerability(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Vulnerability rename(Name name) {
        return new Vulnerability(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Vulnerability rename(Table<?> name) {
        return new Vulnerability(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Vulnerability where(Condition condition) {
        return new Vulnerability(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Vulnerability where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Vulnerability where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Vulnerability where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Vulnerability where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Vulnerability where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Vulnerability where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Vulnerability where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Vulnerability whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Vulnerability whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
