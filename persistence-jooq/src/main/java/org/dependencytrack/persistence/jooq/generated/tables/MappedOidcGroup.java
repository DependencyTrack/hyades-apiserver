/*
 * This file is generated by jOOQ.
 */
package org.dependencytrack.persistence.jooq.generated.tables;


import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import javax.annotation.processing.Generated;

import org.dependencytrack.persistence.jooq.generated.DefaultSchema;
import org.dependencytrack.persistence.jooq.generated.Indexes;
import org.dependencytrack.persistence.jooq.generated.Keys;
import org.dependencytrack.persistence.jooq.generated.tables.OidcGroup.OidcGroupPath;
import org.dependencytrack.persistence.jooq.generated.tables.Team.TeamPath;
import org.dependencytrack.persistence.jooq.generated.tables.records.MappedOidcGroupRecord;
import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.20.4",
        "schema version:v5.6.0-28"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class MappedOidcGroup extends TableImpl<MappedOidcGroupRecord> {

    private static final long serialVersionUID = 538043813;

    /**
     * The reference instance of <code>MAPPEDOIDCGROUP</code>
     */
    public static final MappedOidcGroup MAPPEDOIDCGROUP = new MappedOidcGroup();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<MappedOidcGroupRecord> getRecordType() {
        return MappedOidcGroupRecord.class;
    }

    /**
     * The column <code>MAPPEDOIDCGROUP.ID</code>.
     */
    public final TableField<MappedOidcGroupRecord, Long> id = createField(DSL.name("ID"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>MAPPEDOIDCGROUP.GROUP_ID</code>.
     */
    public final TableField<MappedOidcGroupRecord, Long> groupId = createField(DSL.name("GROUP_ID"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>MAPPEDOIDCGROUP.TEAM_ID</code>.
     */
    public final TableField<MappedOidcGroupRecord, Long> teamId = createField(DSL.name("TEAM_ID"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>MAPPEDOIDCGROUP.UUID</code>.
     */
    public final TableField<MappedOidcGroupRecord, String> uuid = createField(DSL.name("UUID"), SQLDataType.VARCHAR(36).nullable(false), this, "");

    private MappedOidcGroup(Name alias, Table<MappedOidcGroupRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private MappedOidcGroup(Name alias, Table<MappedOidcGroupRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>MAPPEDOIDCGROUP</code> table reference
     */
    public MappedOidcGroup(String alias) {
        this(DSL.name(alias), MAPPEDOIDCGROUP);
    }

    /**
     * Create an aliased <code>MAPPEDOIDCGROUP</code> table reference
     */
    public MappedOidcGroup(Name alias) {
        this(alias, MAPPEDOIDCGROUP);
    }

    /**
     * Create a <code>MAPPEDOIDCGROUP</code> table reference
     */
    public MappedOidcGroup() {
        this(DSL.name("MAPPEDOIDCGROUP"), null);
    }

    public <O extends Record> MappedOidcGroup(Table<O> path, ForeignKey<O, MappedOidcGroupRecord> childPath, InverseForeignKey<O, MappedOidcGroupRecord> parentPath) {
        super(path, childPath, parentPath, MAPPEDOIDCGROUP);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    @Generated(
        value = {
            "https://www.jooq.org",
            "jOOQ version:3.20.4",
            "schema version:v5.6.0-28"
        },
        comments = "This class is generated by jOOQ"
    )
    public static class MappedOidcGroupPath extends MappedOidcGroup implements Path<MappedOidcGroupRecord> {

        private static final long serialVersionUID = 538043813;
        public <O extends Record> MappedOidcGroupPath(Table<O> path, ForeignKey<O, MappedOidcGroupRecord> childPath, InverseForeignKey<O, MappedOidcGroupRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private MappedOidcGroupPath(Name alias, Table<MappedOidcGroupRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public MappedOidcGroupPath as(String alias) {
            return new MappedOidcGroupPath(DSL.name(alias), this);
        }

        @Override
        public MappedOidcGroupPath as(Name alias) {
            return new MappedOidcGroupPath(alias, this);
        }

        @Override
        public MappedOidcGroupPath as(Table<?> alias) {
            return new MappedOidcGroupPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.MAPPEDOIDCGROUP_GROUP_ID_IDX);
    }

    @Override
    public Identity<MappedOidcGroupRecord, Long> getIdentity() {
        return (Identity<MappedOidcGroupRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<MappedOidcGroupRecord> getPrimaryKey() {
        return Keys.MAPPEDOIDCGROUP_PK;
    }

    @Override
    public List<UniqueKey<MappedOidcGroupRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.MAPPEDOIDCGROUP_U1, Keys.MAPPEDOIDCGROUP_UUID_IDX);
    }

    @Override
    public List<ForeignKey<MappedOidcGroupRecord, ?>> getReferences() {
        return Arrays.asList(Keys.MAPPEDOIDCGROUP_OIDCGROUP_FK, Keys.MAPPEDOIDCGROUP_TEAM_FK);
    }

    private transient OidcGroupPath _oidcGroup;

    /**
     * Get the implicit join path to the <code>OIDCGROUP</code> table.
     */
    public OidcGroupPath oidcGroup() {
        if (_oidcGroup == null)
            _oidcGroup = new OidcGroupPath(this, Keys.MAPPEDOIDCGROUP_OIDCGROUP_FK, null);

        return _oidcGroup;
    }

    private transient TeamPath _team;

    /**
     * Get the implicit join path to the <code>TEAM</code> table.
     */
    public TeamPath team() {
        if (_team == null)
            _team = new TeamPath(this, Keys.MAPPEDOIDCGROUP_TEAM_FK, null);

        return _team;
    }

    @Override
    public MappedOidcGroup as(String alias) {
        return new MappedOidcGroup(DSL.name(alias), this);
    }

    @Override
    public MappedOidcGroup as(Name alias) {
        return new MappedOidcGroup(alias, this);
    }

    @Override
    public MappedOidcGroup as(Table<?> alias) {
        return new MappedOidcGroup(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public MappedOidcGroup rename(String name) {
        return new MappedOidcGroup(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public MappedOidcGroup rename(Name name) {
        return new MappedOidcGroup(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public MappedOidcGroup rename(Table<?> name) {
        return new MappedOidcGroup(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public MappedOidcGroup where(Condition condition) {
        return new MappedOidcGroup(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public MappedOidcGroup where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public MappedOidcGroup where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public MappedOidcGroup where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public MappedOidcGroup where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public MappedOidcGroup where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public MappedOidcGroup where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public MappedOidcGroup where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public MappedOidcGroup whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public MappedOidcGroup whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
