/*
 * This file is generated by jOOQ.
 */
package org.dependencytrack.persistence.jooq.generated.tables;


import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.dependencytrack.persistence.jooq.generated.Keys;
import org.dependencytrack.persistence.jooq.generated.Public;
import org.dependencytrack.persistence.jooq.generated.tables.ManagedUser.ManageduserPath;
import org.dependencytrack.persistence.jooq.generated.tables.Permission.PermissionPath;
import org.dependencytrack.persistence.jooq.generated.tables.records.ManagedUsersPermissionsRecord;
import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class ManagedUsersPermissions extends TableImpl<ManagedUsersPermissionsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.MANAGEDUSERS_PERMISSIONS</code>
     */
    public static final ManagedUsersPermissions MANAGEDUSERS_PERMISSIONS = new ManagedUsersPermissions();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ManagedUsersPermissionsRecord> getRecordType() {
        return ManagedUsersPermissionsRecord.class;
    }

    /**
     * The column <code>public.MANAGEDUSERS_PERMISSIONS.MANAGEDUSER_ID</code>.
     */
    public final TableField<ManagedUsersPermissionsRecord, Long> MANAGEDUSER_ID = createField(DSL.name("MANAGEDUSER_ID"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.MANAGEDUSERS_PERMISSIONS.PERMISSION_ID</code>.
     */
    public final TableField<ManagedUsersPermissionsRecord, Long> PERMISSION_ID = createField(DSL.name("PERMISSION_ID"), SQLDataType.BIGINT.nullable(false), this, "");

    private ManagedUsersPermissions(Name alias, Table<ManagedUsersPermissionsRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private ManagedUsersPermissions(Name alias, Table<ManagedUsersPermissionsRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.MANAGEDUSERS_PERMISSIONS</code> table
     * reference
     */
    public ManagedUsersPermissions(String alias) {
        this(DSL.name(alias), MANAGEDUSERS_PERMISSIONS);
    }

    /**
     * Create an aliased <code>public.MANAGEDUSERS_PERMISSIONS</code> table
     * reference
     */
    public ManagedUsersPermissions(Name alias) {
        this(alias, MANAGEDUSERS_PERMISSIONS);
    }

    /**
     * Create a <code>public.MANAGEDUSERS_PERMISSIONS</code> table reference
     */
    public ManagedUsersPermissions() {
        this(DSL.name("MANAGEDUSERS_PERMISSIONS"), null);
    }

    public <O extends Record> ManagedUsersPermissions(Table<O> path, ForeignKey<O, ManagedUsersPermissionsRecord> childPath, InverseForeignKey<O, ManagedUsersPermissionsRecord> parentPath) {
        super(path, childPath, parentPath, MANAGEDUSERS_PERMISSIONS);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class ManagedusersPermissionsPath extends ManagedUsersPermissions implements Path<ManagedUsersPermissionsRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> ManagedusersPermissionsPath(Table<O> path, ForeignKey<O, ManagedUsersPermissionsRecord> childPath, InverseForeignKey<O, ManagedUsersPermissionsRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private ManagedusersPermissionsPath(Name alias, Table<ManagedUsersPermissionsRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public ManagedusersPermissionsPath as(String alias) {
            return new ManagedusersPermissionsPath(DSL.name(alias), this);
        }

        @Override
        public ManagedusersPermissionsPath as(Name alias) {
            return new ManagedusersPermissionsPath(alias, this);
        }

        @Override
        public ManagedusersPermissionsPath as(Table<?> alias) {
            return new ManagedusersPermissionsPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public UniqueKey<ManagedUsersPermissionsRecord> getPrimaryKey() {
        return Keys.MANAGEDUSERS_PERMISSIONS_PK;
    }

    @Override
    public List<ForeignKey<ManagedUsersPermissionsRecord, ?>> getReferences() {
        return Arrays.asList(Keys.MANAGEDUSERS_PERMISSIONS__MANAGEDUSERS_PERMISSIONS_MANAGEDUSER_FK, Keys.MANAGEDUSERS_PERMISSIONS__MANAGEDUSERS_PERMISSIONS_PERMISSION_FK);
    }

    private transient ManageduserPath _manageduser;

    /**
     * Get the implicit join path to the <code>public.MANAGEDUSER</code> table.
     */
    public ManageduserPath manageduser() {
        if (_manageduser == null)
            _manageduser = new ManageduserPath(this, Keys.MANAGEDUSERS_PERMISSIONS__MANAGEDUSERS_PERMISSIONS_MANAGEDUSER_FK, null);

        return _manageduser;
    }

    private transient PermissionPath _permission;

    /**
     * Get the implicit join path to the <code>public.PERMISSION</code> table.
     */
    public PermissionPath permission() {
        if (_permission == null)
            _permission = new PermissionPath(this, Keys.MANAGEDUSERS_PERMISSIONS__MANAGEDUSERS_PERMISSIONS_PERMISSION_FK, null);

        return _permission;
    }

    @Override
    public ManagedUsersPermissions as(String alias) {
        return new ManagedUsersPermissions(DSL.name(alias), this);
    }

    @Override
    public ManagedUsersPermissions as(Name alias) {
        return new ManagedUsersPermissions(alias, this);
    }

    @Override
    public ManagedUsersPermissions as(Table<?> alias) {
        return new ManagedUsersPermissions(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public ManagedUsersPermissions rename(String name) {
        return new ManagedUsersPermissions(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ManagedUsersPermissions rename(Name name) {
        return new ManagedUsersPermissions(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public ManagedUsersPermissions rename(Table<?> name) {
        return new ManagedUsersPermissions(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ManagedUsersPermissions where(Condition condition) {
        return new ManagedUsersPermissions(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ManagedUsersPermissions where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ManagedUsersPermissions where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ManagedUsersPermissions where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public ManagedUsersPermissions where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public ManagedUsersPermissions where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public ManagedUsersPermissions where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public ManagedUsersPermissions where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ManagedUsersPermissions whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ManagedUsersPermissions whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
