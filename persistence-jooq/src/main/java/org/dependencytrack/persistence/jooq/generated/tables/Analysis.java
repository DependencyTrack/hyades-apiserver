/*
 * This file is generated by jOOQ.
 */
package org.dependencytrack.persistence.jooq.generated.tables;


import java.math.BigDecimal;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.dependencytrack.persistence.jooq.generated.Indexes;
import org.dependencytrack.persistence.jooq.generated.Keys;
import org.dependencytrack.persistence.jooq.generated.Public;
import org.dependencytrack.persistence.jooq.generated.enums.Severity;
import org.dependencytrack.persistence.jooq.generated.tables.Analysiscomment.AnalysiscommentPath;
import org.dependencytrack.persistence.jooq.generated.tables.Component.ComponentPath;
import org.dependencytrack.persistence.jooq.generated.tables.Project.ProjectPath;
import org.dependencytrack.persistence.jooq.generated.tables.Vulnerability.VulnerabilityPath;
import org.dependencytrack.persistence.jooq.generated.tables.VulnerabilityPolicy.VulnerabilityPolicyPath;
import org.dependencytrack.persistence.jooq.generated.tables.records.AnalysisRecord;
import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Analysis extends TableImpl<AnalysisRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.ANALYSIS</code>
     */
    public static final Analysis ANALYSIS = new Analysis();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<AnalysisRecord> getRecordType() {
        return AnalysisRecord.class;
    }

    /**
     * The column <code>public.ANALYSIS.ID</code>.
     */
    public final TableField<AnalysisRecord, Long> ID = createField(DSL.name("ID"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.ANALYSIS.DETAILS</code>.
     */
    public final TableField<AnalysisRecord, String> DETAILS = createField(DSL.name("DETAILS"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.ANALYSIS.JUSTIFICATION</code>.
     */
    public final TableField<AnalysisRecord, String> JUSTIFICATION = createField(DSL.name("JUSTIFICATION"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.ANALYSIS.RESPONSE</code>.
     */
    public final TableField<AnalysisRecord, String> RESPONSE = createField(DSL.name("RESPONSE"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.ANALYSIS.STATE</code>.
     */
    public final TableField<AnalysisRecord, String> STATE = createField(DSL.name("STATE"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>public.ANALYSIS.COMPONENT_ID</code>.
     */
    public final TableField<AnalysisRecord, Long> COMPONENT_ID = createField(DSL.name("COMPONENT_ID"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>public.ANALYSIS.PROJECT_ID</code>.
     */
    public final TableField<AnalysisRecord, Long> PROJECT_ID = createField(DSL.name("PROJECT_ID"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>public.ANALYSIS.SUPPRESSED</code>.
     */
    public final TableField<AnalysisRecord, Boolean> SUPPRESSED = createField(DSL.name("SUPPRESSED"), SQLDataType.BOOLEAN.nullable(false), this, "");

    /**
     * The column <code>public.ANALYSIS.VULNERABILITY_ID</code>.
     */
    public final TableField<AnalysisRecord, Long> VULNERABILITY_ID = createField(DSL.name("VULNERABILITY_ID"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.ANALYSIS.CVSSV2VECTOR</code>.
     */
    public final TableField<AnalysisRecord, String> CVSSV2VECTOR = createField(DSL.name("CVSSV2VECTOR"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.ANALYSIS.CVSSV3SCORE</code>.
     */
    public final TableField<AnalysisRecord, BigDecimal> CVSSV3SCORE = createField(DSL.name("CVSSV3SCORE"), SQLDataType.NUMERIC, this, "");

    /**
     * The column <code>public.ANALYSIS.OWASPSCORE</code>.
     */
    public final TableField<AnalysisRecord, BigDecimal> OWASPSCORE = createField(DSL.name("OWASPSCORE"), SQLDataType.NUMERIC, this, "");

    /**
     * The column <code>public.ANALYSIS.CVSSV2SCORE</code>.
     */
    public final TableField<AnalysisRecord, BigDecimal> CVSSV2SCORE = createField(DSL.name("CVSSV2SCORE"), SQLDataType.NUMERIC, this, "");

    /**
     * The column <code>public.ANALYSIS.OWASPVECTOR</code>.
     */
    public final TableField<AnalysisRecord, String> OWASPVECTOR = createField(DSL.name("OWASPVECTOR"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.ANALYSIS.CVSSV3VECTOR</code>.
     */
    public final TableField<AnalysisRecord, String> CVSSV3VECTOR = createField(DSL.name("CVSSV3VECTOR"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.ANALYSIS.SEVERITY</code>.
     */
    public final TableField<AnalysisRecord, Severity> SEVERITY = createField(DSL.name("SEVERITY"), SQLDataType.VARCHAR.asEnumDataType(Severity.class), this, "");

    /**
     * The column <code>public.ANALYSIS.VULNERABILITY_POLICY_ID</code>.
     */
    public final TableField<AnalysisRecord, Long> VULNERABILITY_POLICY_ID = createField(DSL.name("VULNERABILITY_POLICY_ID"), SQLDataType.BIGINT, this, "");

    private Analysis(Name alias, Table<AnalysisRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Analysis(Name alias, Table<AnalysisRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.ANALYSIS</code> table reference
     */
    public Analysis(String alias) {
        this(DSL.name(alias), ANALYSIS);
    }

    /**
     * Create an aliased <code>public.ANALYSIS</code> table reference
     */
    public Analysis(Name alias) {
        this(alias, ANALYSIS);
    }

    /**
     * Create a <code>public.ANALYSIS</code> table reference
     */
    public Analysis() {
        this(DSL.name("ANALYSIS"), null);
    }

    public <O extends Record> Analysis(Table<O> path, ForeignKey<O, AnalysisRecord> childPath, InverseForeignKey<O, AnalysisRecord> parentPath) {
        super(path, childPath, parentPath, ANALYSIS);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class AnalysisPath extends Analysis implements Path<AnalysisRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> AnalysisPath(Table<O> path, ForeignKey<O, AnalysisRecord> childPath, InverseForeignKey<O, AnalysisRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private AnalysisPath(Name alias, Table<AnalysisRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public AnalysisPath as(String alias) {
            return new AnalysisPath(DSL.name(alias), this);
        }

        @Override
        public AnalysisPath as(Name alias) {
            return new AnalysisPath(alias, this);
        }

        @Override
        public AnalysisPath as(Table<?> alias) {
            return new AnalysisPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.ANALYSIS_COMPONENT_ID_IDX, Indexes.ANALYSIS_VULNERABILITY_ID_IDX);
    }

    @Override
    public Identity<AnalysisRecord, Long> getIdentity() {
        return (Identity<AnalysisRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<AnalysisRecord> getPrimaryKey() {
        return Keys.ANALYSIS_PK;
    }

    @Override
    public List<UniqueKey<AnalysisRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.ANALYSIS_COMPOSITE_IDX);
    }

    @Override
    public List<ForeignKey<AnalysisRecord, ?>> getReferences() {
        return Arrays.asList(Keys.ANALYSIS__ANALYSIS_COMPONENT_FK, Keys.ANALYSIS__ANALYSIS_PROJECT_FK, Keys.ANALYSIS__ANALYSIS_VULNERABILITY_FK, Keys.ANALYSIS__ANALYSIS_VULNERABILITY_POLICY_ID_FK);
    }

    private transient ComponentPath _component;

    /**
     * Get the implicit join path to the <code>public.COMPONENT</code> table.
     */
    public ComponentPath component() {
        if (_component == null)
            _component = new ComponentPath(this, Keys.ANALYSIS__ANALYSIS_COMPONENT_FK, null);

        return _component;
    }

    private transient ProjectPath _project;

    /**
     * Get the implicit join path to the <code>public.PROJECT</code> table.
     */
    public ProjectPath project() {
        if (_project == null)
            _project = new ProjectPath(this, Keys.ANALYSIS__ANALYSIS_PROJECT_FK, null);

        return _project;
    }

    private transient VulnerabilityPath _vulnerability;

    /**
     * Get the implicit join path to the <code>public.VULNERABILITY</code>
     * table.
     */
    public VulnerabilityPath vulnerability() {
        if (_vulnerability == null)
            _vulnerability = new VulnerabilityPath(this, Keys.ANALYSIS__ANALYSIS_VULNERABILITY_FK, null);

        return _vulnerability;
    }

    private transient VulnerabilityPolicyPath _vulnerabilityPolicy;

    /**
     * Get the implicit join path to the
     * <code>public.VULNERABILITY_POLICY</code> table.
     */
    public VulnerabilityPolicyPath vulnerabilityPolicy() {
        if (_vulnerabilityPolicy == null)
            _vulnerabilityPolicy = new VulnerabilityPolicyPath(this, Keys.ANALYSIS__ANALYSIS_VULNERABILITY_POLICY_ID_FK, null);

        return _vulnerabilityPolicy;
    }

    private transient AnalysiscommentPath _analysiscomment;

    /**
     * Get the implicit to-many join path to the
     * <code>public.ANALYSISCOMMENT</code> table
     */
    public AnalysiscommentPath analysiscomment() {
        if (_analysiscomment == null)
            _analysiscomment = new AnalysiscommentPath(this, null, Keys.ANALYSISCOMMENT__ANALYSISCOMMENT_ANALYSIS_FK.getInverseKey());

        return _analysiscomment;
    }

    @Override
    public Analysis as(String alias) {
        return new Analysis(DSL.name(alias), this);
    }

    @Override
    public Analysis as(Name alias) {
        return new Analysis(alias, this);
    }

    @Override
    public Analysis as(Table<?> alias) {
        return new Analysis(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Analysis rename(String name) {
        return new Analysis(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Analysis rename(Name name) {
        return new Analysis(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Analysis rename(Table<?> name) {
        return new Analysis(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Analysis where(Condition condition) {
        return new Analysis(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Analysis where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Analysis where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Analysis where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Analysis where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Analysis where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Analysis where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Analysis where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Analysis whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Analysis whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
