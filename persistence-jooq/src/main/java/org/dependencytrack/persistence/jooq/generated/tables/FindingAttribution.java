/*
 * This file is generated by jOOQ.
 */
package org.dependencytrack.persistence.jooq.generated.tables;


import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;
import java.util.UUID;

import javax.annotation.processing.Generated;

import org.dependencytrack.persistence.jooq.generated.DefaultSchema;
import org.dependencytrack.persistence.jooq.generated.Indexes;
import org.dependencytrack.persistence.jooq.generated.Keys;
import org.dependencytrack.persistence.jooq.generated.tables.Component.ComponentPath;
import org.dependencytrack.persistence.jooq.generated.tables.Project.ProjectPath;
import org.dependencytrack.persistence.jooq.generated.tables.Vulnerability.VulnerabilityPath;
import org.dependencytrack.persistence.jooq.generated.tables.records.FindingAttributionRecord;
import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.20.4",
        "schema version:v5.6.0-28"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class FindingAttribution extends TableImpl<FindingAttributionRecord> {

    private static final long serialVersionUID = -109488251;

    /**
     * The reference instance of <code>FINDINGATTRIBUTION</code>
     */
    public static final FindingAttribution FINDINGATTRIBUTION = new FindingAttribution();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<FindingAttributionRecord> getRecordType() {
        return FindingAttributionRecord.class;
    }

    /**
     * The column <code>FINDINGATTRIBUTION.ID</code>.
     */
    public final TableField<FindingAttributionRecord, Long> id = createField(DSL.name("ID"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>FINDINGATTRIBUTION.ALT_ID</code>.
     */
    public final TableField<FindingAttributionRecord, String> altId = createField(DSL.name("ALT_ID"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>FINDINGATTRIBUTION.ANALYZERIDENTITY</code>.
     */
    public final TableField<FindingAttributionRecord, String> analyzerIdentity = createField(DSL.name("ANALYZERIDENTITY"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>FINDINGATTRIBUTION.ATTRIBUTED_ON</code>.
     */
    public final TableField<FindingAttributionRecord, OffsetDateTime> attributedOn = createField(DSL.name("ATTRIBUTED_ON"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).nullable(false), this, "");

    /**
     * The column <code>FINDINGATTRIBUTION.COMPONENT_ID</code>.
     */
    public final TableField<FindingAttributionRecord, Long> componentId = createField(DSL.name("COMPONENT_ID"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>FINDINGATTRIBUTION.PROJECT_ID</code>.
     */
    public final TableField<FindingAttributionRecord, Long> projectId = createField(DSL.name("PROJECT_ID"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>FINDINGATTRIBUTION.REFERENCE_URL</code>.
     */
    public final TableField<FindingAttributionRecord, String> referenceUrl = createField(DSL.name("REFERENCE_URL"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>FINDINGATTRIBUTION.UUID</code>.
     */
    public final TableField<FindingAttributionRecord, UUID> uuid = createField(DSL.name("UUID"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>FINDINGATTRIBUTION.VULNERABILITY_ID</code>.
     */
    public final TableField<FindingAttributionRecord, Long> vulnerabilityId = createField(DSL.name("VULNERABILITY_ID"), SQLDataType.BIGINT.nullable(false), this, "");

    private FindingAttribution(Name alias, Table<FindingAttributionRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private FindingAttribution(Name alias, Table<FindingAttributionRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>FINDINGATTRIBUTION</code> table reference
     */
    public FindingAttribution(String alias) {
        this(DSL.name(alias), FINDINGATTRIBUTION);
    }

    /**
     * Create an aliased <code>FINDINGATTRIBUTION</code> table reference
     */
    public FindingAttribution(Name alias) {
        this(alias, FINDINGATTRIBUTION);
    }

    /**
     * Create a <code>FINDINGATTRIBUTION</code> table reference
     */
    public FindingAttribution() {
        this(DSL.name("FINDINGATTRIBUTION"), null);
    }

    public <O extends Record> FindingAttribution(Table<O> path, ForeignKey<O, FindingAttributionRecord> childPath, InverseForeignKey<O, FindingAttributionRecord> parentPath) {
        super(path, childPath, parentPath, FINDINGATTRIBUTION);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    @Generated(
        value = {
            "https://www.jooq.org",
            "jOOQ version:3.20.4",
            "schema version:v5.6.0-28"
        },
        comments = "This class is generated by jOOQ"
    )
    public static class FindingAttributionPath extends FindingAttribution implements Path<FindingAttributionRecord> {

        private static final long serialVersionUID = -109488251;
        public <O extends Record> FindingAttributionPath(Table<O> path, ForeignKey<O, FindingAttributionRecord> childPath, InverseForeignKey<O, FindingAttributionRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private FindingAttributionPath(Name alias, Table<FindingAttributionRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public FindingAttributionPath as(String alias) {
            return new FindingAttributionPath(DSL.name(alias), this);
        }

        @Override
        public FindingAttributionPath as(Name alias) {
            return new FindingAttributionPath(alias, this);
        }

        @Override
        public FindingAttributionPath as(Table<?> alias) {
            return new FindingAttributionPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.FINDINGATTRIBUTION_COMPOUND_IDX, Indexes.FINDINGATTRIBUTION_PROJECT_ID_IDX, Indexes.FINDINGATTRIBUTION_VULNERABILITY_ID_IDX);
    }

    @Override
    public Identity<FindingAttributionRecord, Long> getIdentity() {
        return (Identity<FindingAttributionRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<FindingAttributionRecord> getPrimaryKey() {
        return Keys.FINDINGATTRIBUTION_PK;
    }

    @Override
    public List<UniqueKey<FindingAttributionRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.FINDINGATTRIBUTION_UUID_IDX);
    }

    @Override
    public List<ForeignKey<FindingAttributionRecord, ?>> getReferences() {
        return Arrays.asList(Keys.FINDINGATTRIBUTION_COMPONENT_FK, Keys.FINDINGATTRIBUTION_PROJECT_FK, Keys.FINDINGATTRIBUTION_VULNERABILITY_FK);
    }

    private transient ComponentPath _component;

    /**
     * Get the implicit join path to the <code>COMPONENT</code> table.
     */
    public ComponentPath component() {
        if (_component == null)
            _component = new ComponentPath(this, Keys.FINDINGATTRIBUTION_COMPONENT_FK, null);

        return _component;
    }

    private transient ProjectPath _project;

    /**
     * Get the implicit join path to the <code>PROJECT</code> table.
     */
    public ProjectPath project() {
        if (_project == null)
            _project = new ProjectPath(this, Keys.FINDINGATTRIBUTION_PROJECT_FK, null);

        return _project;
    }

    private transient VulnerabilityPath _vulnerability;

    /**
     * Get the implicit join path to the <code>VULNERABILITY</code> table.
     */
    public VulnerabilityPath vulnerability() {
        if (_vulnerability == null)
            _vulnerability = new VulnerabilityPath(this, Keys.FINDINGATTRIBUTION_VULNERABILITY_FK, null);

        return _vulnerability;
    }

    @Override
    public FindingAttribution as(String alias) {
        return new FindingAttribution(DSL.name(alias), this);
    }

    @Override
    public FindingAttribution as(Name alias) {
        return new FindingAttribution(alias, this);
    }

    @Override
    public FindingAttribution as(Table<?> alias) {
        return new FindingAttribution(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public FindingAttribution rename(String name) {
        return new FindingAttribution(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public FindingAttribution rename(Name name) {
        return new FindingAttribution(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public FindingAttribution rename(Table<?> name) {
        return new FindingAttribution(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public FindingAttribution where(Condition condition) {
        return new FindingAttribution(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public FindingAttribution where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public FindingAttribution where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public FindingAttribution where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public FindingAttribution where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public FindingAttribution where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public FindingAttribution where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public FindingAttribution where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public FindingAttribution whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public FindingAttribution whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
