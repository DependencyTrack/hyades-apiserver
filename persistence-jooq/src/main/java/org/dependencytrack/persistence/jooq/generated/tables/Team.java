/*
 * This file is generated by jOOQ.
 */
package org.dependencytrack.persistence.jooq.generated.tables;


import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.dependencytrack.persistence.jooq.generated.Keys;
import org.dependencytrack.persistence.jooq.generated.Public;
import org.dependencytrack.persistence.jooq.generated.tables.Apikey.ApikeyPath;
import org.dependencytrack.persistence.jooq.generated.tables.ApikeysTeams.ApikeysTeamsPath;
import org.dependencytrack.persistence.jooq.generated.tables.Ldapuser.LdapuserPath;
import org.dependencytrack.persistence.jooq.generated.tables.LdapusersTeams.LdapusersTeamsPath;
import org.dependencytrack.persistence.jooq.generated.tables.Manageduser.ManageduserPath;
import org.dependencytrack.persistence.jooq.generated.tables.ManagedusersTeams.ManagedusersTeamsPath;
import org.dependencytrack.persistence.jooq.generated.tables.Mappedldapgroup.MappedldapgroupPath;
import org.dependencytrack.persistence.jooq.generated.tables.Mappedoidcgroup.MappedoidcgroupPath;
import org.dependencytrack.persistence.jooq.generated.tables.Notificationrule.NotificationrulePath;
import org.dependencytrack.persistence.jooq.generated.tables.NotificationruleTeams.NotificationruleTeamsPath;
import org.dependencytrack.persistence.jooq.generated.tables.Oidcgroup.OidcgroupPath;
import org.dependencytrack.persistence.jooq.generated.tables.Oidcuser.OidcuserPath;
import org.dependencytrack.persistence.jooq.generated.tables.OidcusersTeams.OidcusersTeamsPath;
import org.dependencytrack.persistence.jooq.generated.tables.Permission.PermissionPath;
import org.dependencytrack.persistence.jooq.generated.tables.Project.ProjectPath;
import org.dependencytrack.persistence.jooq.generated.tables.ProjectAccessTeams.ProjectAccessTeamsPath;
import org.dependencytrack.persistence.jooq.generated.tables.TeamsPermissions.TeamsPermissionsPath;
import org.dependencytrack.persistence.jooq.generated.tables.records.TeamRecord;
import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Team extends TableImpl<TeamRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.TEAM</code>
     */
    public static final Team TEAM = new Team();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TeamRecord> getRecordType() {
        return TeamRecord.class;
    }

    /**
     * The column <code>public.TEAM.ID</code>.
     */
    public final TableField<TeamRecord, Long> ID = createField(DSL.name("ID"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.TEAM.NAME</code>.
     */
    public final TableField<TeamRecord, String> NAME = createField(DSL.name("NAME"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>public.TEAM.UUID</code>.
     */
    public final TableField<TeamRecord, String> UUID = createField(DSL.name("UUID"), SQLDataType.VARCHAR(36).nullable(false), this, "");

    private Team(Name alias, Table<TeamRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Team(Name alias, Table<TeamRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.TEAM</code> table reference
     */
    public Team(String alias) {
        this(DSL.name(alias), TEAM);
    }

    /**
     * Create an aliased <code>public.TEAM</code> table reference
     */
    public Team(Name alias) {
        this(alias, TEAM);
    }

    /**
     * Create a <code>public.TEAM</code> table reference
     */
    public Team() {
        this(DSL.name("TEAM"), null);
    }

    public <O extends Record> Team(Table<O> path, ForeignKey<O, TeamRecord> childPath, InverseForeignKey<O, TeamRecord> parentPath) {
        super(path, childPath, parentPath, TEAM);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class TeamPath extends Team implements Path<TeamRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> TeamPath(Table<O> path, ForeignKey<O, TeamRecord> childPath, InverseForeignKey<O, TeamRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private TeamPath(Name alias, Table<TeamRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public TeamPath as(String alias) {
            return new TeamPath(DSL.name(alias), this);
        }

        @Override
        public TeamPath as(Name alias) {
            return new TeamPath(alias, this);
        }

        @Override
        public TeamPath as(Table<?> alias) {
            return new TeamPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public Identity<TeamRecord, Long> getIdentity() {
        return (Identity<TeamRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<TeamRecord> getPrimaryKey() {
        return Keys.TEAM_PK;
    }

    @Override
    public List<UniqueKey<TeamRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.TEAM_NAME_IDX, Keys.TEAM_UUID_IDX);
    }

    private transient ApikeysTeamsPath _apikeysTeams;

    /**
     * Get the implicit to-many join path to the
     * <code>public.APIKEYS_TEAMS</code> table
     */
    public ApikeysTeamsPath apikeysTeams() {
        if (_apikeysTeams == null)
            _apikeysTeams = new ApikeysTeamsPath(this, null, Keys.APIKEYS_TEAMS__APIKEYS_TEAMS_TEAM_FK.getInverseKey());

        return _apikeysTeams;
    }

    private transient LdapusersTeamsPath _ldapusersTeams;

    /**
     * Get the implicit to-many join path to the
     * <code>public.LDAPUSERS_TEAMS</code> table
     */
    public LdapusersTeamsPath ldapusersTeams() {
        if (_ldapusersTeams == null)
            _ldapusersTeams = new LdapusersTeamsPath(this, null, Keys.LDAPUSERS_TEAMS__LDAPUSERS_TEAMS_TEAM_FK.getInverseKey());

        return _ldapusersTeams;
    }

    private transient ManagedusersTeamsPath _managedusersTeams;

    /**
     * Get the implicit to-many join path to the
     * <code>public.MANAGEDUSERS_TEAMS</code> table
     */
    public ManagedusersTeamsPath managedusersTeams() {
        if (_managedusersTeams == null)
            _managedusersTeams = new ManagedusersTeamsPath(this, null, Keys.MANAGEDUSERS_TEAMS__MANAGEDUSERS_TEAMS_TEAM_FK.getInverseKey());

        return _managedusersTeams;
    }

    private transient MappedldapgroupPath _mappedldapgroup;

    /**
     * Get the implicit to-many join path to the
     * <code>public.MAPPEDLDAPGROUP</code> table
     */
    public MappedldapgroupPath mappedldapgroup() {
        if (_mappedldapgroup == null)
            _mappedldapgroup = new MappedldapgroupPath(this, null, Keys.MAPPEDLDAPGROUP__MAPPEDLDAPGROUP_TEAM_FK.getInverseKey());

        return _mappedldapgroup;
    }

    private transient MappedoidcgroupPath _mappedoidcgroup;

    /**
     * Get the implicit to-many join path to the
     * <code>public.MAPPEDOIDCGROUP</code> table
     */
    public MappedoidcgroupPath mappedoidcgroup() {
        if (_mappedoidcgroup == null)
            _mappedoidcgroup = new MappedoidcgroupPath(this, null, Keys.MAPPEDOIDCGROUP__MAPPEDOIDCGROUP_TEAM_FK.getInverseKey());

        return _mappedoidcgroup;
    }

    private transient NotificationruleTeamsPath _notificationruleTeams;

    /**
     * Get the implicit to-many join path to the
     * <code>public.NOTIFICATIONRULE_TEAMS</code> table
     */
    public NotificationruleTeamsPath notificationruleTeams() {
        if (_notificationruleTeams == null)
            _notificationruleTeams = new NotificationruleTeamsPath(this, null, Keys.NOTIFICATIONRULE_TEAMS__NOTIFICATIONRULE_TEAMS_TEAM_FK.getInverseKey());

        return _notificationruleTeams;
    }

    private transient OidcusersTeamsPath _oidcusersTeams;

    /**
     * Get the implicit to-many join path to the
     * <code>public.OIDCUSERS_TEAMS</code> table
     */
    public OidcusersTeamsPath oidcusersTeams() {
        if (_oidcusersTeams == null)
            _oidcusersTeams = new OidcusersTeamsPath(this, null, Keys.OIDCUSERS_TEAMS__OIDCUSERS_TEAMS_TEAM_FK.getInverseKey());

        return _oidcusersTeams;
    }

    private transient ProjectAccessTeamsPath _projectAccessTeams;

    /**
     * Get the implicit to-many join path to the
     * <code>public.PROJECT_ACCESS_TEAMS</code> table
     */
    public ProjectAccessTeamsPath projectAccessTeams() {
        if (_projectAccessTeams == null)
            _projectAccessTeams = new ProjectAccessTeamsPath(this, null, Keys.PROJECT_ACCESS_TEAMS__PROJECT_ACCESS_TEAMS_TEAM_FK.getInverseKey());

        return _projectAccessTeams;
    }

    private transient TeamsPermissionsPath _teamsPermissions;

    /**
     * Get the implicit to-many join path to the
     * <code>public.TEAMS_PERMISSIONS</code> table
     */
    public TeamsPermissionsPath teamsPermissions() {
        if (_teamsPermissions == null)
            _teamsPermissions = new TeamsPermissionsPath(this, null, Keys.TEAMS_PERMISSIONS__TEAMS_PERMISSIONS_TEAM_FK.getInverseKey());

        return _teamsPermissions;
    }

    /**
     * Get the implicit many-to-many join path to the <code>public.APIKEY</code>
     * table
     */
    public ApikeyPath apikey() {
        return apikeysTeams().apikey();
    }

    /**
     * Get the implicit many-to-many join path to the
     * <code>public.LDAPUSER</code> table
     */
    public LdapuserPath ldapuser() {
        return ldapusersTeams().ldapuser();
    }

    /**
     * Get the implicit many-to-many join path to the
     * <code>public.MANAGEDUSER</code> table
     */
    public ManageduserPath manageduser() {
        return managedusersTeams().manageduser();
    }

    /**
     * Get the implicit many-to-many join path to the
     * <code>public.OIDCGROUP</code> table
     */
    public OidcgroupPath oidcgroup() {
        return mappedoidcgroup().oidcgroup();
    }

    /**
     * Get the implicit many-to-many join path to the
     * <code>public.NOTIFICATIONRULE</code> table
     */
    public NotificationrulePath notificationrule() {
        return notificationruleTeams().notificationrule();
    }

    /**
     * Get the implicit many-to-many join path to the
     * <code>public.OIDCUSER</code> table
     */
    public OidcuserPath oidcuser() {
        return oidcusersTeams().oidcuser();
    }

    /**
     * Get the implicit many-to-many join path to the
     * <code>public.PROJECT</code> table
     */
    public ProjectPath project() {
        return projectAccessTeams().project();
    }

    /**
     * Get the implicit many-to-many join path to the
     * <code>public.PERMISSION</code> table
     */
    public PermissionPath permission() {
        return teamsPermissions().permission();
    }

    @Override
    public Team as(String alias) {
        return new Team(DSL.name(alias), this);
    }

    @Override
    public Team as(Name alias) {
        return new Team(alias, this);
    }

    @Override
    public Team as(Table<?> alias) {
        return new Team(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Team rename(String name) {
        return new Team(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Team rename(Name name) {
        return new Team(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Team rename(Table<?> name) {
        return new Team(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Team where(Condition condition) {
        return new Team(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Team where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Team where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Team where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Team where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Team where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Team where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Team where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Team whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Team whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
