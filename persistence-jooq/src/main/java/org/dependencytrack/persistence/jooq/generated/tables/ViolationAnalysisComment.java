/*
 * This file is generated by jOOQ.
 */
package org.dependencytrack.persistence.jooq.generated.tables;


import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import javax.annotation.processing.Generated;

import org.dependencytrack.persistence.jooq.generated.DefaultSchema;
import org.dependencytrack.persistence.jooq.generated.Indexes;
import org.dependencytrack.persistence.jooq.generated.Keys;
import org.dependencytrack.persistence.jooq.generated.tables.ViolationAnalysis.ViolationAnalysisPath;
import org.dependencytrack.persistence.jooq.generated.tables.records.ViolationAnalysisCommentRecord;
import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.20.4",
        "schema version:v5.6.0-28"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class ViolationAnalysisComment extends TableImpl<ViolationAnalysisCommentRecord> {

    private static final long serialVersionUID = 1354024210;

    /**
     * The reference instance of <code>VIOLATIONANALYSISCOMMENT</code>
     */
    public static final ViolationAnalysisComment VIOLATIONANALYSISCOMMENT = new ViolationAnalysisComment();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ViolationAnalysisCommentRecord> getRecordType() {
        return ViolationAnalysisCommentRecord.class;
    }

    /**
     * The column <code>VIOLATIONANALYSISCOMMENT.ID</code>.
     */
    public final TableField<ViolationAnalysisCommentRecord, Long> id = createField(DSL.name("ID"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>VIOLATIONANALYSISCOMMENT.COMMENT</code>.
     */
    public final TableField<ViolationAnalysisCommentRecord, String> comment = createField(DSL.name("COMMENT"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>VIOLATIONANALYSISCOMMENT.COMMENTER</code>.
     */
    public final TableField<ViolationAnalysisCommentRecord, String> commenter = createField(DSL.name("COMMENTER"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>VIOLATIONANALYSISCOMMENT.TIMESTAMP</code>.
     */
    public final TableField<ViolationAnalysisCommentRecord, OffsetDateTime> timestamp = createField(DSL.name("TIMESTAMP"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).nullable(false), this, "");

    /**
     * The column <code>VIOLATIONANALYSISCOMMENT.VIOLATIONANALYSIS_ID</code>.
     */
    public final TableField<ViolationAnalysisCommentRecord, Long> violationAnalysisId = createField(DSL.name("VIOLATIONANALYSIS_ID"), SQLDataType.BIGINT.nullable(false), this, "");

    private ViolationAnalysisComment(Name alias, Table<ViolationAnalysisCommentRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private ViolationAnalysisComment(Name alias, Table<ViolationAnalysisCommentRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>VIOLATIONANALYSISCOMMENT</code> table reference
     */
    public ViolationAnalysisComment(String alias) {
        this(DSL.name(alias), VIOLATIONANALYSISCOMMENT);
    }

    /**
     * Create an aliased <code>VIOLATIONANALYSISCOMMENT</code> table reference
     */
    public ViolationAnalysisComment(Name alias) {
        this(alias, VIOLATIONANALYSISCOMMENT);
    }

    /**
     * Create a <code>VIOLATIONANALYSISCOMMENT</code> table reference
     */
    public ViolationAnalysisComment() {
        this(DSL.name("VIOLATIONANALYSISCOMMENT"), null);
    }

    public <O extends Record> ViolationAnalysisComment(Table<O> path, ForeignKey<O, ViolationAnalysisCommentRecord> childPath, InverseForeignKey<O, ViolationAnalysisCommentRecord> parentPath) {
        super(path, childPath, parentPath, VIOLATIONANALYSISCOMMENT);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    @Generated(
        value = {
            "https://www.jooq.org",
            "jOOQ version:3.20.4",
            "schema version:v5.6.0-28"
        },
        comments = "This class is generated by jOOQ"
    )
    public static class ViolationAnalysisCommentPath extends ViolationAnalysisComment implements Path<ViolationAnalysisCommentRecord> {

        private static final long serialVersionUID = 1354024210;
        public <O extends Record> ViolationAnalysisCommentPath(Table<O> path, ForeignKey<O, ViolationAnalysisCommentRecord> childPath, InverseForeignKey<O, ViolationAnalysisCommentRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private ViolationAnalysisCommentPath(Name alias, Table<ViolationAnalysisCommentRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public ViolationAnalysisCommentPath as(String alias) {
            return new ViolationAnalysisCommentPath(DSL.name(alias), this);
        }

        @Override
        public ViolationAnalysisCommentPath as(Name alias) {
            return new ViolationAnalysisCommentPath(alias, this);
        }

        @Override
        public ViolationAnalysisCommentPath as(Table<?> alias) {
            return new ViolationAnalysisCommentPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.VIOLATIONANALYSISCOMMENT_VIOLATIONANALYSIS_ID_IDX);
    }

    @Override
    public Identity<ViolationAnalysisCommentRecord, Long> getIdentity() {
        return (Identity<ViolationAnalysisCommentRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<ViolationAnalysisCommentRecord> getPrimaryKey() {
        return Keys.VIOLATIONANALYSISCOMMENT_PK;
    }

    @Override
    public List<ForeignKey<ViolationAnalysisCommentRecord, ?>> getReferences() {
        return Arrays.asList(Keys.VIOLATIONANALYSISCOMMENT_VIOLATIONANALYSIS_FK);
    }

    private transient ViolationAnalysisPath _violationAnalysis;

    /**
     * Get the implicit join path to the <code>VIOLATIONANALYSIS</code> table.
     */
    public ViolationAnalysisPath violationAnalysis() {
        if (_violationAnalysis == null)
            _violationAnalysis = new ViolationAnalysisPath(this, Keys.VIOLATIONANALYSISCOMMENT_VIOLATIONANALYSIS_FK, null);

        return _violationAnalysis;
    }

    @Override
    public ViolationAnalysisComment as(String alias) {
        return new ViolationAnalysisComment(DSL.name(alias), this);
    }

    @Override
    public ViolationAnalysisComment as(Name alias) {
        return new ViolationAnalysisComment(alias, this);
    }

    @Override
    public ViolationAnalysisComment as(Table<?> alias) {
        return new ViolationAnalysisComment(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public ViolationAnalysisComment rename(String name) {
        return new ViolationAnalysisComment(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ViolationAnalysisComment rename(Name name) {
        return new ViolationAnalysisComment(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public ViolationAnalysisComment rename(Table<?> name) {
        return new ViolationAnalysisComment(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ViolationAnalysisComment where(Condition condition) {
        return new ViolationAnalysisComment(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ViolationAnalysisComment where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ViolationAnalysisComment where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ViolationAnalysisComment where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public ViolationAnalysisComment where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public ViolationAnalysisComment where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public ViolationAnalysisComment where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public ViolationAnalysisComment where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ViolationAnalysisComment whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ViolationAnalysisComment whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
