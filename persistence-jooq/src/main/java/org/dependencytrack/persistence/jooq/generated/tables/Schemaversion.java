/*
 * This file is generated by jOOQ.
 */
package org.dependencytrack.persistence.jooq.generated.tables;


import java.util.Collection;

import org.dependencytrack.persistence.jooq.generated.Keys;
import org.dependencytrack.persistence.jooq.generated.Public;
import org.dependencytrack.persistence.jooq.generated.tables.records.SchemaversionRecord;
import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Schemaversion extends TableImpl<SchemaversionRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.SCHEMAVERSION</code>
     */
    public static final Schemaversion SCHEMAVERSION = new Schemaversion();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<SchemaversionRecord> getRecordType() {
        return SchemaversionRecord.class;
    }

    /**
     * The column <code>public.SCHEMAVERSION.ID</code>.
     */
    public final TableField<SchemaversionRecord, Long> ID = createField(DSL.name("ID"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.SCHEMAVERSION.VERSION</code>.
     */
    public final TableField<SchemaversionRecord, String> VERSION = createField(DSL.name("VERSION"), SQLDataType.VARCHAR(255), this, "");

    private Schemaversion(Name alias, Table<SchemaversionRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Schemaversion(Name alias, Table<SchemaversionRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.SCHEMAVERSION</code> table reference
     */
    public Schemaversion(String alias) {
        this(DSL.name(alias), SCHEMAVERSION);
    }

    /**
     * Create an aliased <code>public.SCHEMAVERSION</code> table reference
     */
    public Schemaversion(Name alias) {
        this(alias, SCHEMAVERSION);
    }

    /**
     * Create a <code>public.SCHEMAVERSION</code> table reference
     */
    public Schemaversion() {
        this(DSL.name("SCHEMAVERSION"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public Identity<SchemaversionRecord, Long> getIdentity() {
        return (Identity<SchemaversionRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<SchemaversionRecord> getPrimaryKey() {
        return Keys.SCHEMAVERSION_PK;
    }

    @Override
    public Schemaversion as(String alias) {
        return new Schemaversion(DSL.name(alias), this);
    }

    @Override
    public Schemaversion as(Name alias) {
        return new Schemaversion(alias, this);
    }

    @Override
    public Schemaversion as(Table<?> alias) {
        return new Schemaversion(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Schemaversion rename(String name) {
        return new Schemaversion(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Schemaversion rename(Name name) {
        return new Schemaversion(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Schemaversion rename(Table<?> name) {
        return new Schemaversion(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Schemaversion where(Condition condition) {
        return new Schemaversion(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Schemaversion where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Schemaversion where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Schemaversion where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Schemaversion where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Schemaversion where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Schemaversion where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Schemaversion where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Schemaversion whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Schemaversion whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
