/*
 * This file is generated by jOOQ.
 */
package org.dependencytrack.persistence.jooq.generated.tables.records;


import java.util.UUID;

import org.dependencytrack.persistence.jooq.generated.tables.Repository;
import org.jooq.Record1;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class RepositoryRecord extends UpdatableRecordImpl<RepositoryRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>public.REPOSITORY.ID</code>.
     */
    public void setId(Long value) {
        set(0, value);
    }

    /**
     * Getter for <code>public.REPOSITORY.ID</code>.
     */
    public Long getId() {
        return (Long) get(0);
    }

    /**
     * Setter for <code>public.REPOSITORY.AUTHENTICATIONREQUIRED</code>.
     */
    public void setAuthenticationrequired(Boolean value) {
        set(1, value);
    }

    /**
     * Getter for <code>public.REPOSITORY.AUTHENTICATIONREQUIRED</code>.
     */
    public Boolean getAuthenticationrequired() {
        return (Boolean) get(1);
    }

    /**
     * Setter for <code>public.REPOSITORY.ENABLED</code>.
     */
    public void setEnabled(Boolean value) {
        set(2, value);
    }

    /**
     * Getter for <code>public.REPOSITORY.ENABLED</code>.
     */
    public Boolean getEnabled() {
        return (Boolean) get(2);
    }

    /**
     * Setter for <code>public.REPOSITORY.IDENTIFIER</code>.
     */
    public void setIdentifier(String value) {
        set(3, value);
    }

    /**
     * Getter for <code>public.REPOSITORY.IDENTIFIER</code>.
     */
    public String getIdentifier() {
        return (String) get(3);
    }

    /**
     * Setter for <code>public.REPOSITORY.INTERNAL</code>.
     */
    public void setInternal(Boolean value) {
        set(4, value);
    }

    /**
     * Getter for <code>public.REPOSITORY.INTERNAL</code>.
     */
    public Boolean getInternal() {
        return (Boolean) get(4);
    }

    /**
     * Setter for <code>public.REPOSITORY.PASSWORD</code>.
     */
    public void setPassword(String value) {
        set(5, value);
    }

    /**
     * Getter for <code>public.REPOSITORY.PASSWORD</code>.
     */
    public String getPassword() {
        return (String) get(5);
    }

    /**
     * Setter for <code>public.REPOSITORY.RESOLUTION_ORDER</code>.
     */
    public void setResolutionOrder(Integer value) {
        set(6, value);
    }

    /**
     * Getter for <code>public.REPOSITORY.RESOLUTION_ORDER</code>.
     */
    public Integer getResolutionOrder() {
        return (Integer) get(6);
    }

    /**
     * Setter for <code>public.REPOSITORY.TYPE</code>.
     */
    public void setType(String value) {
        set(7, value);
    }

    /**
     * Getter for <code>public.REPOSITORY.TYPE</code>.
     */
    public String getType() {
        return (String) get(7);
    }

    /**
     * Setter for <code>public.REPOSITORY.URL</code>.
     */
    public void setUrl(String value) {
        set(8, value);
    }

    /**
     * Getter for <code>public.REPOSITORY.URL</code>.
     */
    public String getUrl() {
        return (String) get(8);
    }

    /**
     * Setter for <code>public.REPOSITORY.USERNAME</code>.
     */
    public void setUsername(String value) {
        set(9, value);
    }

    /**
     * Getter for <code>public.REPOSITORY.USERNAME</code>.
     */
    public String getUsername() {
        return (String) get(9);
    }

    /**
     * Setter for <code>public.REPOSITORY.UUID</code>.
     */
    public void setUuid(UUID value) {
        set(10, value);
    }

    /**
     * Getter for <code>public.REPOSITORY.UUID</code>.
     */
    public UUID getUuid() {
        return (UUID) get(10);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Long> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached RepositoryRecord
     */
    public RepositoryRecord() {
        super(Repository.REPOSITORY);
    }

    /**
     * Create a detached, initialised RepositoryRecord
     */
    public RepositoryRecord(Long id, Boolean authenticationrequired, Boolean enabled, String identifier, Boolean internal, String password, Integer resolutionOrder, String type, String url, String username, UUID uuid) {
        super(Repository.REPOSITORY);

        setId(id);
        setAuthenticationrequired(authenticationrequired);
        setEnabled(enabled);
        setIdentifier(identifier);
        setInternal(internal);
        setPassword(password);
        setResolutionOrder(resolutionOrder);
        setType(type);
        setUrl(url);
        setUsername(username);
        setUuid(uuid);
        resetTouchedOnNotNull();
    }
}
