/*
 * This file is generated by jOOQ.
 */
package org.dependencytrack.persistence.jooq.generated.tables;


import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.dependencytrack.persistence.jooq.generated.Indexes;
import org.dependencytrack.persistence.jooq.generated.Keys;
import org.dependencytrack.persistence.jooq.generated.Public;
import org.dependencytrack.persistence.jooq.generated.tables.LicensegroupLicense.LicensegroupLicensePath;
import org.dependencytrack.persistence.jooq.generated.tables.records.LicensegroupRecord;
import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Licensegroup extends TableImpl<LicensegroupRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.LICENSEGROUP</code>
     */
    public static final Licensegroup LICENSEGROUP = new Licensegroup();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<LicensegroupRecord> getRecordType() {
        return LicensegroupRecord.class;
    }

    /**
     * The column <code>public.LICENSEGROUP.ID</code>.
     */
    public final TableField<LicensegroupRecord, Long> ID = createField(DSL.name("ID"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.LICENSEGROUP.NAME</code>.
     */
    public final TableField<LicensegroupRecord, String> NAME = createField(DSL.name("NAME"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>public.LICENSEGROUP.RISKWEIGHT</code>.
     */
    public final TableField<LicensegroupRecord, Integer> RISKWEIGHT = createField(DSL.name("RISKWEIGHT"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.LICENSEGROUP.UUID</code>.
     */
    public final TableField<LicensegroupRecord, java.util.UUID> UUID = createField(DSL.name("UUID"), SQLDataType.UUID.nullable(false), this, "");

    private Licensegroup(Name alias, Table<LicensegroupRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Licensegroup(Name alias, Table<LicensegroupRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.LICENSEGROUP</code> table reference
     */
    public Licensegroup(String alias) {
        this(DSL.name(alias), LICENSEGROUP);
    }

    /**
     * Create an aliased <code>public.LICENSEGROUP</code> table reference
     */
    public Licensegroup(Name alias) {
        this(alias, LICENSEGROUP);
    }

    /**
     * Create a <code>public.LICENSEGROUP</code> table reference
     */
    public Licensegroup() {
        this(DSL.name("LICENSEGROUP"), null);
    }

    public <O extends Record> Licensegroup(Table<O> path, ForeignKey<O, LicensegroupRecord> childPath, InverseForeignKey<O, LicensegroupRecord> parentPath) {
        super(path, childPath, parentPath, LICENSEGROUP);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class LicensegroupPath extends Licensegroup implements Path<LicensegroupRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> LicensegroupPath(Table<O> path, ForeignKey<O, LicensegroupRecord> childPath, InverseForeignKey<O, LicensegroupRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private LicensegroupPath(Name alias, Table<LicensegroupRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public LicensegroupPath as(String alias) {
            return new LicensegroupPath(DSL.name(alias), this);
        }

        @Override
        public LicensegroupPath as(Name alias) {
            return new LicensegroupPath(alias, this);
        }

        @Override
        public LicensegroupPath as(Table<?> alias) {
            return new LicensegroupPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.LICENSEGROUP_NAME_IDX);
    }

    @Override
    public Identity<LicensegroupRecord, Long> getIdentity() {
        return (Identity<LicensegroupRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<LicensegroupRecord> getPrimaryKey() {
        return Keys.LICENSEGROUP_PK;
    }

    @Override
    public List<UniqueKey<LicensegroupRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.LICENSEGROUP_UUID_IDX);
    }

    private transient LicensegroupLicensePath _licensegroupLicense;

    /**
     * Get the implicit to-many join path to the
     * <code>public.LICENSEGROUP_LICENSE</code> table
     */
    public LicensegroupLicensePath licensegroupLicense() {
        if (_licensegroupLicense == null)
            _licensegroupLicense = new LicensegroupLicensePath(this, null, Keys.LICENSEGROUP_LICENSE__LICENSEGROUP_LICENSE_LICENSEGROUP_FK.getInverseKey());

        return _licensegroupLicense;
    }

    @Override
    public Licensegroup as(String alias) {
        return new Licensegroup(DSL.name(alias), this);
    }

    @Override
    public Licensegroup as(Name alias) {
        return new Licensegroup(alias, this);
    }

    @Override
    public Licensegroup as(Table<?> alias) {
        return new Licensegroup(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Licensegroup rename(String name) {
        return new Licensegroup(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Licensegroup rename(Name name) {
        return new Licensegroup(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Licensegroup rename(Table<?> name) {
        return new Licensegroup(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Licensegroup where(Condition condition) {
        return new Licensegroup(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Licensegroup where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Licensegroup where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Licensegroup where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Licensegroup where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Licensegroup where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Licensegroup where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Licensegroup where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Licensegroup whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Licensegroup whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
