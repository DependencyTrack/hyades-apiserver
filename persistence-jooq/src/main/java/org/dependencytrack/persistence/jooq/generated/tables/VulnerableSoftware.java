/*
 * This file is generated by jOOQ.
 */
package org.dependencytrack.persistence.jooq.generated.tables;


import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.dependencytrack.persistence.jooq.generated.Indexes;
import org.dependencytrack.persistence.jooq.generated.Keys;
import org.dependencytrack.persistence.jooq.generated.Public;
import org.dependencytrack.persistence.jooq.generated.tables.AffectedVersionAttribution.AffectedversionattributionPath;
import org.dependencytrack.persistence.jooq.generated.tables.VulnerableSoftwareVulnerabilities.VulnerablesoftwareVulnerabilitiesPath;
import org.dependencytrack.persistence.jooq.generated.tables.records.VulnerableSoftwareRecord;
import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class VulnerableSoftware extends TableImpl<VulnerableSoftwareRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.VULNERABLESOFTWARE</code>
     */
    public static final VulnerableSoftware VULNERABLESOFTWARE = new VulnerableSoftware();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<VulnerableSoftwareRecord> getRecordType() {
        return VulnerableSoftwareRecord.class;
    }

    /**
     * The column <code>public.VULNERABLESOFTWARE.ID</code>.
     */
    public final TableField<VulnerableSoftwareRecord, Long> ID = createField(DSL.name("ID"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.VULNERABLESOFTWARE.CPE22</code>.
     */
    public final TableField<VulnerableSoftwareRecord, String> CPE22 = createField(DSL.name("CPE22"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.VULNERABLESOFTWARE.CPE23</code>.
     */
    public final TableField<VulnerableSoftwareRecord, String> CPE23 = createField(DSL.name("CPE23"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.VULNERABLESOFTWARE.EDITION</code>.
     */
    public final TableField<VulnerableSoftwareRecord, String> EDITION = createField(DSL.name("EDITION"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.VULNERABLESOFTWARE.LANGUAGE</code>.
     */
    public final TableField<VulnerableSoftwareRecord, String> LANGUAGE = createField(DSL.name("LANGUAGE"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.VULNERABLESOFTWARE.OTHER</code>.
     */
    public final TableField<VulnerableSoftwareRecord, String> OTHER = createField(DSL.name("OTHER"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.VULNERABLESOFTWARE.PART</code>.
     */
    public final TableField<VulnerableSoftwareRecord, String> PART = createField(DSL.name("PART"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.VULNERABLESOFTWARE.PRODUCT</code>.
     */
    public final TableField<VulnerableSoftwareRecord, String> PRODUCT = createField(DSL.name("PRODUCT"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.VULNERABLESOFTWARE.PURL</code>.
     */
    public final TableField<VulnerableSoftwareRecord, String> PURL = createField(DSL.name("PURL"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.VULNERABLESOFTWARE.PURL_NAME</code>.
     */
    public final TableField<VulnerableSoftwareRecord, String> PURL_NAME = createField(DSL.name("PURL_NAME"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.VULNERABLESOFTWARE.PURL_NAMESPACE</code>.
     */
    public final TableField<VulnerableSoftwareRecord, String> PURL_NAMESPACE = createField(DSL.name("PURL_NAMESPACE"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.VULNERABLESOFTWARE.PURL_QUALIFIERS</code>.
     */
    public final TableField<VulnerableSoftwareRecord, String> PURL_QUALIFIERS = createField(DSL.name("PURL_QUALIFIERS"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.VULNERABLESOFTWARE.PURL_SUBPATH</code>.
     */
    public final TableField<VulnerableSoftwareRecord, String> PURL_SUBPATH = createField(DSL.name("PURL_SUBPATH"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.VULNERABLESOFTWARE.PURL_TYPE</code>.
     */
    public final TableField<VulnerableSoftwareRecord, String> PURL_TYPE = createField(DSL.name("PURL_TYPE"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.VULNERABLESOFTWARE.PURL_VERSION</code>.
     */
    public final TableField<VulnerableSoftwareRecord, String> PURL_VERSION = createField(DSL.name("PURL_VERSION"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.VULNERABLESOFTWARE.SWEDITION</code>.
     */
    public final TableField<VulnerableSoftwareRecord, String> SWEDITION = createField(DSL.name("SWEDITION"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.VULNERABLESOFTWARE.TARGETHW</code>.
     */
    public final TableField<VulnerableSoftwareRecord, String> TARGETHW = createField(DSL.name("TARGETHW"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.VULNERABLESOFTWARE.TARGETSW</code>.
     */
    public final TableField<VulnerableSoftwareRecord, String> TARGETSW = createField(DSL.name("TARGETSW"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.VULNERABLESOFTWARE.UPDATE</code>.
     */
    public final TableField<VulnerableSoftwareRecord, String> UPDATE = createField(DSL.name("UPDATE"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.VULNERABLESOFTWARE.UUID</code>.
     */
    public final TableField<VulnerableSoftwareRecord, java.util.UUID> UUID = createField(DSL.name("UUID"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.VULNERABLESOFTWARE.VENDOR</code>.
     */
    public final TableField<VulnerableSoftwareRecord, String> VENDOR = createField(DSL.name("VENDOR"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.VULNERABLESOFTWARE.VERSION</code>.
     */
    public final TableField<VulnerableSoftwareRecord, String> VERSION = createField(DSL.name("VERSION"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.VULNERABLESOFTWARE.VERSIONENDEXCLUDING</code>.
     */
    public final TableField<VulnerableSoftwareRecord, String> VERSIONENDEXCLUDING = createField(DSL.name("VERSIONENDEXCLUDING"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.VULNERABLESOFTWARE.VERSIONENDINCLUDING</code>.
     */
    public final TableField<VulnerableSoftwareRecord, String> VERSIONENDINCLUDING = createField(DSL.name("VERSIONENDINCLUDING"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.VULNERABLESOFTWARE.VERSIONSTARTEXCLUDING</code>.
     */
    public final TableField<VulnerableSoftwareRecord, String> VERSIONSTARTEXCLUDING = createField(DSL.name("VERSIONSTARTEXCLUDING"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.VULNERABLESOFTWARE.VERSIONSTARTINCLUDING</code>.
     */
    public final TableField<VulnerableSoftwareRecord, String> VERSIONSTARTINCLUDING = createField(DSL.name("VERSIONSTARTINCLUDING"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.VULNERABLESOFTWARE.VULNERABLE</code>.
     */
    public final TableField<VulnerableSoftwareRecord, Boolean> VULNERABLE = createField(DSL.name("VULNERABLE"), SQLDataType.BOOLEAN.nullable(false), this, "");

    private VulnerableSoftware(Name alias, Table<VulnerableSoftwareRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private VulnerableSoftware(Name alias, Table<VulnerableSoftwareRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.VULNERABLESOFTWARE</code> table reference
     */
    public VulnerableSoftware(String alias) {
        this(DSL.name(alias), VULNERABLESOFTWARE);
    }

    /**
     * Create an aliased <code>public.VULNERABLESOFTWARE</code> table reference
     */
    public VulnerableSoftware(Name alias) {
        this(alias, VULNERABLESOFTWARE);
    }

    /**
     * Create a <code>public.VULNERABLESOFTWARE</code> table reference
     */
    public VulnerableSoftware() {
        this(DSL.name("VULNERABLESOFTWARE"), null);
    }

    public <O extends Record> VulnerableSoftware(Table<O> path, ForeignKey<O, VulnerableSoftwareRecord> childPath, InverseForeignKey<O, VulnerableSoftwareRecord> parentPath) {
        super(path, childPath, parentPath, VULNERABLESOFTWARE);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class VulnerablesoftwarePath extends VulnerableSoftware implements Path<VulnerableSoftwareRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> VulnerablesoftwarePath(Table<O> path, ForeignKey<O, VulnerableSoftwareRecord> childPath, InverseForeignKey<O, VulnerableSoftwareRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private VulnerablesoftwarePath(Name alias, Table<VulnerableSoftwareRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public VulnerablesoftwarePath as(String alias) {
            return new VulnerablesoftwarePath(DSL.name(alias), this);
        }

        @Override
        public VulnerablesoftwarePath as(Name alias) {
            return new VulnerablesoftwarePath(alias, this);
        }

        @Override
        public VulnerablesoftwarePath as(Table<?> alias) {
            return new VulnerablesoftwarePath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.VULNERABLESOFTWARE_CPE23_VERSION_RANGE_IDX, Indexes.VULNERABLESOFTWARE_CPE_PURL_PARTS_IDX, Indexes.VULNERABLESOFTWARE_PURL_TYPE_NS_NAME_IDX, Indexes.VULNERABLESOFTWARE_PURL_VERSION_RANGE_IDX);
    }

    @Override
    public Identity<VulnerableSoftwareRecord, Long> getIdentity() {
        return (Identity<VulnerableSoftwareRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<VulnerableSoftwareRecord> getPrimaryKey() {
        return Keys.VULNERABLESOFTWARE_PK;
    }

    @Override
    public List<UniqueKey<VulnerableSoftwareRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.VULNERABLESOFTWARE_UUID_IDX);
    }

    private transient AffectedversionattributionPath _affectedversionattribution;

    /**
     * Get the implicit to-many join path to the
     * <code>public.AFFECTEDVERSIONATTRIBUTION</code> table
     */
    public AffectedversionattributionPath affectedversionattribution() {
        if (_affectedversionattribution == null)
            _affectedversionattribution = new AffectedversionattributionPath(this, null, Keys.AFFECTEDVERSIONATTRIBUTION__AFFECTEDVERSIONATTRIBUTION_VULNERABLESOFTWARE_FK.getInverseKey());

        return _affectedversionattribution;
    }

    private transient VulnerablesoftwareVulnerabilitiesPath _vulnerablesoftwareVulnerabilities;

    /**
     * Get the implicit to-many join path to the
     * <code>public.VULNERABLESOFTWARE_VULNERABILITIES</code> table
     */
    public VulnerablesoftwareVulnerabilitiesPath vulnerablesoftwareVulnerabilities() {
        if (_vulnerablesoftwareVulnerabilities == null)
            _vulnerablesoftwareVulnerabilities = new VulnerablesoftwareVulnerabilitiesPath(this, null, Keys.VULNERABLESOFTWARE_VULNERABILITIES__VULNERABLESOFTWARE_VULNERABILITIES_VULNERABLESOFTWARE_FK.getInverseKey());

        return _vulnerablesoftwareVulnerabilities;
    }

    @Override
    public VulnerableSoftware as(String alias) {
        return new VulnerableSoftware(DSL.name(alias), this);
    }

    @Override
    public VulnerableSoftware as(Name alias) {
        return new VulnerableSoftware(alias, this);
    }

    @Override
    public VulnerableSoftware as(Table<?> alias) {
        return new VulnerableSoftware(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public VulnerableSoftware rename(String name) {
        return new VulnerableSoftware(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public VulnerableSoftware rename(Name name) {
        return new VulnerableSoftware(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public VulnerableSoftware rename(Table<?> name) {
        return new VulnerableSoftware(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public VulnerableSoftware where(Condition condition) {
        return new VulnerableSoftware(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public VulnerableSoftware where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public VulnerableSoftware where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public VulnerableSoftware where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public VulnerableSoftware where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public VulnerableSoftware where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public VulnerableSoftware where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public VulnerableSoftware where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public VulnerableSoftware whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public VulnerableSoftware whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
