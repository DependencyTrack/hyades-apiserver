/*
 * This file is generated by jOOQ.
 */
package org.dependencytrack.persistence.jooq.generated.tables;


import java.util.Arrays;
import java.util.Collection;
import java.util.List;
import java.util.UUID;

import javax.annotation.processing.Generated;

import org.dependencytrack.persistence.jooq.generated.DefaultSchema;
import org.dependencytrack.persistence.jooq.generated.Indexes;
import org.dependencytrack.persistence.jooq.generated.Keys;
import org.dependencytrack.persistence.jooq.generated.tables.AffectedVersionAttribution.AffectedVersionAttributionPath;
import org.dependencytrack.persistence.jooq.generated.tables.VulnerableSoftwareVulnerabilities.VulnerableSoftwareVulnerabilitiesPath;
import org.dependencytrack.persistence.jooq.generated.tables.records.VulnerableSoftwareRecord;
import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.20.4",
        "schema version:v5.6.0-28"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class VulnerableSoftware extends TableImpl<VulnerableSoftwareRecord> {

    private static final long serialVersionUID = 478732812;

    /**
     * The reference instance of <code>VULNERABLESOFTWARE</code>
     */
    public static final VulnerableSoftware VULNERABLESOFTWARE = new VulnerableSoftware();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<VulnerableSoftwareRecord> getRecordType() {
        return VulnerableSoftwareRecord.class;
    }

    /**
     * The column <code>VULNERABLESOFTWARE.ID</code>.
     */
    public final TableField<VulnerableSoftwareRecord, Long> id = createField(DSL.name("ID"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>VULNERABLESOFTWARE.CPE22</code>.
     */
    public final TableField<VulnerableSoftwareRecord, String> cpe22 = createField(DSL.name("CPE22"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>VULNERABLESOFTWARE.CPE23</code>.
     */
    public final TableField<VulnerableSoftwareRecord, String> cpe23 = createField(DSL.name("CPE23"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>VULNERABLESOFTWARE.EDITION</code>.
     */
    public final TableField<VulnerableSoftwareRecord, String> edition = createField(DSL.name("EDITION"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>VULNERABLESOFTWARE.LANGUAGE</code>.
     */
    public final TableField<VulnerableSoftwareRecord, String> language = createField(DSL.name("LANGUAGE"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>VULNERABLESOFTWARE.OTHER</code>.
     */
    public final TableField<VulnerableSoftwareRecord, String> other = createField(DSL.name("OTHER"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>VULNERABLESOFTWARE.PART</code>.
     */
    public final TableField<VulnerableSoftwareRecord, String> part = createField(DSL.name("PART"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>VULNERABLESOFTWARE.PRODUCT</code>.
     */
    public final TableField<VulnerableSoftwareRecord, String> product = createField(DSL.name("PRODUCT"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>VULNERABLESOFTWARE.PURL</code>.
     */
    public final TableField<VulnerableSoftwareRecord, String> purl = createField(DSL.name("PURL"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>VULNERABLESOFTWARE.PURL_NAME</code>.
     */
    public final TableField<VulnerableSoftwareRecord, String> purlName = createField(DSL.name("PURL_NAME"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>VULNERABLESOFTWARE.PURL_NAMESPACE</code>.
     */
    public final TableField<VulnerableSoftwareRecord, String> purlNamespace = createField(DSL.name("PURL_NAMESPACE"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>VULNERABLESOFTWARE.PURL_QUALIFIERS</code>.
     */
    public final TableField<VulnerableSoftwareRecord, String> purlQualifiers = createField(DSL.name("PURL_QUALIFIERS"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>VULNERABLESOFTWARE.PURL_SUBPATH</code>.
     */
    public final TableField<VulnerableSoftwareRecord, String> purlSubpath = createField(DSL.name("PURL_SUBPATH"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>VULNERABLESOFTWARE.PURL_TYPE</code>.
     */
    public final TableField<VulnerableSoftwareRecord, String> purlType = createField(DSL.name("PURL_TYPE"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>VULNERABLESOFTWARE.PURL_VERSION</code>.
     */
    public final TableField<VulnerableSoftwareRecord, String> purlVersion = createField(DSL.name("PURL_VERSION"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>VULNERABLESOFTWARE.SWEDITION</code>.
     */
    public final TableField<VulnerableSoftwareRecord, String> swEdition = createField(DSL.name("SWEDITION"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>VULNERABLESOFTWARE.TARGETHW</code>.
     */
    public final TableField<VulnerableSoftwareRecord, String> targetHw = createField(DSL.name("TARGETHW"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>VULNERABLESOFTWARE.TARGETSW</code>.
     */
    public final TableField<VulnerableSoftwareRecord, String> targetSw = createField(DSL.name("TARGETSW"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>VULNERABLESOFTWARE.UPDATE</code>.
     */
    public final TableField<VulnerableSoftwareRecord, String> update = createField(DSL.name("UPDATE"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>VULNERABLESOFTWARE.UUID</code>.
     */
    public final TableField<VulnerableSoftwareRecord, UUID> uuid = createField(DSL.name("UUID"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>VULNERABLESOFTWARE.VENDOR</code>.
     */
    public final TableField<VulnerableSoftwareRecord, String> vendor = createField(DSL.name("VENDOR"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>VULNERABLESOFTWARE.VERSION</code>.
     */
    public final TableField<VulnerableSoftwareRecord, String> version = createField(DSL.name("VERSION"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>VULNERABLESOFTWARE.VERSIONENDEXCLUDING</code>.
     */
    public final TableField<VulnerableSoftwareRecord, String> versionEndExcluding = createField(DSL.name("VERSIONENDEXCLUDING"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>VULNERABLESOFTWARE.VERSIONENDINCLUDING</code>.
     */
    public final TableField<VulnerableSoftwareRecord, String> versionEndIncluding = createField(DSL.name("VERSIONENDINCLUDING"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>VULNERABLESOFTWARE.VERSIONSTARTEXCLUDING</code>.
     */
    public final TableField<VulnerableSoftwareRecord, String> versionStartExcluding = createField(DSL.name("VERSIONSTARTEXCLUDING"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>VULNERABLESOFTWARE.VERSIONSTARTINCLUDING</code>.
     */
    public final TableField<VulnerableSoftwareRecord, String> versionStartIncluding = createField(DSL.name("VERSIONSTARTINCLUDING"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>VULNERABLESOFTWARE.VULNERABLE</code>.
     */
    public final TableField<VulnerableSoftwareRecord, Boolean> vulnerable = createField(DSL.name("VULNERABLE"), SQLDataType.BOOLEAN.nullable(false), this, "");

    private VulnerableSoftware(Name alias, Table<VulnerableSoftwareRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private VulnerableSoftware(Name alias, Table<VulnerableSoftwareRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>VULNERABLESOFTWARE</code> table reference
     */
    public VulnerableSoftware(String alias) {
        this(DSL.name(alias), VULNERABLESOFTWARE);
    }

    /**
     * Create an aliased <code>VULNERABLESOFTWARE</code> table reference
     */
    public VulnerableSoftware(Name alias) {
        this(alias, VULNERABLESOFTWARE);
    }

    /**
     * Create a <code>VULNERABLESOFTWARE</code> table reference
     */
    public VulnerableSoftware() {
        this(DSL.name("VULNERABLESOFTWARE"), null);
    }

    public <O extends Record> VulnerableSoftware(Table<O> path, ForeignKey<O, VulnerableSoftwareRecord> childPath, InverseForeignKey<O, VulnerableSoftwareRecord> parentPath) {
        super(path, childPath, parentPath, VULNERABLESOFTWARE);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    @Generated(
        value = {
            "https://www.jooq.org",
            "jOOQ version:3.20.4",
            "schema version:v5.6.0-28"
        },
        comments = "This class is generated by jOOQ"
    )
    public static class VulnerableSoftwarePath extends VulnerableSoftware implements Path<VulnerableSoftwareRecord> {

        private static final long serialVersionUID = 478732812;
        public <O extends Record> VulnerableSoftwarePath(Table<O> path, ForeignKey<O, VulnerableSoftwareRecord> childPath, InverseForeignKey<O, VulnerableSoftwareRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private VulnerableSoftwarePath(Name alias, Table<VulnerableSoftwareRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public VulnerableSoftwarePath as(String alias) {
            return new VulnerableSoftwarePath(DSL.name(alias), this);
        }

        @Override
        public VulnerableSoftwarePath as(Name alias) {
            return new VulnerableSoftwarePath(alias, this);
        }

        @Override
        public VulnerableSoftwarePath as(Table<?> alias) {
            return new VulnerableSoftwarePath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.VULNERABLESOFTWARE_CPE23_VERSION_RANGE_IDX, Indexes.VULNERABLESOFTWARE_CPE_PURL_PARTS_IDX, Indexes.VULNERABLESOFTWARE_PURL_TYPE_NS_NAME_IDX, Indexes.VULNERABLESOFTWARE_PURL_VERSION_RANGE_IDX);
    }

    @Override
    public Identity<VulnerableSoftwareRecord, Long> getIdentity() {
        return (Identity<VulnerableSoftwareRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<VulnerableSoftwareRecord> getPrimaryKey() {
        return Keys.VULNERABLESOFTWARE_PK;
    }

    @Override
    public List<UniqueKey<VulnerableSoftwareRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.VULNERABLESOFTWARE_UUID_IDX);
    }

    private transient AffectedVersionAttributionPath _affectedVersionAttribution;

    /**
     * Get the implicit to-many join path to the
     * <code>AFFECTEDVERSIONATTRIBUTION</code> table
     */
    public AffectedVersionAttributionPath affectedVersionAttribution() {
        if (_affectedVersionAttribution == null)
            _affectedVersionAttribution = new AffectedVersionAttributionPath(this, null, Keys.AFFECTEDVERSIONATTRIBUTION_VULNERABLESOFTWARE_FK.getInverseKey());

        return _affectedVersionAttribution;
    }

    private transient VulnerableSoftwareVulnerabilitiesPath _vulnerableSoftwareVulnerabilities;

    /**
     * Get the implicit to-many join path to the
     * <code>VULNERABLESOFTWARE_VULNERABILITIES</code> table
     */
    public VulnerableSoftwareVulnerabilitiesPath vulnerableSoftwareVulnerabilities() {
        if (_vulnerableSoftwareVulnerabilities == null)
            _vulnerableSoftwareVulnerabilities = new VulnerableSoftwareVulnerabilitiesPath(this, null, Keys.VULNERABLESOFTWARE_VULNERABILITIES_VULNERABLESOFTWARE_FK.getInverseKey());

        return _vulnerableSoftwareVulnerabilities;
    }

    @Override
    public VulnerableSoftware as(String alias) {
        return new VulnerableSoftware(DSL.name(alias), this);
    }

    @Override
    public VulnerableSoftware as(Name alias) {
        return new VulnerableSoftware(alias, this);
    }

    @Override
    public VulnerableSoftware as(Table<?> alias) {
        return new VulnerableSoftware(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public VulnerableSoftware rename(String name) {
        return new VulnerableSoftware(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public VulnerableSoftware rename(Name name) {
        return new VulnerableSoftware(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public VulnerableSoftware rename(Table<?> name) {
        return new VulnerableSoftware(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public VulnerableSoftware where(Condition condition) {
        return new VulnerableSoftware(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public VulnerableSoftware where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public VulnerableSoftware where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public VulnerableSoftware where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public VulnerableSoftware where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public VulnerableSoftware where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public VulnerableSoftware where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public VulnerableSoftware where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public VulnerableSoftware whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public VulnerableSoftware whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
