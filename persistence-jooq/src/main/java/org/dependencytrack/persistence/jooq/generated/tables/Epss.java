/*
 * This file is generated by jOOQ.
 */
package org.dependencytrack.persistence.jooq.generated.tables;


import java.math.BigDecimal;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import javax.annotation.processing.Generated;

import org.dependencytrack.persistence.jooq.generated.DefaultSchema;
import org.dependencytrack.persistence.jooq.generated.Indexes;
import org.dependencytrack.persistence.jooq.generated.Keys;
import org.dependencytrack.persistence.jooq.generated.tables.records.EpssRecord;
import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.20.4",
        "schema version:v5.6.0-28"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Epss extends TableImpl<EpssRecord> {

    private static final long serialVersionUID = -1112588946;

    /**
     * The reference instance of <code>EPSS</code>
     */
    public static final Epss EPSS = new Epss();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<EpssRecord> getRecordType() {
        return EpssRecord.class;
    }

    /**
     * The column <code>EPSS.ID</code>.
     */
    public final TableField<EpssRecord, Long> id = createField(DSL.name("ID"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>EPSS.CVE</code>.
     */
    public final TableField<EpssRecord, String> cve = createField(DSL.name("CVE"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>EPSS.PERCENTILE</code>.
     */
    public final TableField<EpssRecord, BigDecimal> percentile = createField(DSL.name("PERCENTILE"), SQLDataType.NUMERIC, this, "");

    /**
     * The column <code>EPSS.SCORE</code>.
     */
    public final TableField<EpssRecord, BigDecimal> score = createField(DSL.name("SCORE"), SQLDataType.NUMERIC, this, "");

    private Epss(Name alias, Table<EpssRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Epss(Name alias, Table<EpssRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>EPSS</code> table reference
     */
    public Epss(String alias) {
        this(DSL.name(alias), EPSS);
    }

    /**
     * Create an aliased <code>EPSS</code> table reference
     */
    public Epss(Name alias) {
        this(alias, EPSS);
    }

    /**
     * Create a <code>EPSS</code> table reference
     */
    public Epss() {
        this(DSL.name("EPSS"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.EPSS_CVE_IDX);
    }

    @Override
    public Identity<EpssRecord, Long> getIdentity() {
        return (Identity<EpssRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<EpssRecord> getPrimaryKey() {
        return Keys.EPSS_CVE_PK;
    }

    @Override
    public List<UniqueKey<EpssRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.EPSS_CVE_KEY);
    }

    @Override
    public Epss as(String alias) {
        return new Epss(DSL.name(alias), this);
    }

    @Override
    public Epss as(Name alias) {
        return new Epss(alias, this);
    }

    @Override
    public Epss as(Table<?> alias) {
        return new Epss(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Epss rename(String name) {
        return new Epss(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Epss rename(Name name) {
        return new Epss(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Epss rename(Table<?> name) {
        return new Epss(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Epss where(Condition condition) {
        return new Epss(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Epss where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Epss where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Epss where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Epss where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Epss where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Epss where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Epss where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Epss whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Epss whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
