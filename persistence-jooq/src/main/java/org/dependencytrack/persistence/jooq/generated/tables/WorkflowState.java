/*
 * This file is generated by jOOQ.
 */
package org.dependencytrack.persistence.jooq.generated.tables;


import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;
import java.util.UUID;

import javax.annotation.processing.Generated;

import org.dependencytrack.persistence.jooq.generated.DefaultSchema;
import org.dependencytrack.persistence.jooq.generated.Indexes;
import org.dependencytrack.persistence.jooq.generated.Keys;
import org.dependencytrack.persistence.jooq.generated.tables.WorkflowState.WorkflowStatePath;
import org.dependencytrack.persistence.jooq.generated.tables.records.WorkflowStateRecord;
import org.jooq.Check;
import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.20.4",
        "schema version:v5.6.0-28"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class WorkflowState extends TableImpl<WorkflowStateRecord> {

    private static final long serialVersionUID = 363010637;

    /**
     * The reference instance of <code>WORKFLOW_STATE</code>
     */
    public static final WorkflowState WORKFLOW_STATE = new WorkflowState();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<WorkflowStateRecord> getRecordType() {
        return WorkflowStateRecord.class;
    }

    /**
     * The column <code>WORKFLOW_STATE.ID</code>.
     */
    public final TableField<WorkflowStateRecord, Long> id = createField(DSL.name("ID"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>WORKFLOW_STATE.FAILURE_REASON</code>.
     */
    public final TableField<WorkflowStateRecord, String> failureReason = createField(DSL.name("FAILURE_REASON"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>WORKFLOW_STATE.PARENT_STEP_ID</code>.
     */
    public final TableField<WorkflowStateRecord, Long> parentStepId = createField(DSL.name("PARENT_STEP_ID"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>WORKFLOW_STATE.STARTED_AT</code>.
     */
    public final TableField<WorkflowStateRecord, OffsetDateTime> startedAt = createField(DSL.name("STARTED_AT"), SQLDataType.TIMESTAMPWITHTIMEZONE(6), this, "");

    /**
     * The column <code>WORKFLOW_STATE.STATUS</code>.
     */
    public final TableField<WorkflowStateRecord, String> status = createField(DSL.name("STATUS"), SQLDataType.VARCHAR(64).nullable(false), this, "");

    /**
     * The column <code>WORKFLOW_STATE.STEP</code>.
     */
    public final TableField<WorkflowStateRecord, String> step = createField(DSL.name("STEP"), SQLDataType.VARCHAR(64).nullable(false), this, "");

    /**
     * The column <code>WORKFLOW_STATE.TOKEN</code>.
     */
    public final TableField<WorkflowStateRecord, UUID> token = createField(DSL.name("TOKEN"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>WORKFLOW_STATE.UPDATED_AT</code>.
     */
    public final TableField<WorkflowStateRecord, OffsetDateTime> updatedAt = createField(DSL.name("UPDATED_AT"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).nullable(false), this, "");

    private WorkflowState(Name alias, Table<WorkflowStateRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private WorkflowState(Name alias, Table<WorkflowStateRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>WORKFLOW_STATE</code> table reference
     */
    public WorkflowState(String alias) {
        this(DSL.name(alias), WORKFLOW_STATE);
    }

    /**
     * Create an aliased <code>WORKFLOW_STATE</code> table reference
     */
    public WorkflowState(Name alias) {
        this(alias, WORKFLOW_STATE);
    }

    /**
     * Create a <code>WORKFLOW_STATE</code> table reference
     */
    public WorkflowState() {
        this(DSL.name("WORKFLOW_STATE"), null);
    }

    public <O extends Record> WorkflowState(Table<O> path, ForeignKey<O, WorkflowStateRecord> childPath, InverseForeignKey<O, WorkflowStateRecord> parentPath) {
        super(path, childPath, parentPath, WORKFLOW_STATE);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    @Generated(
        value = {
            "https://www.jooq.org",
            "jOOQ version:3.20.4",
            "schema version:v5.6.0-28"
        },
        comments = "This class is generated by jOOQ"
    )
    public static class WorkflowStatePath extends WorkflowState implements Path<WorkflowStateRecord> {

        private static final long serialVersionUID = 363010637;
        public <O extends Record> WorkflowStatePath(Table<O> path, ForeignKey<O, WorkflowStateRecord> childPath, InverseForeignKey<O, WorkflowStateRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private WorkflowStatePath(Name alias, Table<WorkflowStateRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public WorkflowStatePath as(String alias) {
            return new WorkflowStatePath(DSL.name(alias), this);
        }

        @Override
        public WorkflowStatePath as(Name alias) {
            return new WorkflowStatePath(alias, this);
        }

        @Override
        public WorkflowStatePath as(Table<?> alias) {
            return new WorkflowStatePath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.WORKFLOW_STATE_PARENT_STEP_ID_IDX);
    }

    @Override
    public Identity<WorkflowStateRecord, Long> getIdentity() {
        return (Identity<WorkflowStateRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<WorkflowStateRecord> getPrimaryKey() {
        return Keys.WORKFLOW_STATE_PK;
    }

    @Override
    public List<UniqueKey<WorkflowStateRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.WORKFLOW_STATE_COMPOSITE_IDX);
    }

    @Override
    public List<ForeignKey<WorkflowStateRecord, ?>> getReferences() {
        return Arrays.asList(Keys.WORKFLOW_STATE_WORKFLOW_STATE_FK);
    }

    private transient WorkflowStatePath _workflowState;

    /**
     * Get the implicit join path to the <code>WORKFLOW_STATE</code> table.
     */
    public WorkflowStatePath workflowState() {
        if (_workflowState == null)
            _workflowState = new WorkflowStatePath(this, Keys.WORKFLOW_STATE_WORKFLOW_STATE_FK, null);

        return _workflowState;
    }

    @Override
    public List<Check<WorkflowStateRecord>> getChecks() {
        return Arrays.asList(
            Internal.createCheck(this, DSL.name("WORKFLOW_STATE_STATUS_check"), "(((\"STATUS\")::text = ANY (ARRAY['CANCELLED'::text, 'COMPLETED'::text, 'FAILED'::text, 'NOT_APPLICABLE'::text, 'PENDING'::text, 'TIMED_OUT'::text])))", true),
            Internal.createCheck(this, DSL.name("WORKFLOW_STATE_STEP_check"), "(((\"STEP\")::text = ANY (ARRAY['BOM_CONSUMPTION'::text, 'BOM_PROCESSING'::text, 'METRICS_UPDATE'::text, 'POLICY_BUNDLE_SYNC'::text, 'POLICY_EVALUATION'::text, 'REPO_META_ANALYSIS'::text, 'VULN_ANALYSIS'::text, 'PROJECT_CLONE'::text])))", true)
        );
    }

    @Override
    public WorkflowState as(String alias) {
        return new WorkflowState(DSL.name(alias), this);
    }

    @Override
    public WorkflowState as(Name alias) {
        return new WorkflowState(alias, this);
    }

    @Override
    public WorkflowState as(Table<?> alias) {
        return new WorkflowState(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public WorkflowState rename(String name) {
        return new WorkflowState(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public WorkflowState rename(Name name) {
        return new WorkflowState(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public WorkflowState rename(Table<?> name) {
        return new WorkflowState(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public WorkflowState where(Condition condition) {
        return new WorkflowState(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public WorkflowState where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public WorkflowState where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public WorkflowState where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public WorkflowState where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public WorkflowState where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public WorkflowState where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public WorkflowState where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public WorkflowState whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public WorkflowState whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
