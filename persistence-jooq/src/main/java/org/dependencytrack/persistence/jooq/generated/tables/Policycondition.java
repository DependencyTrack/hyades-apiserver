/*
 * This file is generated by jOOQ.
 */
package org.dependencytrack.persistence.jooq.generated.tables;


import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.dependencytrack.persistence.jooq.generated.Indexes;
import org.dependencytrack.persistence.jooq.generated.Keys;
import org.dependencytrack.persistence.jooq.generated.Public;
import org.dependencytrack.persistence.jooq.generated.tables.Policy.PolicyPath;
import org.dependencytrack.persistence.jooq.generated.tables.Policyviolation.PolicyviolationPath;
import org.dependencytrack.persistence.jooq.generated.tables.records.PolicyconditionRecord;
import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Policycondition extends TableImpl<PolicyconditionRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.POLICYCONDITION</code>
     */
    public static final Policycondition POLICYCONDITION = new Policycondition();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PolicyconditionRecord> getRecordType() {
        return PolicyconditionRecord.class;
    }

    /**
     * The column <code>public.POLICYCONDITION.ID</code>.
     */
    public final TableField<PolicyconditionRecord, Long> ID = createField(DSL.name("ID"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.POLICYCONDITION.OPERATOR</code>.
     */
    public final TableField<PolicyconditionRecord, String> OPERATOR = createField(DSL.name("OPERATOR"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>public.POLICYCONDITION.POLICY_ID</code>.
     */
    public final TableField<PolicyconditionRecord, Long> POLICY_ID = createField(DSL.name("POLICY_ID"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.POLICYCONDITION.SUBJECT</code>.
     */
    public final TableField<PolicyconditionRecord, String> SUBJECT = createField(DSL.name("SUBJECT"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>public.POLICYCONDITION.UUID</code>.
     */
    public final TableField<PolicyconditionRecord, java.util.UUID> UUID = createField(DSL.name("UUID"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.POLICYCONDITION.VALUE</code>.
     */
    public final TableField<PolicyconditionRecord, String> VALUE = createField(DSL.name("VALUE"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.POLICYCONDITION.VIOLATIONTYPE</code>.
     */
    public final TableField<PolicyconditionRecord, String> VIOLATIONTYPE = createField(DSL.name("VIOLATIONTYPE"), SQLDataType.VARCHAR(255), this, "");

    private Policycondition(Name alias, Table<PolicyconditionRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Policycondition(Name alias, Table<PolicyconditionRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.POLICYCONDITION</code> table reference
     */
    public Policycondition(String alias) {
        this(DSL.name(alias), POLICYCONDITION);
    }

    /**
     * Create an aliased <code>public.POLICYCONDITION</code> table reference
     */
    public Policycondition(Name alias) {
        this(alias, POLICYCONDITION);
    }

    /**
     * Create a <code>public.POLICYCONDITION</code> table reference
     */
    public Policycondition() {
        this(DSL.name("POLICYCONDITION"), null);
    }

    public <O extends Record> Policycondition(Table<O> path, ForeignKey<O, PolicyconditionRecord> childPath, InverseForeignKey<O, PolicyconditionRecord> parentPath) {
        super(path, childPath, parentPath, POLICYCONDITION);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class PolicyconditionPath extends Policycondition implements Path<PolicyconditionRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> PolicyconditionPath(Table<O> path, ForeignKey<O, PolicyconditionRecord> childPath, InverseForeignKey<O, PolicyconditionRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private PolicyconditionPath(Name alias, Table<PolicyconditionRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public PolicyconditionPath as(String alias) {
            return new PolicyconditionPath(DSL.name(alias), this);
        }

        @Override
        public PolicyconditionPath as(Name alias) {
            return new PolicyconditionPath(alias, this);
        }

        @Override
        public PolicyconditionPath as(Table<?> alias) {
            return new PolicyconditionPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.POLICYCONDITION_POLICY_ID_IDX);
    }

    @Override
    public Identity<PolicyconditionRecord, Long> getIdentity() {
        return (Identity<PolicyconditionRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<PolicyconditionRecord> getPrimaryKey() {
        return Keys.POLICYCONDITION_PK;
    }

    @Override
    public List<UniqueKey<PolicyconditionRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.POLICYCONDITION_UUID_IDX);
    }

    @Override
    public List<ForeignKey<PolicyconditionRecord, ?>> getReferences() {
        return Arrays.asList(Keys.POLICYCONDITION__POLICYCONDITION_POLICY_FK);
    }

    private transient PolicyPath _policy;

    /**
     * Get the implicit join path to the <code>public.POLICY</code> table.
     */
    public PolicyPath policy() {
        if (_policy == null)
            _policy = new PolicyPath(this, Keys.POLICYCONDITION__POLICYCONDITION_POLICY_FK, null);

        return _policy;
    }

    private transient PolicyviolationPath _policyviolation;

    /**
     * Get the implicit to-many join path to the
     * <code>public.POLICYVIOLATION</code> table
     */
    public PolicyviolationPath policyviolation() {
        if (_policyviolation == null)
            _policyviolation = new PolicyviolationPath(this, null, Keys.POLICYVIOLATION__POLICYVIOLATION_POLICYCONDITION_FK.getInverseKey());

        return _policyviolation;
    }

    @Override
    public Policycondition as(String alias) {
        return new Policycondition(DSL.name(alias), this);
    }

    @Override
    public Policycondition as(Name alias) {
        return new Policycondition(alias, this);
    }

    @Override
    public Policycondition as(Table<?> alias) {
        return new Policycondition(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Policycondition rename(String name) {
        return new Policycondition(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Policycondition rename(Name name) {
        return new Policycondition(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Policycondition rename(Table<?> name) {
        return new Policycondition(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Policycondition where(Condition condition) {
        return new Policycondition(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Policycondition where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Policycondition where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Policycondition where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Policycondition where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Policycondition where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Policycondition where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Policycondition where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Policycondition whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Policycondition whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
