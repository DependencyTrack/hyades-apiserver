/*
 * This file is generated by jOOQ.
 */
package org.dependencytrack.persistence.jooq.generated.tables;


import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.dependencytrack.persistence.jooq.generated.Indexes;
import org.dependencytrack.persistence.jooq.generated.Keys;
import org.dependencytrack.persistence.jooq.generated.Public;
import org.dependencytrack.persistence.jooq.generated.tables.Violationanalysis.ViolationanalysisPath;
import org.dependencytrack.persistence.jooq.generated.tables.records.ViolationanalysiscommentRecord;
import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Violationanalysiscomment extends TableImpl<ViolationanalysiscommentRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.VIOLATIONANALYSISCOMMENT</code>
     */
    public static final Violationanalysiscomment VIOLATIONANALYSISCOMMENT = new Violationanalysiscomment();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ViolationanalysiscommentRecord> getRecordType() {
        return ViolationanalysiscommentRecord.class;
    }

    /**
     * The column <code>public.VIOLATIONANALYSISCOMMENT.ID</code>.
     */
    public final TableField<ViolationanalysiscommentRecord, Long> ID = createField(DSL.name("ID"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.VIOLATIONANALYSISCOMMENT.COMMENT</code>.
     */
    public final TableField<ViolationanalysiscommentRecord, String> COMMENT = createField(DSL.name("COMMENT"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.VIOLATIONANALYSISCOMMENT.COMMENTER</code>.
     */
    public final TableField<ViolationanalysiscommentRecord, String> COMMENTER = createField(DSL.name("COMMENTER"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.VIOLATIONANALYSISCOMMENT.TIMESTAMP</code>.
     */
    public final TableField<ViolationanalysiscommentRecord, OffsetDateTime> TIMESTAMP = createField(DSL.name("TIMESTAMP"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).nullable(false), this, "");

    /**
     * The column
     * <code>public.VIOLATIONANALYSISCOMMENT.VIOLATIONANALYSIS_ID</code>.
     */
    public final TableField<ViolationanalysiscommentRecord, Long> VIOLATIONANALYSIS_ID = createField(DSL.name("VIOLATIONANALYSIS_ID"), SQLDataType.BIGINT.nullable(false), this, "");

    private Violationanalysiscomment(Name alias, Table<ViolationanalysiscommentRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Violationanalysiscomment(Name alias, Table<ViolationanalysiscommentRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.VIOLATIONANALYSISCOMMENT</code> table
     * reference
     */
    public Violationanalysiscomment(String alias) {
        this(DSL.name(alias), VIOLATIONANALYSISCOMMENT);
    }

    /**
     * Create an aliased <code>public.VIOLATIONANALYSISCOMMENT</code> table
     * reference
     */
    public Violationanalysiscomment(Name alias) {
        this(alias, VIOLATIONANALYSISCOMMENT);
    }

    /**
     * Create a <code>public.VIOLATIONANALYSISCOMMENT</code> table reference
     */
    public Violationanalysiscomment() {
        this(DSL.name("VIOLATIONANALYSISCOMMENT"), null);
    }

    public <O extends Record> Violationanalysiscomment(Table<O> path, ForeignKey<O, ViolationanalysiscommentRecord> childPath, InverseForeignKey<O, ViolationanalysiscommentRecord> parentPath) {
        super(path, childPath, parentPath, VIOLATIONANALYSISCOMMENT);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class ViolationanalysiscommentPath extends Violationanalysiscomment implements Path<ViolationanalysiscommentRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> ViolationanalysiscommentPath(Table<O> path, ForeignKey<O, ViolationanalysiscommentRecord> childPath, InverseForeignKey<O, ViolationanalysiscommentRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private ViolationanalysiscommentPath(Name alias, Table<ViolationanalysiscommentRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public ViolationanalysiscommentPath as(String alias) {
            return new ViolationanalysiscommentPath(DSL.name(alias), this);
        }

        @Override
        public ViolationanalysiscommentPath as(Name alias) {
            return new ViolationanalysiscommentPath(alias, this);
        }

        @Override
        public ViolationanalysiscommentPath as(Table<?> alias) {
            return new ViolationanalysiscommentPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.VIOLATIONANALYSISCOMMENT_VIOLATIONANALYSIS_ID_IDX);
    }

    @Override
    public Identity<ViolationanalysiscommentRecord, Long> getIdentity() {
        return (Identity<ViolationanalysiscommentRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<ViolationanalysiscommentRecord> getPrimaryKey() {
        return Keys.VIOLATIONANALYSISCOMMENT_PK;
    }

    @Override
    public List<ForeignKey<ViolationanalysiscommentRecord, ?>> getReferences() {
        return Arrays.asList(Keys.VIOLATIONANALYSISCOMMENT__VIOLATIONANALYSISCOMMENT_VIOLATIONANALYSIS_FK);
    }

    private transient ViolationanalysisPath _violationanalysis;

    /**
     * Get the implicit join path to the <code>public.VIOLATIONANALYSIS</code>
     * table.
     */
    public ViolationanalysisPath violationanalysis() {
        if (_violationanalysis == null)
            _violationanalysis = new ViolationanalysisPath(this, Keys.VIOLATIONANALYSISCOMMENT__VIOLATIONANALYSISCOMMENT_VIOLATIONANALYSIS_FK, null);

        return _violationanalysis;
    }

    @Override
    public Violationanalysiscomment as(String alias) {
        return new Violationanalysiscomment(DSL.name(alias), this);
    }

    @Override
    public Violationanalysiscomment as(Name alias) {
        return new Violationanalysiscomment(alias, this);
    }

    @Override
    public Violationanalysiscomment as(Table<?> alias) {
        return new Violationanalysiscomment(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Violationanalysiscomment rename(String name) {
        return new Violationanalysiscomment(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Violationanalysiscomment rename(Name name) {
        return new Violationanalysiscomment(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Violationanalysiscomment rename(Table<?> name) {
        return new Violationanalysiscomment(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Violationanalysiscomment where(Condition condition) {
        return new Violationanalysiscomment(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Violationanalysiscomment where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Violationanalysiscomment where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Violationanalysiscomment where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Violationanalysiscomment where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Violationanalysiscomment where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Violationanalysiscomment where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Violationanalysiscomment where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Violationanalysiscomment whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Violationanalysiscomment whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
