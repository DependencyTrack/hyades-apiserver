/*
 * This file is generated by jOOQ.
 */
package org.dependencytrack.persistence.jooq.generated.tables;


import java.util.Arrays;
import java.util.Collection;
import java.util.List;
import java.util.UUID;

import javax.annotation.processing.Generated;

import org.dependencytrack.persistence.jooq.generated.DefaultSchema;
import org.dependencytrack.persistence.jooq.generated.Indexes;
import org.dependencytrack.persistence.jooq.generated.Keys;
import org.dependencytrack.persistence.jooq.generated.tables.records.RepositoryRecord;
import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.20.4",
        "schema version:v5.6.0-28"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Repository extends TableImpl<RepositoryRecord> {

    private static final long serialVersionUID = -1708907256;

    /**
     * The reference instance of <code>REPOSITORY</code>
     */
    public static final Repository REPOSITORY = new Repository();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<RepositoryRecord> getRecordType() {
        return RepositoryRecord.class;
    }

    /**
     * The column <code>REPOSITORY.ID</code>.
     */
    public final TableField<RepositoryRecord, Long> id = createField(DSL.name("ID"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>REPOSITORY.AUTHENTICATIONREQUIRED</code>.
     */
    public final TableField<RepositoryRecord, Boolean> authenticationRequired = createField(DSL.name("AUTHENTICATIONREQUIRED"), SQLDataType.BOOLEAN, this, "");

    /**
     * The column <code>REPOSITORY.ENABLED</code>.
     */
    public final TableField<RepositoryRecord, Boolean> enabled = createField(DSL.name("ENABLED"), SQLDataType.BOOLEAN.nullable(false), this, "");

    /**
     * The column <code>REPOSITORY.IDENTIFIER</code>.
     */
    public final TableField<RepositoryRecord, String> identifier = createField(DSL.name("IDENTIFIER"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>REPOSITORY.INTERNAL</code>.
     */
    public final TableField<RepositoryRecord, Boolean> internal = createField(DSL.name("INTERNAL"), SQLDataType.BOOLEAN, this, "");

    /**
     * The column <code>REPOSITORY.PASSWORD</code>.
     */
    public final TableField<RepositoryRecord, String> password = createField(DSL.name("PASSWORD"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>REPOSITORY.RESOLUTION_ORDER</code>.
     */
    public final TableField<RepositoryRecord, Integer> resolutionOrder = createField(DSL.name("RESOLUTION_ORDER"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>REPOSITORY.TYPE</code>.
     */
    public final TableField<RepositoryRecord, String> type = createField(DSL.name("TYPE"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>REPOSITORY.URL</code>.
     */
    public final TableField<RepositoryRecord, String> url = createField(DSL.name("URL"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>REPOSITORY.USERNAME</code>.
     */
    public final TableField<RepositoryRecord, String> username = createField(DSL.name("USERNAME"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>REPOSITORY.UUID</code>.
     */
    public final TableField<RepositoryRecord, UUID> uuid = createField(DSL.name("UUID"), SQLDataType.UUID, this, "");

    private Repository(Name alias, Table<RepositoryRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Repository(Name alias, Table<RepositoryRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>REPOSITORY</code> table reference
     */
    public Repository(String alias) {
        this(DSL.name(alias), REPOSITORY);
    }

    /**
     * Create an aliased <code>REPOSITORY</code> table reference
     */
    public Repository(Name alias) {
        this(alias, REPOSITORY);
    }

    /**
     * Create a <code>REPOSITORY</code> table reference
     */
    public Repository() {
        this(DSL.name("REPOSITORY"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.REPOSITORY_UUID_IDX);
    }

    @Override
    public Identity<RepositoryRecord, Long> getIdentity() {
        return (Identity<RepositoryRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<RepositoryRecord> getPrimaryKey() {
        return Keys.REPOSITORY_PK;
    }

    @Override
    public List<UniqueKey<RepositoryRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.REPOSITORY_COMPOUND_IDX);
    }

    @Override
    public Repository as(String alias) {
        return new Repository(DSL.name(alias), this);
    }

    @Override
    public Repository as(Name alias) {
        return new Repository(alias, this);
    }

    @Override
    public Repository as(Table<?> alias) {
        return new Repository(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Repository rename(String name) {
        return new Repository(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Repository rename(Name name) {
        return new Repository(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Repository rename(Table<?> name) {
        return new Repository(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Repository where(Condition condition) {
        return new Repository(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Repository where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Repository where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Repository where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Repository where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Repository where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Repository where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Repository where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Repository whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Repository whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
