/*
 * This file is generated by jOOQ.
 */
package org.dependencytrack.persistence.jooq.generated.tables;


import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.dependencytrack.persistence.jooq.generated.Keys;
import org.dependencytrack.persistence.jooq.generated.Public;
import org.dependencytrack.persistence.jooq.generated.tables.Apikey.ApikeyPath;
import org.dependencytrack.persistence.jooq.generated.tables.Team.TeamPath;
import org.dependencytrack.persistence.jooq.generated.tables.records.ApikeysTeamsRecord;
import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class ApikeysTeams extends TableImpl<ApikeysTeamsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.APIKEYS_TEAMS</code>
     */
    public static final ApikeysTeams APIKEYS_TEAMS = new ApikeysTeams();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ApikeysTeamsRecord> getRecordType() {
        return ApikeysTeamsRecord.class;
    }

    /**
     * The column <code>public.APIKEYS_TEAMS.TEAM_ID</code>.
     */
    public final TableField<ApikeysTeamsRecord, Long> TEAM_ID = createField(DSL.name("TEAM_ID"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.APIKEYS_TEAMS.APIKEY_ID</code>.
     */
    public final TableField<ApikeysTeamsRecord, Long> APIKEY_ID = createField(DSL.name("APIKEY_ID"), SQLDataType.BIGINT.nullable(false), this, "");

    private ApikeysTeams(Name alias, Table<ApikeysTeamsRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private ApikeysTeams(Name alias, Table<ApikeysTeamsRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.APIKEYS_TEAMS</code> table reference
     */
    public ApikeysTeams(String alias) {
        this(DSL.name(alias), APIKEYS_TEAMS);
    }

    /**
     * Create an aliased <code>public.APIKEYS_TEAMS</code> table reference
     */
    public ApikeysTeams(Name alias) {
        this(alias, APIKEYS_TEAMS);
    }

    /**
     * Create a <code>public.APIKEYS_TEAMS</code> table reference
     */
    public ApikeysTeams() {
        this(DSL.name("APIKEYS_TEAMS"), null);
    }

    public <O extends Record> ApikeysTeams(Table<O> path, ForeignKey<O, ApikeysTeamsRecord> childPath, InverseForeignKey<O, ApikeysTeamsRecord> parentPath) {
        super(path, childPath, parentPath, APIKEYS_TEAMS);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class ApikeysTeamsPath extends ApikeysTeams implements Path<ApikeysTeamsRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> ApikeysTeamsPath(Table<O> path, ForeignKey<O, ApikeysTeamsRecord> childPath, InverseForeignKey<O, ApikeysTeamsRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private ApikeysTeamsPath(Name alias, Table<ApikeysTeamsRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public ApikeysTeamsPath as(String alias) {
            return new ApikeysTeamsPath(DSL.name(alias), this);
        }

        @Override
        public ApikeysTeamsPath as(Name alias) {
            return new ApikeysTeamsPath(alias, this);
        }

        @Override
        public ApikeysTeamsPath as(Table<?> alias) {
            return new ApikeysTeamsPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public UniqueKey<ApikeysTeamsRecord> getPrimaryKey() {
        return Keys.APIKEYS_TEAMS_PK;
    }

    @Override
    public List<ForeignKey<ApikeysTeamsRecord, ?>> getReferences() {
        return Arrays.asList(Keys.APIKEYS_TEAMS__APIKEYS_TEAMS_APIKEY_FK, Keys.APIKEYS_TEAMS__APIKEYS_TEAMS_TEAM_FK);
    }

    private transient ApikeyPath _apikey;

    /**
     * Get the implicit join path to the <code>public.APIKEY</code> table.
     */
    public ApikeyPath apikey() {
        if (_apikey == null)
            _apikey = new ApikeyPath(this, Keys.APIKEYS_TEAMS__APIKEYS_TEAMS_APIKEY_FK, null);

        return _apikey;
    }

    private transient TeamPath _team;

    /**
     * Get the implicit join path to the <code>public.TEAM</code> table.
     */
    public TeamPath team() {
        if (_team == null)
            _team = new TeamPath(this, Keys.APIKEYS_TEAMS__APIKEYS_TEAMS_TEAM_FK, null);

        return _team;
    }

    @Override
    public ApikeysTeams as(String alias) {
        return new ApikeysTeams(DSL.name(alias), this);
    }

    @Override
    public ApikeysTeams as(Name alias) {
        return new ApikeysTeams(alias, this);
    }

    @Override
    public ApikeysTeams as(Table<?> alias) {
        return new ApikeysTeams(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public ApikeysTeams rename(String name) {
        return new ApikeysTeams(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ApikeysTeams rename(Name name) {
        return new ApikeysTeams(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public ApikeysTeams rename(Table<?> name) {
        return new ApikeysTeams(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ApikeysTeams where(Condition condition) {
        return new ApikeysTeams(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ApikeysTeams where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ApikeysTeams where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ApikeysTeams where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public ApikeysTeams where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public ApikeysTeams where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public ApikeysTeams where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public ApikeysTeams where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ApikeysTeams whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ApikeysTeams whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
