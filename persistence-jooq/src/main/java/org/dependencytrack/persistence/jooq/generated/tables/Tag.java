/*
 * This file is generated by jOOQ.
 */
package org.dependencytrack.persistence.jooq.generated.tables;


import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import javax.annotation.processing.Generated;

import org.dependencytrack.persistence.jooq.generated.DefaultSchema;
import org.dependencytrack.persistence.jooq.generated.Indexes;
import org.dependencytrack.persistence.jooq.generated.Keys;
import org.dependencytrack.persistence.jooq.generated.tables.NotificationRuleTags.NotificationRuleTagsPath;
import org.dependencytrack.persistence.jooq.generated.tables.Policy.PolicyPath;
import org.dependencytrack.persistence.jooq.generated.tables.PolicyTags.PolicyTagsPath;
import org.dependencytrack.persistence.jooq.generated.tables.Project.ProjectPath;
import org.dependencytrack.persistence.jooq.generated.tables.ProjectsTags.ProjectsTagsPath;
import org.dependencytrack.persistence.jooq.generated.tables.VulnerabilitiesTags.VulnerabilitiesTagsPath;
import org.dependencytrack.persistence.jooq.generated.tables.Vulnerability.VulnerabilityPath;
import org.dependencytrack.persistence.jooq.generated.tables.records.TagRecord;
import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.20.4",
        "schema version:v5.6.0-28"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Tag extends TableImpl<TagRecord> {

    private static final long serialVersionUID = 368852536;

    /**
     * The reference instance of <code>TAG</code>
     */
    public static final Tag TAG = new Tag();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TagRecord> getRecordType() {
        return TagRecord.class;
    }

    /**
     * The column <code>TAG.ID</code>.
     */
    public final TableField<TagRecord, Long> id = createField(DSL.name("ID"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>TAG.NAME</code>.
     */
    public final TableField<TagRecord, String> name = createField(DSL.name("NAME"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    private Tag(Name alias, Table<TagRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Tag(Name alias, Table<TagRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>TAG</code> table reference
     */
    public Tag(String alias) {
        this(DSL.name(alias), TAG);
    }

    /**
     * Create an aliased <code>TAG</code> table reference
     */
    public Tag(Name alias) {
        this(alias, TAG);
    }

    /**
     * Create a <code>TAG</code> table reference
     */
    public Tag() {
        this(DSL.name("TAG"), null);
    }

    public <O extends Record> Tag(Table<O> path, ForeignKey<O, TagRecord> childPath, InverseForeignKey<O, TagRecord> parentPath) {
        super(path, childPath, parentPath, TAG);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    @Generated(
        value = {
            "https://www.jooq.org",
            "jOOQ version:3.20.4",
            "schema version:v5.6.0-28"
        },
        comments = "This class is generated by jOOQ"
    )
    public static class TagPath extends Tag implements Path<TagRecord> {

        private static final long serialVersionUID = 368852536;
        public <O extends Record> TagPath(Table<O> path, ForeignKey<O, TagRecord> childPath, InverseForeignKey<O, TagRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private TagPath(Name alias, Table<TagRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public TagPath as(String alias) {
            return new TagPath(DSL.name(alias), this);
        }

        @Override
        public TagPath as(Name alias) {
            return new TagPath(alias, this);
        }

        @Override
        public TagPath as(Table<?> alias) {
            return new TagPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.TAG_NAME_IDX);
    }

    @Override
    public Identity<TagRecord, Long> getIdentity() {
        return (Identity<TagRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<TagRecord> getPrimaryKey() {
        return Keys.TAG_PK;
    }

    private transient NotificationRuleTagsPath _notificationRuleTags;

    /**
     * Get the implicit to-many join path to the
     * <code>NOTIFICATIONRULE_TAGS</code> table
     */
    public NotificationRuleTagsPath notificationRuleTags() {
        if (_notificationRuleTags == null)
            _notificationRuleTags = new NotificationRuleTagsPath(this, null, Keys.NOTIFICATIONRULE_TAGS_TAG_FK.getInverseKey());

        return _notificationRuleTags;
    }

    private transient PolicyTagsPath _policyTags;

    /**
     * Get the implicit to-many join path to the <code>POLICY_TAGS</code> table
     */
    public PolicyTagsPath policyTags() {
        if (_policyTags == null)
            _policyTags = new PolicyTagsPath(this, null, Keys.POLICY_TAGS_TAG_FK.getInverseKey());

        return _policyTags;
    }

    private transient ProjectsTagsPath _projectsTags;

    /**
     * Get the implicit to-many join path to the <code>PROJECTS_TAGS</code>
     * table
     */
    public ProjectsTagsPath projectsTags() {
        if (_projectsTags == null)
            _projectsTags = new ProjectsTagsPath(this, null, Keys.PROJECTS_TAGS_TAG_FK.getInverseKey());

        return _projectsTags;
    }

    private transient VulnerabilitiesTagsPath _vulnerabilitiesTags;

    /**
     * Get the implicit to-many join path to the
     * <code>VULNERABILITIES_TAGS</code> table
     */
    public VulnerabilitiesTagsPath vulnerabilitiesTags() {
        if (_vulnerabilitiesTags == null)
            _vulnerabilitiesTags = new VulnerabilitiesTagsPath(this, null, Keys.VULNERABILITIES_TAGS_TAG_FK.getInverseKey());

        return _vulnerabilitiesTags;
    }

    /**
     * Get the implicit many-to-many join path to the <code>POLICY</code> table
     */
    public PolicyPath policy() {
        return policyTags().policy();
    }

    /**
     * Get the implicit many-to-many join path to the <code>PROJECT</code> table
     */
    public ProjectPath project() {
        return projectsTags().project();
    }

    /**
     * Get the implicit many-to-many join path to the <code>VULNERABILITY</code>
     * table
     */
    public VulnerabilityPath vulnerability() {
        return vulnerabilitiesTags().vulnerability();
    }

    @Override
    public Tag as(String alias) {
        return new Tag(DSL.name(alias), this);
    }

    @Override
    public Tag as(Name alias) {
        return new Tag(alias, this);
    }

    @Override
    public Tag as(Table<?> alias) {
        return new Tag(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Tag rename(String name) {
        return new Tag(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Tag rename(Name name) {
        return new Tag(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Tag rename(Table<?> name) {
        return new Tag(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Tag where(Condition condition) {
        return new Tag(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Tag where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Tag where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Tag where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Tag where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Tag where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Tag where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Tag where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Tag whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Tag whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
