/*
 * This file is generated by jOOQ.
 */
package org.dependencytrack.persistence.jooq.generated.tables;


import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.dependencytrack.persistence.jooq.generated.Keys;
import org.dependencytrack.persistence.jooq.generated.Public;
import org.dependencytrack.persistence.jooq.generated.tables.ManagedusersPermissions.ManagedusersPermissionsPath;
import org.dependencytrack.persistence.jooq.generated.tables.ManagedusersTeams.ManagedusersTeamsPath;
import org.dependencytrack.persistence.jooq.generated.tables.Permission.PermissionPath;
import org.dependencytrack.persistence.jooq.generated.tables.Team.TeamPath;
import org.dependencytrack.persistence.jooq.generated.tables.UserProjectEffectivePermissions.UserProjectEffectivePermissionsPath;
import org.dependencytrack.persistence.jooq.generated.tables.records.ManageduserRecord;
import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Manageduser extends TableImpl<ManageduserRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.MANAGEDUSER</code>
     */
    public static final Manageduser MANAGEDUSER = new Manageduser();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ManageduserRecord> getRecordType() {
        return ManageduserRecord.class;
    }

    /**
     * The column <code>public.MANAGEDUSER.ID</code>.
     */
    public final TableField<ManageduserRecord, Long> ID = createField(DSL.name("ID"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.MANAGEDUSER.EMAIL</code>.
     */
    public final TableField<ManageduserRecord, String> EMAIL = createField(DSL.name("EMAIL"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.MANAGEDUSER.FORCE_PASSWORD_CHANGE</code>.
     */
    public final TableField<ManageduserRecord, Boolean> FORCE_PASSWORD_CHANGE = createField(DSL.name("FORCE_PASSWORD_CHANGE"), SQLDataType.BOOLEAN.nullable(false), this, "");

    /**
     * The column <code>public.MANAGEDUSER.FULLNAME</code>.
     */
    public final TableField<ManageduserRecord, String> FULLNAME = createField(DSL.name("FULLNAME"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.MANAGEDUSER.LAST_PASSWORD_CHANGE</code>.
     */
    public final TableField<ManageduserRecord, OffsetDateTime> LAST_PASSWORD_CHANGE = createField(DSL.name("LAST_PASSWORD_CHANGE"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).nullable(false), this, "");

    /**
     * The column <code>public.MANAGEDUSER.NON_EXPIRY_PASSWORD</code>.
     */
    public final TableField<ManageduserRecord, Boolean> NON_EXPIRY_PASSWORD = createField(DSL.name("NON_EXPIRY_PASSWORD"), SQLDataType.BOOLEAN.nullable(false), this, "");

    /**
     * The column <code>public.MANAGEDUSER.PASSWORD</code>.
     */
    public final TableField<ManageduserRecord, String> PASSWORD = createField(DSL.name("PASSWORD"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>public.MANAGEDUSER.SUSPENDED</code>.
     */
    public final TableField<ManageduserRecord, Boolean> SUSPENDED = createField(DSL.name("SUSPENDED"), SQLDataType.BOOLEAN.nullable(false), this, "");

    /**
     * The column <code>public.MANAGEDUSER.USERNAME</code>.
     */
    public final TableField<ManageduserRecord, String> USERNAME = createField(DSL.name("USERNAME"), SQLDataType.VARCHAR(255), this, "");

    private Manageduser(Name alias, Table<ManageduserRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Manageduser(Name alias, Table<ManageduserRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.MANAGEDUSER</code> table reference
     */
    public Manageduser(String alias) {
        this(DSL.name(alias), MANAGEDUSER);
    }

    /**
     * Create an aliased <code>public.MANAGEDUSER</code> table reference
     */
    public Manageduser(Name alias) {
        this(alias, MANAGEDUSER);
    }

    /**
     * Create a <code>public.MANAGEDUSER</code> table reference
     */
    public Manageduser() {
        this(DSL.name("MANAGEDUSER"), null);
    }

    public <O extends Record> Manageduser(Table<O> path, ForeignKey<O, ManageduserRecord> childPath, InverseForeignKey<O, ManageduserRecord> parentPath) {
        super(path, childPath, parentPath, MANAGEDUSER);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class ManageduserPath extends Manageduser implements Path<ManageduserRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> ManageduserPath(Table<O> path, ForeignKey<O, ManageduserRecord> childPath, InverseForeignKey<O, ManageduserRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private ManageduserPath(Name alias, Table<ManageduserRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public ManageduserPath as(String alias) {
            return new ManageduserPath(DSL.name(alias), this);
        }

        @Override
        public ManageduserPath as(Name alias) {
            return new ManageduserPath(alias, this);
        }

        @Override
        public ManageduserPath as(Table<?> alias) {
            return new ManageduserPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public Identity<ManageduserRecord, Long> getIdentity() {
        return (Identity<ManageduserRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<ManageduserRecord> getPrimaryKey() {
        return Keys.MANAGEDUSER_PK;
    }

    @Override
    public List<UniqueKey<ManageduserRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.MANAGEDUSER_USERNAME_IDX);
    }

    private transient ManagedusersPermissionsPath _managedusersPermissions;

    /**
     * Get the implicit to-many join path to the
     * <code>public.MANAGEDUSERS_PERMISSIONS</code> table
     */
    public ManagedusersPermissionsPath managedusersPermissions() {
        if (_managedusersPermissions == null)
            _managedusersPermissions = new ManagedusersPermissionsPath(this, null, Keys.MANAGEDUSERS_PERMISSIONS__MANAGEDUSERS_PERMISSIONS_MANAGEDUSER_FK.getInverseKey());

        return _managedusersPermissions;
    }

    private transient ManagedusersTeamsPath _managedusersTeams;

    /**
     * Get the implicit to-many join path to the
     * <code>public.MANAGEDUSERS_TEAMS</code> table
     */
    public ManagedusersTeamsPath managedusersTeams() {
        if (_managedusersTeams == null)
            _managedusersTeams = new ManagedusersTeamsPath(this, null, Keys.MANAGEDUSERS_TEAMS__MANAGEDUSERS_TEAMS_MANAGEDUSER_FK.getInverseKey());

        return _managedusersTeams;
    }

    private transient UserProjectEffectivePermissionsPath _userProjectEffectivePermissions;

    /**
     * Get the implicit to-many join path to the
     * <code>public.USER_PROJECT_EFFECTIVE_PERMISSIONS</code> table
     */
    public UserProjectEffectivePermissionsPath userProjectEffectivePermissions() {
        if (_userProjectEffectivePermissions == null)
            _userProjectEffectivePermissions = new UserProjectEffectivePermissionsPath(this, null, Keys.USER_PROJECT_EFFECTIVE_PERMISSIONS__USER_PROJECT_EFFECTIVE_PERMISSIONS_MANAGEDUSER_FK.getInverseKey());

        return _userProjectEffectivePermissions;
    }

    /**
     * Get the implicit many-to-many join path to the
     * <code>public.PERMISSION</code> table
     */
    public PermissionPath permission() {
        return managedusersPermissions().permission();
    }

    /**
     * Get the implicit many-to-many join path to the <code>public.TEAM</code>
     * table
     */
    public TeamPath team() {
        return managedusersTeams().team();
    }

    @Override
    public Manageduser as(String alias) {
        return new Manageduser(DSL.name(alias), this);
    }

    @Override
    public Manageduser as(Name alias) {
        return new Manageduser(alias, this);
    }

    @Override
    public Manageduser as(Table<?> alias) {
        return new Manageduser(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Manageduser rename(String name) {
        return new Manageduser(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Manageduser rename(Name name) {
        return new Manageduser(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Manageduser rename(Table<?> name) {
        return new Manageduser(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Manageduser where(Condition condition) {
        return new Manageduser(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Manageduser where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Manageduser where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Manageduser where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Manageduser where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Manageduser where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Manageduser where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Manageduser where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Manageduser whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Manageduser whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
