/*
 * This file is generated by jOOQ.
 */
package org.dependencytrack.persistence.jooq.generated.tables;


import java.util.Arrays;
import java.util.Collection;
import java.util.List;
import java.util.UUID;

import javax.annotation.processing.Generated;

import org.dependencytrack.persistence.jooq.generated.DefaultSchema;
import org.dependencytrack.persistence.jooq.generated.Indexes;
import org.dependencytrack.persistence.jooq.generated.Keys;
import org.dependencytrack.persistence.jooq.generated.tables.Component.ComponentPath;
import org.dependencytrack.persistence.jooq.generated.tables.records.ComponentPropertyRecord;
import org.jooq.Check;
import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.20.4",
        "schema version:v5.6.0-28"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class ComponentProperty extends TableImpl<ComponentPropertyRecord> {

    private static final long serialVersionUID = -2102938216;

    /**
     * The reference instance of <code>COMPONENT_PROPERTY</code>
     */
    public static final ComponentProperty COMPONENT_PROPERTY = new ComponentProperty();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ComponentPropertyRecord> getRecordType() {
        return ComponentPropertyRecord.class;
    }

    /**
     * The column <code>COMPONENT_PROPERTY.ID</code>.
     */
    public final TableField<ComponentPropertyRecord, Long> id = createField(DSL.name("ID"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>COMPONENT_PROPERTY.COMPONENT_ID</code>.
     */
    public final TableField<ComponentPropertyRecord, Long> componentId = createField(DSL.name("COMPONENT_ID"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>COMPONENT_PROPERTY.GROUPNAME</code>.
     */
    public final TableField<ComponentPropertyRecord, String> groupName = createField(DSL.name("GROUPNAME"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>COMPONENT_PROPERTY.PROPERTYNAME</code>.
     */
    public final TableField<ComponentPropertyRecord, String> propertyName = createField(DSL.name("PROPERTYNAME"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>COMPONENT_PROPERTY.PROPERTYVALUE</code>.
     */
    public final TableField<ComponentPropertyRecord, String> propertyValue = createField(DSL.name("PROPERTYVALUE"), SQLDataType.VARCHAR(1024), this, "");

    /**
     * The column <code>COMPONENT_PROPERTY.PROPERTYTYPE</code>.
     */
    public final TableField<ComponentPropertyRecord, String> propertyType = createField(DSL.name("PROPERTYTYPE"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>COMPONENT_PROPERTY.DESCRIPTION</code>.
     */
    public final TableField<ComponentPropertyRecord, String> description = createField(DSL.name("DESCRIPTION"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>COMPONENT_PROPERTY.UUID</code>.
     */
    public final TableField<ComponentPropertyRecord, UUID> uuid = createField(DSL.name("UUID"), SQLDataType.UUID.nullable(false), this, "");

    private ComponentProperty(Name alias, Table<ComponentPropertyRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private ComponentProperty(Name alias, Table<ComponentPropertyRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>COMPONENT_PROPERTY</code> table reference
     */
    public ComponentProperty(String alias) {
        this(DSL.name(alias), COMPONENT_PROPERTY);
    }

    /**
     * Create an aliased <code>COMPONENT_PROPERTY</code> table reference
     */
    public ComponentProperty(Name alias) {
        this(alias, COMPONENT_PROPERTY);
    }

    /**
     * Create a <code>COMPONENT_PROPERTY</code> table reference
     */
    public ComponentProperty() {
        this(DSL.name("COMPONENT_PROPERTY"), null);
    }

    public <O extends Record> ComponentProperty(Table<O> path, ForeignKey<O, ComponentPropertyRecord> childPath, InverseForeignKey<O, ComponentPropertyRecord> parentPath) {
        super(path, childPath, parentPath, COMPONENT_PROPERTY);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    @Generated(
        value = {
            "https://www.jooq.org",
            "jOOQ version:3.20.4",
            "schema version:v5.6.0-28"
        },
        comments = "This class is generated by jOOQ"
    )
    public static class ComponentPropertyPath extends ComponentProperty implements Path<ComponentPropertyRecord> {

        private static final long serialVersionUID = -2102938216;
        public <O extends Record> ComponentPropertyPath(Table<O> path, ForeignKey<O, ComponentPropertyRecord> childPath, InverseForeignKey<O, ComponentPropertyRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private ComponentPropertyPath(Name alias, Table<ComponentPropertyRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public ComponentPropertyPath as(String alias) {
            return new ComponentPropertyPath(DSL.name(alias), this);
        }

        @Override
        public ComponentPropertyPath as(Name alias) {
            return new ComponentPropertyPath(alias, this);
        }

        @Override
        public ComponentPropertyPath as(Table<?> alias) {
            return new ComponentPropertyPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.COMPONENT_PROPERTY_COMPONENT_ID_IDX);
    }

    @Override
    public Identity<ComponentPropertyRecord, Long> getIdentity() {
        return (Identity<ComponentPropertyRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<ComponentPropertyRecord> getPrimaryKey() {
        return Keys.COMPONENT_PROPERTY_PK;
    }

    @Override
    public List<ForeignKey<ComponentPropertyRecord, ?>> getReferences() {
        return Arrays.asList(Keys.COMPONENT_PROPERTY_COMPONENT_ID_FK);
    }

    private transient ComponentPath _component;

    /**
     * Get the implicit join path to the <code>COMPONENT</code> table.
     */
    public ComponentPath component() {
        if (_component == null)
            _component = new ComponentPath(this, Keys.COMPONENT_PROPERTY_COMPONENT_ID_FK, null);

        return _component;
    }

    @Override
    public List<Check<ComponentPropertyRecord>> getChecks() {
        return Arrays.asList(
            Internal.createCheck(this, DSL.name("COMPONENT_PROPERTY_TYPE_check"), "(((\"PROPERTYTYPE\" IS NULL) OR (\"PROPERTYTYPE\" = ANY (ARRAY['BOOLEAN'::text, 'INTEGER'::text, 'NUMBER'::text, 'STRING'::text, 'ENCRYPTEDSTRING'::text, 'TIMESTAMP'::text, 'URL'::text, 'UUID'::text]))))", true)
        );
    }

    @Override
    public ComponentProperty as(String alias) {
        return new ComponentProperty(DSL.name(alias), this);
    }

    @Override
    public ComponentProperty as(Name alias) {
        return new ComponentProperty(alias, this);
    }

    @Override
    public ComponentProperty as(Table<?> alias) {
        return new ComponentProperty(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public ComponentProperty rename(String name) {
        return new ComponentProperty(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ComponentProperty rename(Name name) {
        return new ComponentProperty(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public ComponentProperty rename(Table<?> name) {
        return new ComponentProperty(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ComponentProperty where(Condition condition) {
        return new ComponentProperty(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ComponentProperty where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ComponentProperty where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ComponentProperty where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public ComponentProperty where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public ComponentProperty where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public ComponentProperty where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public ComponentProperty where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ComponentProperty whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ComponentProperty whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
