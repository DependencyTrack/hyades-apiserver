/*
 * This file is generated by jOOQ.
 */
package org.dependencytrack.persistence.jooq.generated.tables;


import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.dependencytrack.persistence.jooq.generated.Keys;
import org.dependencytrack.persistence.jooq.generated.Public;
import org.dependencytrack.persistence.jooq.generated.tables.Oidcuser.OidcuserPath;
import org.dependencytrack.persistence.jooq.generated.tables.Permission.PermissionPath;
import org.dependencytrack.persistence.jooq.generated.tables.records.OidcusersPermissionsRecord;
import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class OidcusersPermissions extends TableImpl<OidcusersPermissionsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.OIDCUSERS_PERMISSIONS</code>
     */
    public static final OidcusersPermissions OIDCUSERS_PERMISSIONS = new OidcusersPermissions();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<OidcusersPermissionsRecord> getRecordType() {
        return OidcusersPermissionsRecord.class;
    }

    /**
     * The column <code>public.OIDCUSERS_PERMISSIONS.PERMISSION_ID</code>.
     */
    public final TableField<OidcusersPermissionsRecord, Long> PERMISSION_ID = createField(DSL.name("PERMISSION_ID"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.OIDCUSERS_PERMISSIONS.OIDCUSER_ID</code>.
     */
    public final TableField<OidcusersPermissionsRecord, Long> OIDCUSER_ID = createField(DSL.name("OIDCUSER_ID"), SQLDataType.BIGINT.nullable(false), this, "");

    private OidcusersPermissions(Name alias, Table<OidcusersPermissionsRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private OidcusersPermissions(Name alias, Table<OidcusersPermissionsRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.OIDCUSERS_PERMISSIONS</code> table
     * reference
     */
    public OidcusersPermissions(String alias) {
        this(DSL.name(alias), OIDCUSERS_PERMISSIONS);
    }

    /**
     * Create an aliased <code>public.OIDCUSERS_PERMISSIONS</code> table
     * reference
     */
    public OidcusersPermissions(Name alias) {
        this(alias, OIDCUSERS_PERMISSIONS);
    }

    /**
     * Create a <code>public.OIDCUSERS_PERMISSIONS</code> table reference
     */
    public OidcusersPermissions() {
        this(DSL.name("OIDCUSERS_PERMISSIONS"), null);
    }

    public <O extends Record> OidcusersPermissions(Table<O> path, ForeignKey<O, OidcusersPermissionsRecord> childPath, InverseForeignKey<O, OidcusersPermissionsRecord> parentPath) {
        super(path, childPath, parentPath, OIDCUSERS_PERMISSIONS);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class OidcusersPermissionsPath extends OidcusersPermissions implements Path<OidcusersPermissionsRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> OidcusersPermissionsPath(Table<O> path, ForeignKey<O, OidcusersPermissionsRecord> childPath, InverseForeignKey<O, OidcusersPermissionsRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private OidcusersPermissionsPath(Name alias, Table<OidcusersPermissionsRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public OidcusersPermissionsPath as(String alias) {
            return new OidcusersPermissionsPath(DSL.name(alias), this);
        }

        @Override
        public OidcusersPermissionsPath as(Name alias) {
            return new OidcusersPermissionsPath(alias, this);
        }

        @Override
        public OidcusersPermissionsPath as(Table<?> alias) {
            return new OidcusersPermissionsPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public UniqueKey<OidcusersPermissionsRecord> getPrimaryKey() {
        return Keys.OIDCUSERS_PERMISSIONS_PK;
    }

    @Override
    public List<ForeignKey<OidcusersPermissionsRecord, ?>> getReferences() {
        return Arrays.asList(Keys.OIDCUSERS_PERMISSIONS__OIDCUSERS_PERMISSIONS_OIDCUSER_FK, Keys.OIDCUSERS_PERMISSIONS__OIDCUSERS_PERMISSIONS_PERMISSION_FK);
    }

    private transient OidcuserPath _oidcuser;

    /**
     * Get the implicit join path to the <code>public.OIDCUSER</code> table.
     */
    public OidcuserPath oidcuser() {
        if (_oidcuser == null)
            _oidcuser = new OidcuserPath(this, Keys.OIDCUSERS_PERMISSIONS__OIDCUSERS_PERMISSIONS_OIDCUSER_FK, null);

        return _oidcuser;
    }

    private transient PermissionPath _permission;

    /**
     * Get the implicit join path to the <code>public.PERMISSION</code> table.
     */
    public PermissionPath permission() {
        if (_permission == null)
            _permission = new PermissionPath(this, Keys.OIDCUSERS_PERMISSIONS__OIDCUSERS_PERMISSIONS_PERMISSION_FK, null);

        return _permission;
    }

    @Override
    public OidcusersPermissions as(String alias) {
        return new OidcusersPermissions(DSL.name(alias), this);
    }

    @Override
    public OidcusersPermissions as(Name alias) {
        return new OidcusersPermissions(alias, this);
    }

    @Override
    public OidcusersPermissions as(Table<?> alias) {
        return new OidcusersPermissions(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public OidcusersPermissions rename(String name) {
        return new OidcusersPermissions(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public OidcusersPermissions rename(Name name) {
        return new OidcusersPermissions(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public OidcusersPermissions rename(Table<?> name) {
        return new OidcusersPermissions(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public OidcusersPermissions where(Condition condition) {
        return new OidcusersPermissions(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public OidcusersPermissions where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public OidcusersPermissions where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public OidcusersPermissions where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public OidcusersPermissions where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public OidcusersPermissions where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public OidcusersPermissions where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public OidcusersPermissions where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public OidcusersPermissions whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public OidcusersPermissions whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
