/*
 * This file is generated by jOOQ.
 */
package org.dependencytrack.persistence.jooq.generated.tables.records;


import java.time.OffsetDateTime;

import org.dependencytrack.persistence.jooq.generated.tables.AnalysisComment;
import org.jooq.Record1;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class AnalysisCommentRecord extends UpdatableRecordImpl<AnalysisCommentRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>public.ANALYSISCOMMENT.ID</code>.
     */
    public void setId(Long value) {
        set(0, value);
    }

    /**
     * Getter for <code>public.ANALYSISCOMMENT.ID</code>.
     */
    public Long getId() {
        return (Long) get(0);
    }

    /**
     * Setter for <code>public.ANALYSISCOMMENT.ANALYSIS_ID</code>.
     */
    public void setAnalysisId(Long value) {
        set(1, value);
    }

    /**
     * Getter for <code>public.ANALYSISCOMMENT.ANALYSIS_ID</code>.
     */
    public Long getAnalysisId() {
        return (Long) get(1);
    }

    /**
     * Setter for <code>public.ANALYSISCOMMENT.COMMENT</code>.
     */
    public void setComment(String value) {
        set(2, value);
    }

    /**
     * Getter for <code>public.ANALYSISCOMMENT.COMMENT</code>.
     */
    public String getComment() {
        return (String) get(2);
    }

    /**
     * Setter for <code>public.ANALYSISCOMMENT.COMMENTER</code>.
     */
    public void setCommenter(String value) {
        set(3, value);
    }

    /**
     * Getter for <code>public.ANALYSISCOMMENT.COMMENTER</code>.
     */
    public String getCommenter() {
        return (String) get(3);
    }

    /**
     * Setter for <code>public.ANALYSISCOMMENT.TIMESTAMP</code>.
     */
    public void setTimestamp(OffsetDateTime value) {
        set(4, value);
    }

    /**
     * Getter for <code>public.ANALYSISCOMMENT.TIMESTAMP</code>.
     */
    public OffsetDateTime getTimestamp() {
        return (OffsetDateTime) get(4);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Long> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached AnalysisCommentRecord
     */
    public AnalysisCommentRecord() {
        super(AnalysisComment.ANALYSISCOMMENT);
    }

    /**
     * Create a detached, initialised AnalysisCommentRecord
     */
    public AnalysisCommentRecord(Long id, Long analysisId, String comment, String commenter, OffsetDateTime timestamp) {
        super(AnalysisComment.ANALYSISCOMMENT);

        setId(id);
        setAnalysisId(analysisId);
        setComment(comment);
        setCommenter(commenter);
        setTimestamp(timestamp);
        resetTouchedOnNotNull();
    }
}
