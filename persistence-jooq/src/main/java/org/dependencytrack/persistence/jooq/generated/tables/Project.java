/*
 * This file is generated by jOOQ.
 */
package org.dependencytrack.persistence.jooq.generated.tables;


import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.dependencytrack.persistence.jooq.generated.Indexes;
import org.dependencytrack.persistence.jooq.generated.Keys;
import org.dependencytrack.persistence.jooq.generated.Public;
import org.dependencytrack.persistence.jooq.generated.tables.Analysis.AnalysisPath;
import org.dependencytrack.persistence.jooq.generated.tables.Bom.BomPath;
import org.dependencytrack.persistence.jooq.generated.tables.Component.ComponentPath;
import org.dependencytrack.persistence.jooq.generated.tables.DependencyMetrics.DependencymetricsPath;
import org.dependencytrack.persistence.jooq.generated.tables.FindingAttribution.FindingattributionPath;
import org.dependencytrack.persistence.jooq.generated.tables.NotificationRuleProjects.NotificationruleProjectsPath;
import org.dependencytrack.persistence.jooq.generated.tables.PolicyProjects.PolicyProjectsPath;
import org.dependencytrack.persistence.jooq.generated.tables.PolicyViolation.PolicyviolationPath;
import org.dependencytrack.persistence.jooq.generated.tables.Project.ProjectPath;
import org.dependencytrack.persistence.jooq.generated.tables.ProjectAccessTeams.ProjectAccessTeamsPath;
import org.dependencytrack.persistence.jooq.generated.tables.ProjectHierarchy.ProjectHierarchyPath;
import org.dependencytrack.persistence.jooq.generated.tables.ProjectMetadata.ProjectMetadataPath;
import org.dependencytrack.persistence.jooq.generated.tables.ProjectMetrics.ProjectmetricsPath;
import org.dependencytrack.persistence.jooq.generated.tables.ProjectProperty.ProjectPropertyPath;
import org.dependencytrack.persistence.jooq.generated.tables.ProjectsTags.ProjectsTagsPath;
import org.dependencytrack.persistence.jooq.generated.tables.ServiceComponent.ServicecomponentPath;
import org.dependencytrack.persistence.jooq.generated.tables.Team.TeamPath;
import org.dependencytrack.persistence.jooq.generated.tables.UserProjectEffectivePermissions.UserProjectEffectivePermissionsPath;
import org.dependencytrack.persistence.jooq.generated.tables.Vex.VexPath;
import org.dependencytrack.persistence.jooq.generated.tables.ViolationAnalysis.ViolationanalysisPath;
import org.dependencytrack.persistence.jooq.generated.tables.records.ProjectRecord;
import org.jooq.Check;
import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.InverseForeignKey;
import org.jooq.JSONB;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Project extends TableImpl<ProjectRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.PROJECT</code>
     */
    public static final Project PROJECT = new Project();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ProjectRecord> getRecordType() {
        return ProjectRecord.class;
    }

    /**
     * The column <code>public.PROJECT.ID</code>.
     */
    public final TableField<ProjectRecord, Long> ID = createField(DSL.name("ID"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.PROJECT.CLASSIFIER</code>.
     */
    public final TableField<ProjectRecord, String> CLASSIFIER = createField(DSL.name("CLASSIFIER"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.PROJECT.CPE</code>.
     */
    public final TableField<ProjectRecord, String> CPE = createField(DSL.name("CPE"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.PROJECT.DESCRIPTION</code>.
     */
    public final TableField<ProjectRecord, String> DESCRIPTION = createField(DSL.name("DESCRIPTION"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.PROJECT.DIRECT_DEPENDENCIES</code>.
     */
    public final TableField<ProjectRecord, JSONB> DIRECT_DEPENDENCIES = createField(DSL.name("DIRECT_DEPENDENCIES"), SQLDataType.JSONB, this, "");

    /**
     * The column <code>public.PROJECT.EXTERNAL_REFERENCES</code>.
     */
    public final TableField<ProjectRecord, byte[]> EXTERNAL_REFERENCES = createField(DSL.name("EXTERNAL_REFERENCES"), SQLDataType.BLOB, this, "");

    /**
     * The column <code>public.PROJECT.GROUP</code>.
     */
    public final TableField<ProjectRecord, String> GROUP = createField(DSL.name("GROUP"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.PROJECT.LAST_BOM_IMPORTED</code>.
     */
    public final TableField<ProjectRecord, OffsetDateTime> LAST_BOM_IMPORTED = createField(DSL.name("LAST_BOM_IMPORTED"), SQLDataType.TIMESTAMPWITHTIMEZONE(6), this, "");

    /**
     * The column <code>public.PROJECT.LAST_BOM_IMPORTED_FORMAT</code>.
     */
    public final TableField<ProjectRecord, String> LAST_BOM_IMPORTED_FORMAT = createField(DSL.name("LAST_BOM_IMPORTED_FORMAT"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.PROJECT.LAST_RISKSCORE</code>.
     */
    public final TableField<ProjectRecord, Double> LAST_RISKSCORE = createField(DSL.name("LAST_RISKSCORE"), SQLDataType.DOUBLE, this, "");

    /**
     * The column <code>public.PROJECT.NAME</code>.
     */
    public final TableField<ProjectRecord, String> NAME = createField(DSL.name("NAME"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>public.PROJECT.PARENT_PROJECT_ID</code>.
     */
    public final TableField<ProjectRecord, Long> PARENT_PROJECT_ID = createField(DSL.name("PARENT_PROJECT_ID"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>public.PROJECT.PUBLISHER</code>.
     */
    public final TableField<ProjectRecord, String> PUBLISHER = createField(DSL.name("PUBLISHER"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.PROJECT.PURL</code>.
     */
    public final TableField<ProjectRecord, String> PURL = createField(DSL.name("PURL"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.PROJECT.SWIDTAGID</code>.
     */
    public final TableField<ProjectRecord, String> SWIDTAGID = createField(DSL.name("SWIDTAGID"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.PROJECT.UUID</code>.
     */
    public final TableField<ProjectRecord, java.util.UUID> UUID = createField(DSL.name("UUID"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.PROJECT.VERSION</code>.
     */
    public final TableField<ProjectRecord, String> VERSION = createField(DSL.name("VERSION"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.PROJECT.SUPPLIER</code>.
     */
    public final TableField<ProjectRecord, String> SUPPLIER = createField(DSL.name("SUPPLIER"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.PROJECT.MANUFACTURER</code>.
     */
    public final TableField<ProjectRecord, String> MANUFACTURER = createField(DSL.name("MANUFACTURER"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.PROJECT.AUTHORS</code>.
     */
    public final TableField<ProjectRecord, String> AUTHORS = createField(DSL.name("AUTHORS"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.PROJECT.IS_LATEST</code>.
     */
    public final TableField<ProjectRecord, Boolean> IS_LATEST = createField(DSL.name("IS_LATEST"), SQLDataType.BOOLEAN.nullable(false).defaultValue(DSL.field(DSL.raw("false"), SQLDataType.BOOLEAN)), this, "");

    /**
     * The column <code>public.PROJECT.INACTIVE_SINCE</code>.
     */
    public final TableField<ProjectRecord, OffsetDateTime> INACTIVE_SINCE = createField(DSL.name("INACTIVE_SINCE"), SQLDataType.TIMESTAMPWITHTIMEZONE(6), this, "");

    private Project(Name alias, Table<ProjectRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Project(Name alias, Table<ProjectRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.PROJECT</code> table reference
     */
    public Project(String alias) {
        this(DSL.name(alias), PROJECT);
    }

    /**
     * Create an aliased <code>public.PROJECT</code> table reference
     */
    public Project(Name alias) {
        this(alias, PROJECT);
    }

    /**
     * Create a <code>public.PROJECT</code> table reference
     */
    public Project() {
        this(DSL.name("PROJECT"), null);
    }

    public <O extends Record> Project(Table<O> path, ForeignKey<O, ProjectRecord> childPath, InverseForeignKey<O, ProjectRecord> parentPath) {
        super(path, childPath, parentPath, PROJECT);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class ProjectPath extends Project implements Path<ProjectRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> ProjectPath(Table<O> path, ForeignKey<O, ProjectRecord> childPath, InverseForeignKey<O, ProjectRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private ProjectPath(Name alias, Table<ProjectRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public ProjectPath as(String alias) {
            return new ProjectPath(DSL.name(alias), this);
        }

        @Override
        public ProjectPath as(Name alias) {
            return new ProjectPath(alias, this);
        }

        @Override
        public ProjectPath as(Table<?> alias) {
            return new ProjectPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.PROJECT_CLASSIFIER_IDX, Indexes.PROJECT_CPE_IDX, Indexes.PROJECT_GROUP_IDX, Indexes.PROJECT_IS_LATEST_IDX, Indexes.PROJECT_LAST_RISKSCORE_IDX, Indexes.PROJECT_LASTBOMIMPORT_FORMAT_IDX, Indexes.PROJECT_LASTBOMIMPORT_IDX, Indexes.PROJECT_NAME_IDX, Indexes.PROJECT_NAME_VERSION_IDX, Indexes.PROJECT_NAME_VERSION_NULL_IDX, Indexes.PROJECT_PARENT_PROJECT_ID_IDX, Indexes.PROJECT_PURL_IDX, Indexes.PROJECT_SWID_TAGID_IDX, Indexes.PROJECT_VERSION_IDX);
    }

    @Override
    public Identity<ProjectRecord, Long> getIdentity() {
        return (Identity<ProjectRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<ProjectRecord> getPrimaryKey() {
        return Keys.PROJECT_PK;
    }

    @Override
    public List<UniqueKey<ProjectRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.PROJECT_UUID_IDX);
    }

    @Override
    public List<ForeignKey<ProjectRecord, ?>> getReferences() {
        return Arrays.asList(Keys.PROJECT__PROJECT_PROJECT_FK);
    }

    private transient ProjectPath _project;

    /**
     * Get the implicit join path to the <code>public.PROJECT</code> table.
     */
    public ProjectPath project() {
        if (_project == null)
            _project = new ProjectPath(this, Keys.PROJECT__PROJECT_PROJECT_FK, null);

        return _project;
    }

    private transient AnalysisPath _analysis;

    /**
     * Get the implicit to-many join path to the <code>public.ANALYSIS</code>
     * table
     */
    public AnalysisPath analysis() {
        if (_analysis == null)
            _analysis = new AnalysisPath(this, null, Keys.ANALYSIS__ANALYSIS_PROJECT_FK.getInverseKey());

        return _analysis;
    }

    private transient BomPath _bom;

    /**
     * Get the implicit to-many join path to the <code>public.BOM</code> table
     */
    public BomPath bom() {
        if (_bom == null)
            _bom = new BomPath(this, null, Keys.BOM__BOM_PROJECT_FK.getInverseKey());

        return _bom;
    }

    private transient ComponentPath _component;

    /**
     * Get the implicit to-many join path to the <code>public.COMPONENT</code>
     * table
     */
    public ComponentPath component() {
        if (_component == null)
            _component = new ComponentPath(this, null, Keys.COMPONENT__COMPONENT_PROJECT_FK.getInverseKey());

        return _component;
    }

    private transient DependencymetricsPath _dependencymetrics;

    /**
     * Get the implicit to-many join path to the
     * <code>public.DEPENDENCYMETRICS</code> table
     */
    public DependencymetricsPath dependencymetrics() {
        if (_dependencymetrics == null)
            _dependencymetrics = new DependencymetricsPath(this, null, Keys.DEPENDENCYMETRICS__DEPENDENCYMETRICS_PROJECT_FK.getInverseKey());

        return _dependencymetrics;
    }

    private transient FindingattributionPath _findingattribution;

    /**
     * Get the implicit to-many join path to the
     * <code>public.FINDINGATTRIBUTION</code> table
     */
    public FindingattributionPath findingattribution() {
        if (_findingattribution == null)
            _findingattribution = new FindingattributionPath(this, null, Keys.FINDINGATTRIBUTION__FINDINGATTRIBUTION_PROJECT_FK.getInverseKey());

        return _findingattribution;
    }

    private transient NotificationruleProjectsPath _notificationruleProjects;

    /**
     * Get the implicit to-many join path to the
     * <code>public.NOTIFICATIONRULE_PROJECTS</code> table
     */
    public NotificationruleProjectsPath notificationruleProjects() {
        if (_notificationruleProjects == null)
            _notificationruleProjects = new NotificationruleProjectsPath(this, null, Keys.NOTIFICATIONRULE_PROJECTS__NOTIFICATIONRULE_PROJECTS_PROJECT_FK.getInverseKey());

        return _notificationruleProjects;
    }

    private transient PolicyProjectsPath _policyProjects;

    /**
     * Get the implicit to-many join path to the
     * <code>public.POLICY_PROJECTS</code> table
     */
    public PolicyProjectsPath policyProjects() {
        if (_policyProjects == null)
            _policyProjects = new PolicyProjectsPath(this, null, Keys.POLICY_PROJECTS__POLICY_PROJECTS_PROJECT_FK.getInverseKey());

        return _policyProjects;
    }

    private transient PolicyviolationPath _policyviolation;

    /**
     * Get the implicit to-many join path to the
     * <code>public.POLICYVIOLATION</code> table
     */
    public PolicyviolationPath policyviolation() {
        if (_policyviolation == null)
            _policyviolation = new PolicyviolationPath(this, null, Keys.POLICYVIOLATION__POLICYVIOLATION_PROJECT_FK.getInverseKey());

        return _policyviolation;
    }

    private transient ProjectAccessTeamsPath _projectAccessTeams;

    /**
     * Get the implicit to-many join path to the
     * <code>public.PROJECT_ACCESS_TEAMS</code> table
     */
    public ProjectAccessTeamsPath projectAccessTeams() {
        if (_projectAccessTeams == null)
            _projectAccessTeams = new ProjectAccessTeamsPath(this, null, Keys.PROJECT_ACCESS_TEAMS__PROJECT_ACCESS_TEAMS_PROJECT_FK.getInverseKey());

        return _projectAccessTeams;
    }

    private transient ProjectHierarchyPath _projectHierarchyChildProjectFk;

    /**
     * Get the implicit to-many join path to the
     * <code>public.PROJECT_HIERARCHY</code> table, via the
     * <code>PROJECT_HIERARCHY_CHILD_PROJECT_FK</code> key
     */
    public ProjectHierarchyPath projectHierarchyChildProjectFk() {
        if (_projectHierarchyChildProjectFk == null)
            _projectHierarchyChildProjectFk = new ProjectHierarchyPath(this, null, Keys.PROJECT_HIERARCHY__PROJECT_HIERARCHY_CHILD_PROJECT_FK.getInverseKey());

        return _projectHierarchyChildProjectFk;
    }

    private transient ProjectHierarchyPath _projectHierarchyParentProjectFk;

    /**
     * Get the implicit to-many join path to the
     * <code>public.PROJECT_HIERARCHY</code> table, via the
     * <code>PROJECT_HIERARCHY_PARENT_PROJECT_FK</code> key
     */
    public ProjectHierarchyPath projectHierarchyParentProjectFk() {
        if (_projectHierarchyParentProjectFk == null)
            _projectHierarchyParentProjectFk = new ProjectHierarchyPath(this, null, Keys.PROJECT_HIERARCHY__PROJECT_HIERARCHY_PARENT_PROJECT_FK.getInverseKey());

        return _projectHierarchyParentProjectFk;
    }

    private transient ProjectMetadataPath _projectMetadata;

    /**
     * Get the implicit to-many join path to the
     * <code>public.PROJECT_METADATA</code> table
     */
    public ProjectMetadataPath projectMetadata() {
        if (_projectMetadata == null)
            _projectMetadata = new ProjectMetadataPath(this, null, Keys.PROJECT_METADATA__PROJECT_METADATA_PROJECT_ID_FK.getInverseKey());

        return _projectMetadata;
    }

    private transient ProjectPropertyPath _projectProperty;

    /**
     * Get the implicit to-many join path to the
     * <code>public.PROJECT_PROPERTY</code> table
     */
    public ProjectPropertyPath projectProperty() {
        if (_projectProperty == null)
            _projectProperty = new ProjectPropertyPath(this, null, Keys.PROJECT_PROPERTY__PROJECT_PROPERTY_PROJECT_FK.getInverseKey());

        return _projectProperty;
    }

    private transient ProjectmetricsPath _projectmetrics;

    /**
     * Get the implicit to-many join path to the
     * <code>public.PROJECTMETRICS</code> table
     */
    public ProjectmetricsPath projectmetrics() {
        if (_projectmetrics == null)
            _projectmetrics = new ProjectmetricsPath(this, null, Keys.PROJECTMETRICS__PROJECTMETRICS_PROJECT_FK.getInverseKey());

        return _projectmetrics;
    }

    private transient ProjectsTagsPath _projectsTags;

    /**
     * Get the implicit to-many join path to the
     * <code>public.PROJECTS_TAGS</code> table
     */
    public ProjectsTagsPath projectsTags() {
        if (_projectsTags == null)
            _projectsTags = new ProjectsTagsPath(this, null, Keys.PROJECTS_TAGS__PROJECTS_TAGS_PROJECT_FK.getInverseKey());

        return _projectsTags;
    }

    private transient ServicecomponentPath _servicecomponent;

    /**
     * Get the implicit to-many join path to the
     * <code>public.SERVICECOMPONENT</code> table
     */
    public ServicecomponentPath servicecomponent() {
        if (_servicecomponent == null)
            _servicecomponent = new ServicecomponentPath(this, null, Keys.SERVICECOMPONENT__SERVICECOMPONENT_PROJECT_FK.getInverseKey());

        return _servicecomponent;
    }

    private transient UserProjectEffectivePermissionsPath _userProjectEffectivePermissions;

    /**
     * Get the implicit to-many join path to the
     * <code>public.USER_PROJECT_EFFECTIVE_PERMISSIONS</code> table
     */
    public UserProjectEffectivePermissionsPath userProjectEffectivePermissions() {
        if (_userProjectEffectivePermissions == null)
            _userProjectEffectivePermissions = new UserProjectEffectivePermissionsPath(this, null, Keys.USER_PROJECT_EFFECTIVE_PERMISSIONS__USER_PROJECT_EFFECTIVE_PERMISSIONS_PROJECT_FK.getInverseKey());

        return _userProjectEffectivePermissions;
    }

    private transient VexPath _vex;

    /**
     * Get the implicit to-many join path to the <code>public.VEX</code> table
     */
    public VexPath vex() {
        if (_vex == null)
            _vex = new VexPath(this, null, Keys.VEX__VEX_PROJECT_FK.getInverseKey());

        return _vex;
    }

    private transient ViolationanalysisPath _violationanalysis;

    /**
     * Get the implicit to-many join path to the
     * <code>public.VIOLATIONANALYSIS</code> table
     */
    public ViolationanalysisPath violationanalysis() {
        if (_violationanalysis == null)
            _violationanalysis = new ViolationanalysisPath(this, null, Keys.VIOLATIONANALYSIS__VIOLATIONANALYSIS_PROJECT_FK.getInverseKey());

        return _violationanalysis;
    }

    /**
     * Get the implicit many-to-many join path to the <code>public.TEAM</code>
     * table
     */
    public TeamPath team() {
        return projectAccessTeams().team();
    }

    @Override
    public List<Check<ProjectRecord>> getChecks() {
        return Arrays.asList(
            Internal.createCheck(this, DSL.name("PROJECT_CLASSIFIER_check"), "(((\"CLASSIFIER\" IS NULL) OR ((\"CLASSIFIER\")::text = ANY (ARRAY['APPLICATION'::text, 'CONTAINER'::text, 'DEVICE'::text, 'FILE'::text, 'FIRMWARE'::text, 'FRAMEWORK'::text, 'LIBRARY'::text, 'OPERATING_SYSTEM'::text]))))", true)
        );
    }

    @Override
    public Project as(String alias) {
        return new Project(DSL.name(alias), this);
    }

    @Override
    public Project as(Name alias) {
        return new Project(alias, this);
    }

    @Override
    public Project as(Table<?> alias) {
        return new Project(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Project rename(String name) {
        return new Project(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Project rename(Name name) {
        return new Project(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Project rename(Table<?> name) {
        return new Project(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Project where(Condition condition) {
        return new Project(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Project where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Project where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Project where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Project where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Project where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Project where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Project where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Project whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Project whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
