/*
 * This file is generated by jOOQ.
 */
package org.dependencytrack.persistence.jooq.generated.tables;


import java.time.OffsetDateTime;
import java.util.Collection;

import org.dependencytrack.persistence.jooq.generated.Keys;
import org.dependencytrack.persistence.jooq.generated.Public;
import org.dependencytrack.persistence.jooq.generated.tables.records.VulnerabilityMetricsRecord;
import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class VulnerabilityMetrics extends TableImpl<VulnerabilityMetricsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.VULNERABILITYMETRICS</code>
     */
    public static final VulnerabilityMetrics VULNERABILITYMETRICS = new VulnerabilityMetrics();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<VulnerabilityMetricsRecord> getRecordType() {
        return VulnerabilityMetricsRecord.class;
    }

    /**
     * The column <code>public.VULNERABILITYMETRICS.ID</code>.
     */
    public final TableField<VulnerabilityMetricsRecord, Long> ID = createField(DSL.name("ID"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.VULNERABILITYMETRICS.COUNT</code>.
     */
    public final TableField<VulnerabilityMetricsRecord, Integer> COUNT = createField(DSL.name("COUNT"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.VULNERABILITYMETRICS.MEASURED_AT</code>.
     */
    public final TableField<VulnerabilityMetricsRecord, OffsetDateTime> MEASURED_AT = createField(DSL.name("MEASURED_AT"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).nullable(false), this, "");

    /**
     * The column <code>public.VULNERABILITYMETRICS.MONTH</code>.
     */
    public final TableField<VulnerabilityMetricsRecord, Integer> MONTH = createField(DSL.name("MONTH"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.VULNERABILITYMETRICS.YEAR</code>.
     */
    public final TableField<VulnerabilityMetricsRecord, Integer> YEAR = createField(DSL.name("YEAR"), SQLDataType.INTEGER.nullable(false), this, "");

    private VulnerabilityMetrics(Name alias, Table<VulnerabilityMetricsRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private VulnerabilityMetrics(Name alias, Table<VulnerabilityMetricsRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.VULNERABILITYMETRICS</code> table
     * reference
     */
    public VulnerabilityMetrics(String alias) {
        this(DSL.name(alias), VULNERABILITYMETRICS);
    }

    /**
     * Create an aliased <code>public.VULNERABILITYMETRICS</code> table
     * reference
     */
    public VulnerabilityMetrics(Name alias) {
        this(alias, VULNERABILITYMETRICS);
    }

    /**
     * Create a <code>public.VULNERABILITYMETRICS</code> table reference
     */
    public VulnerabilityMetrics() {
        this(DSL.name("VULNERABILITYMETRICS"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public Identity<VulnerabilityMetricsRecord, Long> getIdentity() {
        return (Identity<VulnerabilityMetricsRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<VulnerabilityMetricsRecord> getPrimaryKey() {
        return Keys.VULNERABILITYMETRICS_PK;
    }

    @Override
    public VulnerabilityMetrics as(String alias) {
        return new VulnerabilityMetrics(DSL.name(alias), this);
    }

    @Override
    public VulnerabilityMetrics as(Name alias) {
        return new VulnerabilityMetrics(alias, this);
    }

    @Override
    public VulnerabilityMetrics as(Table<?> alias) {
        return new VulnerabilityMetrics(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public VulnerabilityMetrics rename(String name) {
        return new VulnerabilityMetrics(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public VulnerabilityMetrics rename(Name name) {
        return new VulnerabilityMetrics(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public VulnerabilityMetrics rename(Table<?> name) {
        return new VulnerabilityMetrics(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public VulnerabilityMetrics where(Condition condition) {
        return new VulnerabilityMetrics(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public VulnerabilityMetrics where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public VulnerabilityMetrics where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public VulnerabilityMetrics where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public VulnerabilityMetrics where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public VulnerabilityMetrics where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public VulnerabilityMetrics where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public VulnerabilityMetrics where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public VulnerabilityMetrics whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public VulnerabilityMetrics whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
