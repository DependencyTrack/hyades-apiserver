/*
 * This file is generated by jOOQ.
 */
package org.dependencytrack.persistence.jooq.generated.tables;


import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.dependencytrack.persistence.jooq.generated.DefaultSchema;
import org.dependencytrack.persistence.jooq.generated.Keys;
import org.dependencytrack.persistence.jooq.generated.tables.LdapUsersPermissions.LdapUsersPermissionsPath;
import org.dependencytrack.persistence.jooq.generated.tables.LdapUsersTeams.LdapUsersTeamsPath;
import org.dependencytrack.persistence.jooq.generated.tables.Permission.PermissionPath;
import org.dependencytrack.persistence.jooq.generated.tables.Team.TeamPath;
import org.dependencytrack.persistence.jooq.generated.tables.UserProjectEffectivePermissions.UserProjectEffectivePermissionsPath;
import org.dependencytrack.persistence.jooq.generated.tables.records.LdapUserRecord;
import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class LdapUser extends TableImpl<LdapUserRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>LDAPUSER</code>
     */
    public static final LdapUser LDAPUSER = new LdapUser();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<LdapUserRecord> getRecordType() {
        return LdapUserRecord.class;
    }

    /**
     * The column <code>LDAPUSER.ID</code>.
     */
    public final TableField<LdapUserRecord, Long> id = createField(DSL.name("ID"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>LDAPUSER.DN</code>.
     */
    public final TableField<LdapUserRecord, String> dn = createField(DSL.name("DN"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>LDAPUSER.EMAIL</code>.
     */
    public final TableField<LdapUserRecord, String> email = createField(DSL.name("EMAIL"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>LDAPUSER.USERNAME</code>.
     */
    public final TableField<LdapUserRecord, String> userName = createField(DSL.name("USERNAME"), SQLDataType.VARCHAR(255), this, "");

    private LdapUser(Name alias, Table<LdapUserRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private LdapUser(Name alias, Table<LdapUserRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>LDAPUSER</code> table reference
     */
    public LdapUser(String alias) {
        this(DSL.name(alias), LDAPUSER);
    }

    /**
     * Create an aliased <code>LDAPUSER</code> table reference
     */
    public LdapUser(Name alias) {
        this(alias, LDAPUSER);
    }

    /**
     * Create a <code>LDAPUSER</code> table reference
     */
    public LdapUser() {
        this(DSL.name("LDAPUSER"), null);
    }

    public <O extends Record> LdapUser(Table<O> path, ForeignKey<O, LdapUserRecord> childPath, InverseForeignKey<O, LdapUserRecord> parentPath) {
        super(path, childPath, parentPath, LDAPUSER);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class LdapUserPath extends LdapUser implements Path<LdapUserRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> LdapUserPath(Table<O> path, ForeignKey<O, LdapUserRecord> childPath, InverseForeignKey<O, LdapUserRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private LdapUserPath(Name alias, Table<LdapUserRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public LdapUserPath as(String alias) {
            return new LdapUserPath(DSL.name(alias), this);
        }

        @Override
        public LdapUserPath as(Name alias) {
            return new LdapUserPath(alias, this);
        }

        @Override
        public LdapUserPath as(Table<?> alias) {
            return new LdapUserPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public Identity<LdapUserRecord, Long> getIdentity() {
        return (Identity<LdapUserRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<LdapUserRecord> getPrimaryKey() {
        return Keys.LDAPUSER_PK;
    }

    @Override
    public List<UniqueKey<LdapUserRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.LDAPUSER_USERNAME_IDX);
    }

    private transient LdapUsersPermissionsPath _ldapUsersPermissions;

    /**
     * Get the implicit to-many join path to the
     * <code>LDAPUSERS_PERMISSIONS</code> table
     */
    public LdapUsersPermissionsPath ldapUsersPermissions() {
        if (_ldapUsersPermissions == null)
            _ldapUsersPermissions = new LdapUsersPermissionsPath(this, null, Keys.LDAPUSERS_PERMISSIONS_LDAPUSER_FK.getInverseKey());

        return _ldapUsersPermissions;
    }

    private transient LdapUsersTeamsPath _ldapUsersTeams;

    /**
     * Get the implicit to-many join path to the <code>LDAPUSERS_TEAMS</code>
     * table
     */
    public LdapUsersTeamsPath ldapUsersTeams() {
        if (_ldapUsersTeams == null)
            _ldapUsersTeams = new LdapUsersTeamsPath(this, null, Keys.LDAPUSERS_TEAMS_LDAPUSER_FK.getInverseKey());

        return _ldapUsersTeams;
    }

    private transient UserProjectEffectivePermissionsPath _userProjectEffectivePermissions;

    /**
     * Get the implicit to-many join path to the
     * <code>USER_PROJECT_EFFECTIVE_PERMISSIONS</code> table
     */
    public UserProjectEffectivePermissionsPath userProjectEffectivePermissions() {
        if (_userProjectEffectivePermissions == null)
            _userProjectEffectivePermissions = new UserProjectEffectivePermissionsPath(this, null, Keys.USER_PROJECT_EFFECTIVE_PERMISSIONS_LDAPUSER_FK.getInverseKey());

        return _userProjectEffectivePermissions;
    }

    /**
     * Get the implicit many-to-many join path to the <code>PERMISSION</code>
     * table
     */
    public PermissionPath permission() {
        return ldapUsersPermissions().permission();
    }

    /**
     * Get the implicit many-to-many join path to the <code>TEAM</code> table
     */
    public TeamPath team() {
        return ldapUsersTeams().team();
    }

    @Override
    public LdapUser as(String alias) {
        return new LdapUser(DSL.name(alias), this);
    }

    @Override
    public LdapUser as(Name alias) {
        return new LdapUser(alias, this);
    }

    @Override
    public LdapUser as(Table<?> alias) {
        return new LdapUser(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public LdapUser rename(String name) {
        return new LdapUser(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public LdapUser rename(Name name) {
        return new LdapUser(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public LdapUser rename(Table<?> name) {
        return new LdapUser(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public LdapUser where(Condition condition) {
        return new LdapUser(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public LdapUser where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public LdapUser where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public LdapUser where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public LdapUser where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public LdapUser where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public LdapUser where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public LdapUser where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public LdapUser whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public LdapUser whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
