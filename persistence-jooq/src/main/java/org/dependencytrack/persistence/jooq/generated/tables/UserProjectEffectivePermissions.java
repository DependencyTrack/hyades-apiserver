/*
 * This file is generated by jOOQ.
 */
package org.dependencytrack.persistence.jooq.generated.tables;


import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.dependencytrack.persistence.jooq.generated.Indexes;
import org.dependencytrack.persistence.jooq.generated.Keys;
import org.dependencytrack.persistence.jooq.generated.Public;
import org.dependencytrack.persistence.jooq.generated.tables.LdapUser.LdapuserPath;
import org.dependencytrack.persistence.jooq.generated.tables.ManagedUser.ManageduserPath;
import org.dependencytrack.persistence.jooq.generated.tables.OidcUser.OidcuserPath;
import org.dependencytrack.persistence.jooq.generated.tables.Permission.PermissionPath;
import org.dependencytrack.persistence.jooq.generated.tables.Project.ProjectPath;
import org.dependencytrack.persistence.jooq.generated.tables.records.UserProjectEffectivePermissionsRecord;
import org.jooq.Check;
import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class UserProjectEffectivePermissions extends TableImpl<UserProjectEffectivePermissionsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of
     * <code>public.USER_PROJECT_EFFECTIVE_PERMISSIONS</code>
     */
    public static final UserProjectEffectivePermissions USER_PROJECT_EFFECTIVE_PERMISSIONS = new UserProjectEffectivePermissions();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<UserProjectEffectivePermissionsRecord> getRecordType() {
        return UserProjectEffectivePermissionsRecord.class;
    }

    /**
     * The column
     * <code>public.USER_PROJECT_EFFECTIVE_PERMISSIONS.LDAPUSER_ID</code>.
     */
    public final TableField<UserProjectEffectivePermissionsRecord, Long> LDAPUSER_ID = createField(DSL.name("LDAPUSER_ID"), SQLDataType.BIGINT, this, "");

    /**
     * The column
     * <code>public.USER_PROJECT_EFFECTIVE_PERMISSIONS.MANAGEDUSER_ID</code>.
     */
    public final TableField<UserProjectEffectivePermissionsRecord, Long> MANAGEDUSER_ID = createField(DSL.name("MANAGEDUSER_ID"), SQLDataType.BIGINT, this, "");

    /**
     * The column
     * <code>public.USER_PROJECT_EFFECTIVE_PERMISSIONS.OIDCUSER_ID</code>.
     */
    public final TableField<UserProjectEffectivePermissionsRecord, Long> OIDCUSER_ID = createField(DSL.name("OIDCUSER_ID"), SQLDataType.BIGINT, this, "");

    /**
     * The column
     * <code>public.USER_PROJECT_EFFECTIVE_PERMISSIONS.PROJECT_ID</code>.
     */
    public final TableField<UserProjectEffectivePermissionsRecord, Long> PROJECT_ID = createField(DSL.name("PROJECT_ID"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column
     * <code>public.USER_PROJECT_EFFECTIVE_PERMISSIONS.PERMISSION_ID</code>.
     */
    public final TableField<UserProjectEffectivePermissionsRecord, Long> PERMISSION_ID = createField(DSL.name("PERMISSION_ID"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column
     * <code>public.USER_PROJECT_EFFECTIVE_PERMISSIONS.PERMISSION_NAME</code>.
     */
    public final TableField<UserProjectEffectivePermissionsRecord, String> PERMISSION_NAME = createField(DSL.name("PERMISSION_NAME"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    private UserProjectEffectivePermissions(Name alias, Table<UserProjectEffectivePermissionsRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private UserProjectEffectivePermissions(Name alias, Table<UserProjectEffectivePermissionsRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.USER_PROJECT_EFFECTIVE_PERMISSIONS</code>
     * table reference
     */
    public UserProjectEffectivePermissions(String alias) {
        this(DSL.name(alias), USER_PROJECT_EFFECTIVE_PERMISSIONS);
    }

    /**
     * Create an aliased <code>public.USER_PROJECT_EFFECTIVE_PERMISSIONS</code>
     * table reference
     */
    public UserProjectEffectivePermissions(Name alias) {
        this(alias, USER_PROJECT_EFFECTIVE_PERMISSIONS);
    }

    /**
     * Create a <code>public.USER_PROJECT_EFFECTIVE_PERMISSIONS</code> table
     * reference
     */
    public UserProjectEffectivePermissions() {
        this(DSL.name("USER_PROJECT_EFFECTIVE_PERMISSIONS"), null);
    }

    public <O extends Record> UserProjectEffectivePermissions(Table<O> path, ForeignKey<O, UserProjectEffectivePermissionsRecord> childPath, InverseForeignKey<O, UserProjectEffectivePermissionsRecord> parentPath) {
        super(path, childPath, parentPath, USER_PROJECT_EFFECTIVE_PERMISSIONS);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class UserProjectEffectivePermissionsPath extends UserProjectEffectivePermissions implements Path<UserProjectEffectivePermissionsRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> UserProjectEffectivePermissionsPath(Table<O> path, ForeignKey<O, UserProjectEffectivePermissionsRecord> childPath, InverseForeignKey<O, UserProjectEffectivePermissionsRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private UserProjectEffectivePermissionsPath(Name alias, Table<UserProjectEffectivePermissionsRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public UserProjectEffectivePermissionsPath as(String alias) {
            return new UserProjectEffectivePermissionsPath(DSL.name(alias), this);
        }

        @Override
        public UserProjectEffectivePermissionsPath as(Name alias) {
            return new UserProjectEffectivePermissionsPath(alias, this);
        }

        @Override
        public UserProjectEffectivePermissionsPath as(Table<?> alias) {
            return new UserProjectEffectivePermissionsPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.USER_PROJECT_EFFECTIVE_PERMISSIONS_LDAPUSERS_IDX, Indexes.USER_PROJECT_EFFECTIVE_PERMISSIONS_MANAGEDUSERS_IDX, Indexes.USER_PROJECT_EFFECTIVE_PERMISSIONS_OIDCUSERS_IDX);
    }

    @Override
    public List<ForeignKey<UserProjectEffectivePermissionsRecord, ?>> getReferences() {
        return Arrays.asList(Keys.USER_PROJECT_EFFECTIVE_PERMISSIONS__USER_PROJECT_EFFECTIVE_PERMISSIONS_LDAPUSER_FK, Keys.USER_PROJECT_EFFECTIVE_PERMISSIONS__USER_PROJECT_EFFECTIVE_PERMISSIONS_MANAGEDUSER_FK, Keys.USER_PROJECT_EFFECTIVE_PERMISSIONS__USER_PROJECT_EFFECTIVE_PERMISSIONS_OIDCUSER_FK, Keys.USER_PROJECT_EFFECTIVE_PERMISSIONS__USER_PROJECT_EFFECTIVE_PERMISSIONS_PERMISSION_ID_FK, Keys.USER_PROJECT_EFFECTIVE_PERMISSIONS__USER_PROJECT_EFFECTIVE_PERMISSIONS_PERMISSION_NAME_FK, Keys.USER_PROJECT_EFFECTIVE_PERMISSIONS__USER_PROJECT_EFFECTIVE_PERMISSIONS_PROJECT_FK);
    }

    private transient LdapuserPath _ldapuser;

    /**
     * Get the implicit join path to the <code>public.LDAPUSER</code> table.
     */
    public LdapuserPath ldapuser() {
        if (_ldapuser == null)
            _ldapuser = new LdapuserPath(this, Keys.USER_PROJECT_EFFECTIVE_PERMISSIONS__USER_PROJECT_EFFECTIVE_PERMISSIONS_LDAPUSER_FK, null);

        return _ldapuser;
    }

    private transient ManageduserPath _manageduser;

    /**
     * Get the implicit join path to the <code>public.MANAGEDUSER</code> table.
     */
    public ManageduserPath manageduser() {
        if (_manageduser == null)
            _manageduser = new ManageduserPath(this, Keys.USER_PROJECT_EFFECTIVE_PERMISSIONS__USER_PROJECT_EFFECTIVE_PERMISSIONS_MANAGEDUSER_FK, null);

        return _manageduser;
    }

    private transient OidcuserPath _oidcuser;

    /**
     * Get the implicit join path to the <code>public.OIDCUSER</code> table.
     */
    public OidcuserPath oidcuser() {
        if (_oidcuser == null)
            _oidcuser = new OidcuserPath(this, Keys.USER_PROJECT_EFFECTIVE_PERMISSIONS__USER_PROJECT_EFFECTIVE_PERMISSIONS_OIDCUSER_FK, null);

        return _oidcuser;
    }

    private transient PermissionPath _userProjectEffectivePermissionsPermissionIdFk;

    /**
     * Get the implicit join path to the <code>public.PERMISSION</code> table,
     * via the <code>USER_PROJECT_EFFECTIVE_PERMISSIONS_PERMISSION_ID_FK</code>
     * key.
     */
    public PermissionPath userProjectEffectivePermissionsPermissionIdFk() {
        if (_userProjectEffectivePermissionsPermissionIdFk == null)
            _userProjectEffectivePermissionsPermissionIdFk = new PermissionPath(this, Keys.USER_PROJECT_EFFECTIVE_PERMISSIONS__USER_PROJECT_EFFECTIVE_PERMISSIONS_PERMISSION_ID_FK, null);

        return _userProjectEffectivePermissionsPermissionIdFk;
    }

    private transient PermissionPath _userProjectEffectivePermissionsPermissionNameFk;

    /**
     * Get the implicit join path to the <code>public.PERMISSION</code> table,
     * via the
     * <code>USER_PROJECT_EFFECTIVE_PERMISSIONS_PERMISSION_NAME_FK</code> key.
     */
    public PermissionPath userProjectEffectivePermissionsPermissionNameFk() {
        if (_userProjectEffectivePermissionsPermissionNameFk == null)
            _userProjectEffectivePermissionsPermissionNameFk = new PermissionPath(this, Keys.USER_PROJECT_EFFECTIVE_PERMISSIONS__USER_PROJECT_EFFECTIVE_PERMISSIONS_PERMISSION_NAME_FK, null);

        return _userProjectEffectivePermissionsPermissionNameFk;
    }

    private transient ProjectPath _project;

    /**
     * Get the implicit join path to the <code>public.PROJECT</code> table.
     */
    public ProjectPath project() {
        if (_project == null)
            _project = new ProjectPath(this, Keys.USER_PROJECT_EFFECTIVE_PERMISSIONS__USER_PROJECT_EFFECTIVE_PERMISSIONS_PROJECT_FK, null);

        return _project;
    }

    @Override
    public List<Check<UserProjectEffectivePermissionsRecord>> getChecks() {
        return Arrays.asList(
            Internal.createCheck(this, DSL.name("USER_PROJECT_EFFECTIVE_PERMISSIONS_check"), "((((((\"LDAPUSER_ID\" IS NOT NULL))::integer + ((\"MANAGEDUSER_ID\" IS NOT NULL))::integer) + ((\"OIDCUSER_ID\" IS NOT NULL))::integer) = 1))", true)
        );
    }

    @Override
    public UserProjectEffectivePermissions as(String alias) {
        return new UserProjectEffectivePermissions(DSL.name(alias), this);
    }

    @Override
    public UserProjectEffectivePermissions as(Name alias) {
        return new UserProjectEffectivePermissions(alias, this);
    }

    @Override
    public UserProjectEffectivePermissions as(Table<?> alias) {
        return new UserProjectEffectivePermissions(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public UserProjectEffectivePermissions rename(String name) {
        return new UserProjectEffectivePermissions(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public UserProjectEffectivePermissions rename(Name name) {
        return new UserProjectEffectivePermissions(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public UserProjectEffectivePermissions rename(Table<?> name) {
        return new UserProjectEffectivePermissions(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public UserProjectEffectivePermissions where(Condition condition) {
        return new UserProjectEffectivePermissions(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public UserProjectEffectivePermissions where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public UserProjectEffectivePermissions where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public UserProjectEffectivePermissions where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public UserProjectEffectivePermissions where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public UserProjectEffectivePermissions where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public UserProjectEffectivePermissions where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public UserProjectEffectivePermissions where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public UserProjectEffectivePermissions whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public UserProjectEffectivePermissions whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
