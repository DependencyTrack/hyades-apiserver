/*
 * This file is generated by jOOQ.
 */
package org.dependencytrack.persistence.jooq.generated.tables;


import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import javax.annotation.processing.Generated;

import org.dependencytrack.persistence.jooq.generated.DefaultSchema;
import org.dependencytrack.persistence.jooq.generated.Keys;
import org.dependencytrack.persistence.jooq.generated.tables.Permission.PermissionPath;
import org.dependencytrack.persistence.jooq.generated.tables.Project.ProjectPath;
import org.dependencytrack.persistence.jooq.generated.tables.User.UserPath;
import org.dependencytrack.persistence.jooq.generated.tables.records.UserProjectEffectivePermissionsRecord;
import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.20.4",
        "schema version:v5.6.0-28"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class UserProjectEffectivePermissions extends TableImpl<UserProjectEffectivePermissionsRecord> {

    private static final long serialVersionUID = 166918427;

    /**
     * The reference instance of <code>USER_PROJECT_EFFECTIVE_PERMISSIONS</code>
     */
    public static final UserProjectEffectivePermissions USER_PROJECT_EFFECTIVE_PERMISSIONS = new UserProjectEffectivePermissions();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<UserProjectEffectivePermissionsRecord> getRecordType() {
        return UserProjectEffectivePermissionsRecord.class;
    }

    /**
     * The column <code>USER_PROJECT_EFFECTIVE_PERMISSIONS.PROJECT_ID</code>.
     */
    public final TableField<UserProjectEffectivePermissionsRecord, Long> projectId = createField(DSL.name("PROJECT_ID"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>USER_PROJECT_EFFECTIVE_PERMISSIONS.USER_ID</code>.
     */
    public final TableField<UserProjectEffectivePermissionsRecord, Long> userId = createField(DSL.name("USER_ID"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>USER_PROJECT_EFFECTIVE_PERMISSIONS.PERMISSION_ID</code>.
     */
    public final TableField<UserProjectEffectivePermissionsRecord, Long> permissionId = createField(DSL.name("PERMISSION_ID"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column
     * <code>USER_PROJECT_EFFECTIVE_PERMISSIONS.PERMISSION_NAME</code>.
     */
    public final TableField<UserProjectEffectivePermissionsRecord, String> permissionName = createField(DSL.name("PERMISSION_NAME"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    private UserProjectEffectivePermissions(Name alias, Table<UserProjectEffectivePermissionsRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private UserProjectEffectivePermissions(Name alias, Table<UserProjectEffectivePermissionsRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>USER_PROJECT_EFFECTIVE_PERMISSIONS</code> table
     * reference
     */
    public UserProjectEffectivePermissions(String alias) {
        this(DSL.name(alias), USER_PROJECT_EFFECTIVE_PERMISSIONS);
    }

    /**
     * Create an aliased <code>USER_PROJECT_EFFECTIVE_PERMISSIONS</code> table
     * reference
     */
    public UserProjectEffectivePermissions(Name alias) {
        this(alias, USER_PROJECT_EFFECTIVE_PERMISSIONS);
    }

    /**
     * Create a <code>USER_PROJECT_EFFECTIVE_PERMISSIONS</code> table reference
     */
    public UserProjectEffectivePermissions() {
        this(DSL.name("USER_PROJECT_EFFECTIVE_PERMISSIONS"), null);
    }

    public <O extends Record> UserProjectEffectivePermissions(Table<O> path, ForeignKey<O, UserProjectEffectivePermissionsRecord> childPath, InverseForeignKey<O, UserProjectEffectivePermissionsRecord> parentPath) {
        super(path, childPath, parentPath, USER_PROJECT_EFFECTIVE_PERMISSIONS);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    @Generated(
        value = {
            "https://www.jooq.org",
            "jOOQ version:3.20.4",
            "schema version:v5.6.0-28"
        },
        comments = "This class is generated by jOOQ"
    )
    public static class UserProjectEffectivePermissionsPath extends UserProjectEffectivePermissions implements Path<UserProjectEffectivePermissionsRecord> {

        private static final long serialVersionUID = 166918427;
        public <O extends Record> UserProjectEffectivePermissionsPath(Table<O> path, ForeignKey<O, UserProjectEffectivePermissionsRecord> childPath, InverseForeignKey<O, UserProjectEffectivePermissionsRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private UserProjectEffectivePermissionsPath(Name alias, Table<UserProjectEffectivePermissionsRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public UserProjectEffectivePermissionsPath as(String alias) {
            return new UserProjectEffectivePermissionsPath(DSL.name(alias), this);
        }

        @Override
        public UserProjectEffectivePermissionsPath as(Name alias) {
            return new UserProjectEffectivePermissionsPath(alias, this);
        }

        @Override
        public UserProjectEffectivePermissionsPath as(Table<?> alias) {
            return new UserProjectEffectivePermissionsPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public UniqueKey<UserProjectEffectivePermissionsRecord> getPrimaryKey() {
        return Keys.USER_PROJECT_EFFECTIVE_PERMISSIONS_PK;
    }

    @Override
    public List<ForeignKey<UserProjectEffectivePermissionsRecord, ?>> getReferences() {
        return Arrays.asList(Keys.USER_PROJECT_EFFECTIVE_PERMISSIONS_PERMISSION_ID_FK, Keys.USER_PROJECT_EFFECTIVE_PERMISSIONS_PERMISSION_NAME_FK, Keys.USER_PROJECT_EFFECTIVE_PERMISSIONS_PROJECT_FK, Keys.USER_PROJECT_EFFECTIVE_PERMISSIONS_USER_FK);
    }

    private transient PermissionPath _permissionId;

    /**
     * Get the implicit join path to the <code>PERMISSION</code> table, via the
     * <code>USER_PROJECT_EFFECTIVE_PERMISSIONS_PERMISSION_ID_FK</code> key.
     */
    public PermissionPath permissionId() {
        if (_permissionId == null)
            _permissionId = new PermissionPath(this, Keys.USER_PROJECT_EFFECTIVE_PERMISSIONS_PERMISSION_ID_FK, null);

        return _permissionId;
    }

    private transient PermissionPath _permissionName;

    /**
     * Get the implicit join path to the <code>PERMISSION</code> table, via the
     * <code>USER_PROJECT_EFFECTIVE_PERMISSIONS_PERMISSION_NAME_FK</code> key.
     */
    public PermissionPath permissionName() {
        if (_permissionName == null)
            _permissionName = new PermissionPath(this, Keys.USER_PROJECT_EFFECTIVE_PERMISSIONS_PERMISSION_NAME_FK, null);

        return _permissionName;
    }

    private transient ProjectPath _project;

    /**
     * Get the implicit join path to the <code>PROJECT</code> table.
     */
    public ProjectPath project() {
        if (_project == null)
            _project = new ProjectPath(this, Keys.USER_PROJECT_EFFECTIVE_PERMISSIONS_PROJECT_FK, null);

        return _project;
    }

    private transient UserPath _user;

    /**
     * Get the implicit join path to the <code>USER</code> table.
     */
    public UserPath user() {
        if (_user == null)
            _user = new UserPath(this, Keys.USER_PROJECT_EFFECTIVE_PERMISSIONS_USER_FK, null);

        return _user;
    }

    @Override
    public UserProjectEffectivePermissions as(String alias) {
        return new UserProjectEffectivePermissions(DSL.name(alias), this);
    }

    @Override
    public UserProjectEffectivePermissions as(Name alias) {
        return new UserProjectEffectivePermissions(alias, this);
    }

    @Override
    public UserProjectEffectivePermissions as(Table<?> alias) {
        return new UserProjectEffectivePermissions(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public UserProjectEffectivePermissions rename(String name) {
        return new UserProjectEffectivePermissions(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public UserProjectEffectivePermissions rename(Name name) {
        return new UserProjectEffectivePermissions(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public UserProjectEffectivePermissions rename(Table<?> name) {
        return new UserProjectEffectivePermissions(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public UserProjectEffectivePermissions where(Condition condition) {
        return new UserProjectEffectivePermissions(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public UserProjectEffectivePermissions where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public UserProjectEffectivePermissions where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public UserProjectEffectivePermissions where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public UserProjectEffectivePermissions where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public UserProjectEffectivePermissions where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public UserProjectEffectivePermissions where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public UserProjectEffectivePermissions where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public UserProjectEffectivePermissions whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public UserProjectEffectivePermissions whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
