/*
 * This file is generated by jOOQ.
 */
package org.dependencytrack.persistence.jooq.generated.tables;


import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import javax.annotation.processing.Generated;

import org.dependencytrack.persistence.jooq.generated.DefaultSchema;
import org.dependencytrack.persistence.jooq.generated.Indexes;
import org.dependencytrack.persistence.jooq.generated.Keys;
import org.dependencytrack.persistence.jooq.generated.tables.Vulnerability.VulnerabilityPath;
import org.dependencytrack.persistence.jooq.generated.tables.VulnerableSoftware.VulnerableSoftwarePath;
import org.dependencytrack.persistence.jooq.generated.tables.records.VulnerableSoftwareVulnerabilitiesRecord;
import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.20.4",
        "schema version:v5.6.0-28"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class VulnerableSoftwareVulnerabilities extends TableImpl<VulnerableSoftwareVulnerabilitiesRecord> {

    private static final long serialVersionUID = -36111600;

    /**
     * The reference instance of <code>VULNERABLESOFTWARE_VULNERABILITIES</code>
     */
    public static final VulnerableSoftwareVulnerabilities VULNERABLESOFTWARE_VULNERABILITIES = new VulnerableSoftwareVulnerabilities();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<VulnerableSoftwareVulnerabilitiesRecord> getRecordType() {
        return VulnerableSoftwareVulnerabilitiesRecord.class;
    }

    /**
     * The column
     * <code>VULNERABLESOFTWARE_VULNERABILITIES.VULNERABILITY_ID</code>.
     */
    public final TableField<VulnerableSoftwareVulnerabilitiesRecord, Long> vulnerabilityId = createField(DSL.name("VULNERABILITY_ID"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column
     * <code>VULNERABLESOFTWARE_VULNERABILITIES.VULNERABLESOFTWARE_ID</code>.
     */
    public final TableField<VulnerableSoftwareVulnerabilitiesRecord, Long> vulnerableSoftwareId = createField(DSL.name("VULNERABLESOFTWARE_ID"), SQLDataType.BIGINT.nullable(false), this, "");

    private VulnerableSoftwareVulnerabilities(Name alias, Table<VulnerableSoftwareVulnerabilitiesRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private VulnerableSoftwareVulnerabilities(Name alias, Table<VulnerableSoftwareVulnerabilitiesRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>VULNERABLESOFTWARE_VULNERABILITIES</code> table
     * reference
     */
    public VulnerableSoftwareVulnerabilities(String alias) {
        this(DSL.name(alias), VULNERABLESOFTWARE_VULNERABILITIES);
    }

    /**
     * Create an aliased <code>VULNERABLESOFTWARE_VULNERABILITIES</code> table
     * reference
     */
    public VulnerableSoftwareVulnerabilities(Name alias) {
        this(alias, VULNERABLESOFTWARE_VULNERABILITIES);
    }

    /**
     * Create a <code>VULNERABLESOFTWARE_VULNERABILITIES</code> table reference
     */
    public VulnerableSoftwareVulnerabilities() {
        this(DSL.name("VULNERABLESOFTWARE_VULNERABILITIES"), null);
    }

    public <O extends Record> VulnerableSoftwareVulnerabilities(Table<O> path, ForeignKey<O, VulnerableSoftwareVulnerabilitiesRecord> childPath, InverseForeignKey<O, VulnerableSoftwareVulnerabilitiesRecord> parentPath) {
        super(path, childPath, parentPath, VULNERABLESOFTWARE_VULNERABILITIES);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    @Generated(
        value = {
            "https://www.jooq.org",
            "jOOQ version:3.20.4",
            "schema version:v5.6.0-28"
        },
        comments = "This class is generated by jOOQ"
    )
    public static class VulnerableSoftwareVulnerabilitiesPath extends VulnerableSoftwareVulnerabilities implements Path<VulnerableSoftwareVulnerabilitiesRecord> {

        private static final long serialVersionUID = -36111600;
        public <O extends Record> VulnerableSoftwareVulnerabilitiesPath(Table<O> path, ForeignKey<O, VulnerableSoftwareVulnerabilitiesRecord> childPath, InverseForeignKey<O, VulnerableSoftwareVulnerabilitiesRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private VulnerableSoftwareVulnerabilitiesPath(Name alias, Table<VulnerableSoftwareVulnerabilitiesRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public VulnerableSoftwareVulnerabilitiesPath as(String alias) {
            return new VulnerableSoftwareVulnerabilitiesPath(DSL.name(alias), this);
        }

        @Override
        public VulnerableSoftwareVulnerabilitiesPath as(Name alias) {
            return new VulnerableSoftwareVulnerabilitiesPath(alias, this);
        }

        @Override
        public VulnerableSoftwareVulnerabilitiesPath as(Table<?> alias) {
            return new VulnerableSoftwareVulnerabilitiesPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.VULNERABLESOFTWARE_VULNERABILITIES_VULNERABILITY_ID_IDX, Indexes.VULNERABLESOFTWARE_VULNERABILITIES_VULNERABLESOFTWARE_ID_IDX);
    }

    @Override
    public List<ForeignKey<VulnerableSoftwareVulnerabilitiesRecord, ?>> getReferences() {
        return Arrays.asList(Keys.VULNERABLESOFTWARE_VULNERABILITIES_VULNERABILITY_FK, Keys.VULNERABLESOFTWARE_VULNERABILITIES_VULNERABLESOFTWARE_FK);
    }

    private transient VulnerabilityPath _vulnerability;

    /**
     * Get the implicit join path to the <code>VULNERABILITY</code> table.
     */
    public VulnerabilityPath vulnerability() {
        if (_vulnerability == null)
            _vulnerability = new VulnerabilityPath(this, Keys.VULNERABLESOFTWARE_VULNERABILITIES_VULNERABILITY_FK, null);

        return _vulnerability;
    }

    private transient VulnerableSoftwarePath _vulnerableSoftware;

    /**
     * Get the implicit join path to the <code>VULNERABLESOFTWARE</code> table.
     */
    public VulnerableSoftwarePath vulnerableSoftware() {
        if (_vulnerableSoftware == null)
            _vulnerableSoftware = new VulnerableSoftwarePath(this, Keys.VULNERABLESOFTWARE_VULNERABILITIES_VULNERABLESOFTWARE_FK, null);

        return _vulnerableSoftware;
    }

    @Override
    public VulnerableSoftwareVulnerabilities as(String alias) {
        return new VulnerableSoftwareVulnerabilities(DSL.name(alias), this);
    }

    @Override
    public VulnerableSoftwareVulnerabilities as(Name alias) {
        return new VulnerableSoftwareVulnerabilities(alias, this);
    }

    @Override
    public VulnerableSoftwareVulnerabilities as(Table<?> alias) {
        return new VulnerableSoftwareVulnerabilities(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public VulnerableSoftwareVulnerabilities rename(String name) {
        return new VulnerableSoftwareVulnerabilities(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public VulnerableSoftwareVulnerabilities rename(Name name) {
        return new VulnerableSoftwareVulnerabilities(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public VulnerableSoftwareVulnerabilities rename(Table<?> name) {
        return new VulnerableSoftwareVulnerabilities(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public VulnerableSoftwareVulnerabilities where(Condition condition) {
        return new VulnerableSoftwareVulnerabilities(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public VulnerableSoftwareVulnerabilities where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public VulnerableSoftwareVulnerabilities where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public VulnerableSoftwareVulnerabilities where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public VulnerableSoftwareVulnerabilities where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public VulnerableSoftwareVulnerabilities where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public VulnerableSoftwareVulnerabilities where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public VulnerableSoftwareVulnerabilities where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public VulnerableSoftwareVulnerabilities whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public VulnerableSoftwareVulnerabilities whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
