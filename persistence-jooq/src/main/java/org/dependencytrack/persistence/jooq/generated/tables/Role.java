/*
 * This file is generated by jOOQ.
 */
package org.dependencytrack.persistence.jooq.generated.tables;


import java.util.Arrays;
import java.util.Collection;
import java.util.List;
import java.util.UUID;

import javax.annotation.processing.Generated;

import org.dependencytrack.persistence.jooq.generated.DefaultSchema;
import org.dependencytrack.persistence.jooq.generated.Keys;
import org.dependencytrack.persistence.jooq.generated.tables.Permission.PermissionPath;
import org.dependencytrack.persistence.jooq.generated.tables.RolesPermissions.RolesPermissionsPath;
import org.dependencytrack.persistence.jooq.generated.tables.ProjectRoleBinding.UsersProjectsRolesPath;
import org.dependencytrack.persistence.jooq.generated.tables.records.RoleRecord;
import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.20.4",
        "schema version:v5.6.0-27"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Role extends TableImpl<RoleRecord> {

    private static final long serialVersionUID = -1832423169;

    /**
     * The reference instance of <code>ROLE</code>
     */
    public static final Role ROLE = new Role();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<RoleRecord> getRecordType() {
        return RoleRecord.class;
    }

    /**
     * The column <code>ROLE.ID</code>.
     */
    public final TableField<RoleRecord, Long> id = createField(DSL.name("ID"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>ROLE.NAME</code>.
     */
    public final TableField<RoleRecord, String> name = createField(DSL.name("NAME"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>ROLE.UUID</code>.
     */
    public final TableField<RoleRecord, UUID> uuid = createField(DSL.name("UUID"), SQLDataType.UUID.nullable(false), this, "");

    private Role(Name alias, Table<RoleRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Role(Name alias, Table<RoleRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>ROLE</code> table reference
     */
    public Role(String alias) {
        this(DSL.name(alias), ROLE);
    }

    /**
     * Create an aliased <code>ROLE</code> table reference
     */
    public Role(Name alias) {
        this(alias, ROLE);
    }

    /**
     * Create a <code>ROLE</code> table reference
     */
    public Role() {
        this(DSL.name("ROLE"), null);
    }

    public <O extends Record> Role(Table<O> path, ForeignKey<O, RoleRecord> childPath, InverseForeignKey<O, RoleRecord> parentPath) {
        super(path, childPath, parentPath, ROLE);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    @Generated(
        value = {
            "https://www.jooq.org",
            "jOOQ version:3.20.4",
            "schema version:v5.6.0-27"
        },
        comments = "This class is generated by jOOQ"
    )
    public static class RolePath extends Role implements Path<RoleRecord> {

        private static final long serialVersionUID = -1832423169;
        public <O extends Record> RolePath(Table<O> path, ForeignKey<O, RoleRecord> childPath, InverseForeignKey<O, RoleRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private RolePath(Name alias, Table<RoleRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public RolePath as(String alias) {
            return new RolePath(DSL.name(alias), this);
        }

        @Override
        public RolePath as(Name alias) {
            return new RolePath(alias, this);
        }

        @Override
        public RolePath as(Table<?> alias) {
            return new RolePath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public Identity<RoleRecord, Long> getIdentity() {
        return (Identity<RoleRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<RoleRecord> getPrimaryKey() {
        return Keys.ROLE_PK;
    }

    @Override
    public List<UniqueKey<RoleRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.ROLE_NAME_IDX, Keys.ROLE_UUID_IDX);
    }

    private transient RolesPermissionsPath _rolesPermissions;

    /**
     * Get the implicit to-many join path to the <code>ROLES_PERMISSIONS</code>
     * table
     */
    public RolesPermissionsPath rolesPermissions() {
        if (_rolesPermissions == null)
            _rolesPermissions = new RolesPermissionsPath(this, null, Keys.ROLES_PERMISSIONS_ROLE_FK.getInverseKey());

        return _rolesPermissions;
    }

    private transient UsersProjectsRolesPath _usersProjectsRoles;

    /**
     * Get the implicit to-many join path to the
     * <code>PROJECT_ROLE_BINDING</code> table
     */
    public UsersProjectsRolesPath usersProjectsRoles() {
        if (_usersProjectsRoles == null)
            _usersProjectsRoles = new UsersProjectsRolesPath(this, null, Keys.PROJECT_ROLE_BINDING_ROLE_FK.getInverseKey());

        return _usersProjectsRoles;
    }

    /**
     * Get the implicit many-to-many join path to the <code>PERMISSION</code>
     * table
     */
    public PermissionPath permission() {
        return rolesPermissions().permission();
    }

    @Override
    public Role as(String alias) {
        return new Role(DSL.name(alias), this);
    }

    @Override
    public Role as(Name alias) {
        return new Role(alias, this);
    }

    @Override
    public Role as(Table<?> alias) {
        return new Role(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Role rename(String name) {
        return new Role(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Role rename(Name name) {
        return new Role(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Role rename(Table<?> name) {
        return new Role(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Role where(Condition condition) {
        return new Role(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Role where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Role where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Role where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Role where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Role where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Role where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Role where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Role whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Role whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
