/*
 * This file is generated by jOOQ.
 */
package org.dependencytrack.persistence.jooq.generated.tables;


import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.dependencytrack.persistence.jooq.generated.Indexes;
import org.dependencytrack.persistence.jooq.generated.Keys;
import org.dependencytrack.persistence.jooq.generated.Public;
import org.dependencytrack.persistence.jooq.generated.tables.Analysis.AnalysisPath;
import org.dependencytrack.persistence.jooq.generated.tables.records.AnalysiscommentRecord;
import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Analysiscomment extends TableImpl<AnalysiscommentRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.ANALYSISCOMMENT</code>
     */
    public static final Analysiscomment ANALYSISCOMMENT = new Analysiscomment();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<AnalysiscommentRecord> getRecordType() {
        return AnalysiscommentRecord.class;
    }

    /**
     * The column <code>public.ANALYSISCOMMENT.ID</code>.
     */
    public final TableField<AnalysiscommentRecord, Long> ID = createField(DSL.name("ID"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.ANALYSISCOMMENT.ANALYSIS_ID</code>.
     */
    public final TableField<AnalysiscommentRecord, Long> ANALYSIS_ID = createField(DSL.name("ANALYSIS_ID"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.ANALYSISCOMMENT.COMMENT</code>.
     */
    public final TableField<AnalysiscommentRecord, String> COMMENT = createField(DSL.name("COMMENT"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.ANALYSISCOMMENT.COMMENTER</code>.
     */
    public final TableField<AnalysiscommentRecord, String> COMMENTER = createField(DSL.name("COMMENTER"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.ANALYSISCOMMENT.TIMESTAMP</code>.
     */
    public final TableField<AnalysiscommentRecord, OffsetDateTime> TIMESTAMP = createField(DSL.name("TIMESTAMP"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).nullable(false), this, "");

    private Analysiscomment(Name alias, Table<AnalysiscommentRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Analysiscomment(Name alias, Table<AnalysiscommentRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.ANALYSISCOMMENT</code> table reference
     */
    public Analysiscomment(String alias) {
        this(DSL.name(alias), ANALYSISCOMMENT);
    }

    /**
     * Create an aliased <code>public.ANALYSISCOMMENT</code> table reference
     */
    public Analysiscomment(Name alias) {
        this(alias, ANALYSISCOMMENT);
    }

    /**
     * Create a <code>public.ANALYSISCOMMENT</code> table reference
     */
    public Analysiscomment() {
        this(DSL.name("ANALYSISCOMMENT"), null);
    }

    public <O extends Record> Analysiscomment(Table<O> path, ForeignKey<O, AnalysiscommentRecord> childPath, InverseForeignKey<O, AnalysiscommentRecord> parentPath) {
        super(path, childPath, parentPath, ANALYSISCOMMENT);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class AnalysiscommentPath extends Analysiscomment implements Path<AnalysiscommentRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> AnalysiscommentPath(Table<O> path, ForeignKey<O, AnalysiscommentRecord> childPath, InverseForeignKey<O, AnalysiscommentRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private AnalysiscommentPath(Name alias, Table<AnalysiscommentRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public AnalysiscommentPath as(String alias) {
            return new AnalysiscommentPath(DSL.name(alias), this);
        }

        @Override
        public AnalysiscommentPath as(Name alias) {
            return new AnalysiscommentPath(alias, this);
        }

        @Override
        public AnalysiscommentPath as(Table<?> alias) {
            return new AnalysiscommentPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.ANALYSISCOMMENT_ANALYSIS_ID_IDX);
    }

    @Override
    public Identity<AnalysiscommentRecord, Long> getIdentity() {
        return (Identity<AnalysiscommentRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<AnalysiscommentRecord> getPrimaryKey() {
        return Keys.ANALYSISCOMMENT_PK;
    }

    @Override
    public List<ForeignKey<AnalysiscommentRecord, ?>> getReferences() {
        return Arrays.asList(Keys.ANALYSISCOMMENT__ANALYSISCOMMENT_ANALYSIS_FK);
    }

    private transient AnalysisPath _analysis;

    /**
     * Get the implicit join path to the <code>public.ANALYSIS</code> table.
     */
    public AnalysisPath analysis() {
        if (_analysis == null)
            _analysis = new AnalysisPath(this, Keys.ANALYSISCOMMENT__ANALYSISCOMMENT_ANALYSIS_FK, null);

        return _analysis;
    }

    @Override
    public Analysiscomment as(String alias) {
        return new Analysiscomment(DSL.name(alias), this);
    }

    @Override
    public Analysiscomment as(Name alias) {
        return new Analysiscomment(alias, this);
    }

    @Override
    public Analysiscomment as(Table<?> alias) {
        return new Analysiscomment(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Analysiscomment rename(String name) {
        return new Analysiscomment(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Analysiscomment rename(Name name) {
        return new Analysiscomment(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Analysiscomment rename(Table<?> name) {
        return new Analysiscomment(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Analysiscomment where(Condition condition) {
        return new Analysiscomment(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Analysiscomment where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Analysiscomment where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Analysiscomment where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Analysiscomment where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Analysiscomment where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Analysiscomment where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Analysiscomment where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Analysiscomment whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Analysiscomment whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
