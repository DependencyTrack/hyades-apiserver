/*
 * This file is generated by jOOQ.
 */
package org.dependencytrack.persistence.jooq.generated.tables;


import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.dependencytrack.persistence.jooq.generated.Keys;
import org.dependencytrack.persistence.jooq.generated.Public;
import org.dependencytrack.persistence.jooq.generated.tables.records.ConfigpropertyRecord;
import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Configproperty extends TableImpl<ConfigpropertyRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.CONFIGPROPERTY</code>
     */
    public static final Configproperty CONFIGPROPERTY = new Configproperty();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ConfigpropertyRecord> getRecordType() {
        return ConfigpropertyRecord.class;
    }

    /**
     * The column <code>public.CONFIGPROPERTY.ID</code>.
     */
    public final TableField<ConfigpropertyRecord, Long> ID = createField(DSL.name("ID"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.CONFIGPROPERTY.DESCRIPTION</code>.
     */
    public final TableField<ConfigpropertyRecord, String> DESCRIPTION = createField(DSL.name("DESCRIPTION"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.CONFIGPROPERTY.GROUPNAME</code>.
     */
    public final TableField<ConfigpropertyRecord, String> GROUPNAME = createField(DSL.name("GROUPNAME"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>public.CONFIGPROPERTY.PROPERTYNAME</code>.
     */
    public final TableField<ConfigpropertyRecord, String> PROPERTYNAME = createField(DSL.name("PROPERTYNAME"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>public.CONFIGPROPERTY.PROPERTYTYPE</code>.
     */
    public final TableField<ConfigpropertyRecord, String> PROPERTYTYPE = createField(DSL.name("PROPERTYTYPE"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>public.CONFIGPROPERTY.PROPERTYVALUE</code>.
     */
    public final TableField<ConfigpropertyRecord, String> PROPERTYVALUE = createField(DSL.name("PROPERTYVALUE"), SQLDataType.VARCHAR(1024), this, "");

    private Configproperty(Name alias, Table<ConfigpropertyRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Configproperty(Name alias, Table<ConfigpropertyRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.CONFIGPROPERTY</code> table reference
     */
    public Configproperty(String alias) {
        this(DSL.name(alias), CONFIGPROPERTY);
    }

    /**
     * Create an aliased <code>public.CONFIGPROPERTY</code> table reference
     */
    public Configproperty(Name alias) {
        this(alias, CONFIGPROPERTY);
    }

    /**
     * Create a <code>public.CONFIGPROPERTY</code> table reference
     */
    public Configproperty() {
        this(DSL.name("CONFIGPROPERTY"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public Identity<ConfigpropertyRecord, Long> getIdentity() {
        return (Identity<ConfigpropertyRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<ConfigpropertyRecord> getPrimaryKey() {
        return Keys.CONFIGPROPERTY_PK;
    }

    @Override
    public List<UniqueKey<ConfigpropertyRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.CONFIGPROPERTY_U1);
    }

    @Override
    public Configproperty as(String alias) {
        return new Configproperty(DSL.name(alias), this);
    }

    @Override
    public Configproperty as(Name alias) {
        return new Configproperty(alias, this);
    }

    @Override
    public Configproperty as(Table<?> alias) {
        return new Configproperty(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Configproperty rename(String name) {
        return new Configproperty(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Configproperty rename(Name name) {
        return new Configproperty(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Configproperty rename(Table<?> name) {
        return new Configproperty(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Configproperty where(Condition condition) {
        return new Configproperty(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Configproperty where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Configproperty where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Configproperty where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Configproperty where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Configproperty where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Configproperty where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Configproperty where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Configproperty whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Configproperty whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
