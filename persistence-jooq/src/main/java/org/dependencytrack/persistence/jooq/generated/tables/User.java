/*
 * This file is generated by jOOQ.
 */
package org.dependencytrack.persistence.jooq.generated.tables;


import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import javax.annotation.processing.Generated;

import org.dependencytrack.persistence.jooq.generated.DefaultSchema;
import org.dependencytrack.persistence.jooq.generated.Indexes;
import org.dependencytrack.persistence.jooq.generated.Keys;
import org.dependencytrack.persistence.jooq.generated.tables.Permission.PermissionPath;
import org.dependencytrack.persistence.jooq.generated.tables.Team.TeamPath;
import org.dependencytrack.persistence.jooq.generated.tables.UserProjectEffectivePermissions.UserProjectEffectivePermissionsPath;
import org.dependencytrack.persistence.jooq.generated.tables.UserProjectRoles.UserProjectRolesPath;
import org.dependencytrack.persistence.jooq.generated.tables.UsersPermissions.UsersPermissionsPath;
import org.dependencytrack.persistence.jooq.generated.tables.UsersTeams.UsersTeamsPath;
import org.dependencytrack.persistence.jooq.generated.tables.records.UserRecord;
import org.jooq.Check;
import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.20.4",
        "schema version:v5.6.0-28"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class User extends TableImpl<UserRecord> {

    private static final long serialVersionUID = -1214186122;

    /**
     * The reference instance of <code>USER</code>
     */
    public static final User USER = new User();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<UserRecord> getRecordType() {
        return UserRecord.class;
    }

    /**
     * The column <code>USER.ID</code>.
     */
    public final TableField<UserRecord, Long> id = createField(DSL.name("ID"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>USER.USERNAME</code>.
     */
    public final TableField<UserRecord, String> username = createField(DSL.name("USERNAME"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>USER.EMAIL</code>.
     */
    public final TableField<UserRecord, String> email = createField(DSL.name("EMAIL"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>USER.TYPE</code>.
     */
    public final TableField<UserRecord, String> type = createField(DSL.name("TYPE"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>USER.DN</code>.
     */
    public final TableField<UserRecord, String> dn = createField(DSL.name("DN"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>USER.FULLNAME</code>.
     */
    public final TableField<UserRecord, String> fullname = createField(DSL.name("FULLNAME"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>USER.FORCE_PASSWORD_CHANGE</code>.
     */
    public final TableField<UserRecord, Boolean> forcePasswordChange = createField(DSL.name("FORCE_PASSWORD_CHANGE"), SQLDataType.BOOLEAN, this, "");

    /**
     * The column <code>USER.SUSPENDED</code>.
     */
    public final TableField<UserRecord, Boolean> suspended = createField(DSL.name("SUSPENDED"), SQLDataType.BOOLEAN, this, "");

    /**
     * The column <code>USER.NON_EXPIRY_PASSWORD</code>.
     */
    public final TableField<UserRecord, Boolean> nonExpiryPassword = createField(DSL.name("NON_EXPIRY_PASSWORD"), SQLDataType.BOOLEAN, this, "");

    /**
     * The column <code>USER.LAST_PASSWORD_CHANGE</code>.
     */
    public final TableField<UserRecord, OffsetDateTime> lastPasswordChange = createField(DSL.name("LAST_PASSWORD_CHANGE"), SQLDataType.TIMESTAMPWITHTIMEZONE(6), this, "");

    /**
     * The column <code>USER.PASSWORD</code>.
     */
    public final TableField<UserRecord, String> password = createField(DSL.name("PASSWORD"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>USER.SUBJECT_IDENTIFIER</code>.
     */
    public final TableField<UserRecord, String> subjectIdentifier = createField(DSL.name("SUBJECT_IDENTIFIER"), SQLDataType.CLOB, this, "");

    private User(Name alias, Table<UserRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private User(Name alias, Table<UserRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>USER</code> table reference
     */
    public User(String alias) {
        this(DSL.name(alias), USER);
    }

    /**
     * Create an aliased <code>USER</code> table reference
     */
    public User(Name alias) {
        this(alias, USER);
    }

    /**
     * Create a <code>USER</code> table reference
     */
    public User() {
        this(DSL.name("USER"), null);
    }

    public <O extends Record> User(Table<O> path, ForeignKey<O, UserRecord> childPath, InverseForeignKey<O, UserRecord> parentPath) {
        super(path, childPath, parentPath, USER);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    @Generated(
        value = {
            "https://www.jooq.org",
            "jOOQ version:3.20.4",
            "schema version:v5.6.0-28"
        },
        comments = "This class is generated by jOOQ"
    )
    public static class UserPath extends User implements Path<UserRecord> {

        private static final long serialVersionUID = -1214186122;
        public <O extends Record> UserPath(Table<O> path, ForeignKey<O, UserRecord> childPath, InverseForeignKey<O, UserRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private UserPath(Name alias, Table<UserRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public UserPath as(String alias) {
            return new UserPath(DSL.name(alias), this);
        }

        @Override
        public UserPath as(Name alias) {
            return new UserPath(alias, this);
        }

        @Override
        public UserPath as(Table<?> alias) {
            return new UserPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.USER_USERNAME_IDX);
    }

    @Override
    public Identity<UserRecord, Long> getIdentity() {
        return (Identity<UserRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<UserRecord> getPrimaryKey() {
        return Keys.USER_PK;
    }

    private transient UserProjectEffectivePermissionsPath _userProjectEffectivePermissions;

    /**
     * Get the implicit to-many join path to the
     * <code>USER_PROJECT_EFFECTIVE_PERMISSIONS</code> table
     */
    public UserProjectEffectivePermissionsPath userProjectEffectivePermissions() {
        if (_userProjectEffectivePermissions == null)
            _userProjectEffectivePermissions = new UserProjectEffectivePermissionsPath(this, null, Keys.USER_PROJECT_EFFECTIVE_PERMISSIONS_USER_FK.getInverseKey());

        return _userProjectEffectivePermissions;
    }

    private transient UserProjectRolesPath _userProjectRoles;

    /**
     * Get the implicit to-many join path to the <code>USER_PROJECT_ROLES</code>
     * table
     */
    public UserProjectRolesPath userProjectRoles() {
        if (_userProjectRoles == null)
            _userProjectRoles = new UserProjectRolesPath(this, null, Keys.USER_PROJECT_ROLES_USER_FK.getInverseKey());

        return _userProjectRoles;
    }

    private transient UsersPermissionsPath _usersPermissions;

    /**
     * Get the implicit to-many join path to the <code>USERS_PERMISSIONS</code>
     * table
     */
    public UsersPermissionsPath usersPermissions() {
        if (_usersPermissions == null)
            _usersPermissions = new UsersPermissionsPath(this, null, Keys.USERS_PERMISSIONS_USER_FK.getInverseKey());

        return _usersPermissions;
    }

    private transient UsersTeamsPath _usersTeams;

    /**
     * Get the implicit to-many join path to the <code>USERS_TEAMS</code> table
     */
    public UsersTeamsPath usersTeams() {
        if (_usersTeams == null)
            _usersTeams = new UsersTeamsPath(this, null, Keys.USERS_TEAMS_USER_FK.getInverseKey());

        return _usersTeams;
    }

    /**
     * Get the implicit many-to-many join path to the <code>PERMISSION</code>
     * table
     */
    public PermissionPath permission() {
        return usersPermissions().permission();
    }

    /**
     * Get the implicit many-to-many join path to the <code>TEAM</code> table
     */
    public TeamPath team() {
        return usersTeams().team();
    }

    @Override
    public List<Check<UserRecord>> getChecks() {
        return Arrays.asList(
            Internal.createCheck(this, DSL.name("user_ldap_check"), "((((\"TYPE\" = 'LDAP'::text) AND (\"DN\" IS NOT NULL)) OR ((\"TYPE\" <> 'LDAP'::text) AND (\"DN\" IS NULL))))", true),
            Internal.createCheck(this, DSL.name("user_managed_check"), "((((\"TYPE\" = 'MANAGED'::text) AND (\"FORCE_PASSWORD_CHANGE\" IS NOT NULL) AND (\"LAST_PASSWORD_CHANGE\" IS NOT NULL) AND (\"NON_EXPIRY_PASSWORD\" IS NOT NULL) AND (\"PASSWORD\" IS NOT NULL) AND (\"SUSPENDED\" IS NOT NULL)) OR ((\"TYPE\" <> 'MANAGED'::text) AND (\"FORCE_PASSWORD_CHANGE\" IS NULL) AND (\"FULLNAME\" IS NULL) AND (\"LAST_PASSWORD_CHANGE\" IS NULL) AND (\"NON_EXPIRY_PASSWORD\" IS NULL) AND (\"PASSWORD\" IS NULL) AND (\"SUSPENDED\" IS NULL))))", true),
            Internal.createCheck(this, DSL.name("user_oidc_check"), "(((\"TYPE\" = 'OIDC'::text) OR (\"SUBJECT_IDENTIFIER\" IS NULL)))", true),
            Internal.createCheck(this, DSL.name("user_type_check"), "((\"TYPE\" = ANY (ARRAY['MANAGED'::text, 'LDAP'::text, 'OIDC'::text])))", true)
        );
    }

    @Override
    public User as(String alias) {
        return new User(DSL.name(alias), this);
    }

    @Override
    public User as(Name alias) {
        return new User(alias, this);
    }

    @Override
    public User as(Table<?> alias) {
        return new User(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public User rename(String name) {
        return new User(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public User rename(Name name) {
        return new User(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public User rename(Table<?> name) {
        return new User(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public User where(Condition condition) {
        return new User(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public User where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public User where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public User where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public User where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public User where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public User where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public User where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public User whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public User whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
