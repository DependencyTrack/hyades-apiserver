/*
 * This file is generated by jOOQ.
 */
package org.dependencytrack.persistence.jooq.generated.tables.records;


import java.time.OffsetDateTime;

import org.dependencytrack.persistence.jooq.generated.tables.ManagedUser;
import org.jooq.Record1;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class ManagedUserRecord extends UpdatableRecordImpl<ManagedUserRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>public.MANAGEDUSER.ID</code>.
     */
    public void setId(Long value) {
        set(0, value);
    }

    /**
     * Getter for <code>public.MANAGEDUSER.ID</code>.
     */
    public Long getId() {
        return (Long) get(0);
    }

    /**
     * Setter for <code>public.MANAGEDUSER.EMAIL</code>.
     */
    public void setEmail(String value) {
        set(1, value);
    }

    /**
     * Getter for <code>public.MANAGEDUSER.EMAIL</code>.
     */
    public String getEmail() {
        return (String) get(1);
    }

    /**
     * Setter for <code>public.MANAGEDUSER.FORCE_PASSWORD_CHANGE</code>.
     */
    public void setForcePasswordChange(Boolean value) {
        set(2, value);
    }

    /**
     * Getter for <code>public.MANAGEDUSER.FORCE_PASSWORD_CHANGE</code>.
     */
    public Boolean getForcePasswordChange() {
        return (Boolean) get(2);
    }

    /**
     * Setter for <code>public.MANAGEDUSER.FULLNAME</code>.
     */
    public void setFullname(String value) {
        set(3, value);
    }

    /**
     * Getter for <code>public.MANAGEDUSER.FULLNAME</code>.
     */
    public String getFullname() {
        return (String) get(3);
    }

    /**
     * Setter for <code>public.MANAGEDUSER.LAST_PASSWORD_CHANGE</code>.
     */
    public void setLastPasswordChange(OffsetDateTime value) {
        set(4, value);
    }

    /**
     * Getter for <code>public.MANAGEDUSER.LAST_PASSWORD_CHANGE</code>.
     */
    public OffsetDateTime getLastPasswordChange() {
        return (OffsetDateTime) get(4);
    }

    /**
     * Setter for <code>public.MANAGEDUSER.NON_EXPIRY_PASSWORD</code>.
     */
    public void setNonExpiryPassword(Boolean value) {
        set(5, value);
    }

    /**
     * Getter for <code>public.MANAGEDUSER.NON_EXPIRY_PASSWORD</code>.
     */
    public Boolean getNonExpiryPassword() {
        return (Boolean) get(5);
    }

    /**
     * Setter for <code>public.MANAGEDUSER.PASSWORD</code>.
     */
    public void setPassword(String value) {
        set(6, value);
    }

    /**
     * Getter for <code>public.MANAGEDUSER.PASSWORD</code>.
     */
    public String getPassword() {
        return (String) get(6);
    }

    /**
     * Setter for <code>public.MANAGEDUSER.SUSPENDED</code>.
     */
    public void setSuspended(Boolean value) {
        set(7, value);
    }

    /**
     * Getter for <code>public.MANAGEDUSER.SUSPENDED</code>.
     */
    public Boolean getSuspended() {
        return (Boolean) get(7);
    }

    /**
     * Setter for <code>public.MANAGEDUSER.USERNAME</code>.
     */
    public void setUsername(String value) {
        set(8, value);
    }

    /**
     * Getter for <code>public.MANAGEDUSER.USERNAME</code>.
     */
    public String getUsername() {
        return (String) get(8);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Long> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached ManagedUserRecord
     */
    public ManagedUserRecord() {
        super(ManagedUser.MANAGEDUSER);
    }

    /**
     * Create a detached, initialised ManagedUserRecord
     */
    public ManagedUserRecord(Long id, String email, Boolean forcePasswordChange, String fullname, OffsetDateTime lastPasswordChange, Boolean nonExpiryPassword, String password, Boolean suspended, String username) {
        super(ManagedUser.MANAGEDUSER);

        setId(id);
        setEmail(email);
        setForcePasswordChange(forcePasswordChange);
        setFullname(fullname);
        setLastPasswordChange(lastPasswordChange);
        setNonExpiryPassword(nonExpiryPassword);
        setPassword(password);
        setSuspended(suspended);
        setUsername(username);
        resetTouchedOnNotNull();
    }
}
