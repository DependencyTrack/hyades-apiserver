/*
 * This file is generated by jOOQ.
 */
package org.dependencytrack.persistence.jooq.generated.tables;


import java.util.Arrays;
import java.util.Collection;
import java.util.List;
import java.util.UUID;

import javax.annotation.processing.Generated;

import org.dependencytrack.persistence.jooq.generated.DefaultSchema;
import org.dependencytrack.persistence.jooq.generated.Indexes;
import org.dependencytrack.persistence.jooq.generated.Keys;
import org.dependencytrack.persistence.jooq.generated.tables.NotificationPublisher.NotificationPublisherPath;
import org.dependencytrack.persistence.jooq.generated.tables.NotificationRuleProjects.NotificationRuleProjectsPath;
import org.dependencytrack.persistence.jooq.generated.tables.NotificationRuleTags.NotificationRuleTagsPath;
import org.dependencytrack.persistence.jooq.generated.tables.NotificationRuleTeams.NotificationRuleTeamsPath;
import org.dependencytrack.persistence.jooq.generated.tables.Tag.TagPath;
import org.dependencytrack.persistence.jooq.generated.tables.Team.TeamPath;
import org.dependencytrack.persistence.jooq.generated.tables.records.NotificationRuleRecord;
import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.20.4",
        "schema version:v5.6.0-28"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class NotificationRule extends TableImpl<NotificationRuleRecord> {

    private static final long serialVersionUID = -1237866188;

    /**
     * The reference instance of <code>NOTIFICATIONRULE</code>
     */
    public static final NotificationRule NOTIFICATIONRULE = new NotificationRule();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<NotificationRuleRecord> getRecordType() {
        return NotificationRuleRecord.class;
    }

    /**
     * The column <code>NOTIFICATIONRULE.ID</code>.
     */
    public final TableField<NotificationRuleRecord, Long> id = createField(DSL.name("ID"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>NOTIFICATIONRULE.ENABLED</code>.
     */
    public final TableField<NotificationRuleRecord, Boolean> enabled = createField(DSL.name("ENABLED"), SQLDataType.BOOLEAN.nullable(false), this, "");

    /**
     * The column <code>NOTIFICATIONRULE.MESSAGE</code>.
     */
    public final TableField<NotificationRuleRecord, String> message = createField(DSL.name("MESSAGE"), SQLDataType.VARCHAR(1024), this, "");

    /**
     * The column <code>NOTIFICATIONRULE.NAME</code>.
     */
    public final TableField<NotificationRuleRecord, String> name = createField(DSL.name("NAME"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>NOTIFICATIONRULE.NOTIFICATION_LEVEL</code>.
     */
    public final TableField<NotificationRuleRecord, String> notificationLevel = createField(DSL.name("NOTIFICATION_LEVEL"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>NOTIFICATIONRULE.NOTIFY_CHILDREN</code>.
     */
    public final TableField<NotificationRuleRecord, Boolean> notifyChildren = createField(DSL.name("NOTIFY_CHILDREN"), SQLDataType.BOOLEAN, this, "");

    /**
     * The column <code>NOTIFICATIONRULE.NOTIFY_ON</code>.
     */
    public final TableField<NotificationRuleRecord, String> notifyOn = createField(DSL.name("NOTIFY_ON"), SQLDataType.VARCHAR(1024), this, "");

    /**
     * The column <code>NOTIFICATIONRULE.PUBLISHER</code>.
     */
    public final TableField<NotificationRuleRecord, Long> publisher = createField(DSL.name("PUBLISHER"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>NOTIFICATIONRULE.PUBLISHER_CONFIG</code>.
     */
    public final TableField<NotificationRuleRecord, String> publisherConfig = createField(DSL.name("PUBLISHER_CONFIG"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>NOTIFICATIONRULE.SCOPE</code>.
     */
    public final TableField<NotificationRuleRecord, String> scope = createField(DSL.name("SCOPE"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>NOTIFICATIONRULE.UUID</code>.
     */
    public final TableField<NotificationRuleRecord, UUID> uuid = createField(DSL.name("UUID"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>NOTIFICATIONRULE.LOG_SUCCESSFUL_PUBLISH</code>.
     */
    public final TableField<NotificationRuleRecord, Boolean> logSuccessfulPublish = createField(DSL.name("LOG_SUCCESSFUL_PUBLISH"), SQLDataType.BOOLEAN, this, "");

    private NotificationRule(Name alias, Table<NotificationRuleRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private NotificationRule(Name alias, Table<NotificationRuleRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>NOTIFICATIONRULE</code> table reference
     */
    public NotificationRule(String alias) {
        this(DSL.name(alias), NOTIFICATIONRULE);
    }

    /**
     * Create an aliased <code>NOTIFICATIONRULE</code> table reference
     */
    public NotificationRule(Name alias) {
        this(alias, NOTIFICATIONRULE);
    }

    /**
     * Create a <code>NOTIFICATIONRULE</code> table reference
     */
    public NotificationRule() {
        this(DSL.name("NOTIFICATIONRULE"), null);
    }

    public <O extends Record> NotificationRule(Table<O> path, ForeignKey<O, NotificationRuleRecord> childPath, InverseForeignKey<O, NotificationRuleRecord> parentPath) {
        super(path, childPath, parentPath, NOTIFICATIONRULE);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    @Generated(
        value = {
            "https://www.jooq.org",
            "jOOQ version:3.20.4",
            "schema version:v5.6.0-28"
        },
        comments = "This class is generated by jOOQ"
    )
    public static class NotificationRulePath extends NotificationRule implements Path<NotificationRuleRecord> {

        private static final long serialVersionUID = -1237866188;
        public <O extends Record> NotificationRulePath(Table<O> path, ForeignKey<O, NotificationRuleRecord> childPath, InverseForeignKey<O, NotificationRuleRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private NotificationRulePath(Name alias, Table<NotificationRuleRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public NotificationRulePath as(String alias) {
            return new NotificationRulePath(DSL.name(alias), this);
        }

        @Override
        public NotificationRulePath as(Name alias) {
            return new NotificationRulePath(alias, this);
        }

        @Override
        public NotificationRulePath as(Table<?> alias) {
            return new NotificationRulePath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.NOTIFICATIONRULE_PUBLISHER_IDX);
    }

    @Override
    public Identity<NotificationRuleRecord, Long> getIdentity() {
        return (Identity<NotificationRuleRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<NotificationRuleRecord> getPrimaryKey() {
        return Keys.NOTIFICATIONRULE_PK;
    }

    @Override
    public List<UniqueKey<NotificationRuleRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.NOTIFICATIONRULE_UUID_IDX);
    }

    @Override
    public List<ForeignKey<NotificationRuleRecord, ?>> getReferences() {
        return Arrays.asList(Keys.NOTIFICATIONRULE_NOTIFICATIONPUBLISHER_FK);
    }

    private transient NotificationPublisherPath _notificationPublisher;

    /**
     * Get the implicit join path to the <code>NOTIFICATIONPUBLISHER</code>
     * table.
     */
    public NotificationPublisherPath notificationPublisher() {
        if (_notificationPublisher == null)
            _notificationPublisher = new NotificationPublisherPath(this, Keys.NOTIFICATIONRULE_NOTIFICATIONPUBLISHER_FK, null);

        return _notificationPublisher;
    }

    private transient NotificationRuleProjectsPath _notificationRuleProjects;

    /**
     * Get the implicit to-many join path to the
     * <code>NOTIFICATIONRULE_PROJECTS</code> table
     */
    public NotificationRuleProjectsPath notificationRuleProjects() {
        if (_notificationRuleProjects == null)
            _notificationRuleProjects = new NotificationRuleProjectsPath(this, null, Keys.NOTIFICATIONRULE_PROJECTS_NOTIFICATIONRULE_FK.getInverseKey());

        return _notificationRuleProjects;
    }

    private transient NotificationRuleTagsPath _notificationRuleTags;

    /**
     * Get the implicit to-many join path to the
     * <code>NOTIFICATIONRULE_TAGS</code> table
     */
    public NotificationRuleTagsPath notificationRuleTags() {
        if (_notificationRuleTags == null)
            _notificationRuleTags = new NotificationRuleTagsPath(this, null, Keys.NOTIFICATIONRULE_TAGS_NOTIFICATIONRULE_FK.getInverseKey());

        return _notificationRuleTags;
    }

    private transient NotificationRuleTeamsPath _notificationRuleTeams;

    /**
     * Get the implicit to-many join path to the
     * <code>NOTIFICATIONRULE_TEAMS</code> table
     */
    public NotificationRuleTeamsPath notificationRuleTeams() {
        if (_notificationRuleTeams == null)
            _notificationRuleTeams = new NotificationRuleTeamsPath(this, null, Keys.NOTIFICATIONRULE_TEAMS_NOTIFICATIONRULE_FK.getInverseKey());

        return _notificationRuleTeams;
    }

    /**
     * Get the implicit many-to-many join path to the <code>TAG</code> table
     */
    public TagPath tag() {
        return notificationRuleTags().tag();
    }

    /**
     * Get the implicit many-to-many join path to the <code>TEAM</code> table
     */
    public TeamPath team() {
        return notificationRuleTeams().team();
    }

    @Override
    public NotificationRule as(String alias) {
        return new NotificationRule(DSL.name(alias), this);
    }

    @Override
    public NotificationRule as(Name alias) {
        return new NotificationRule(alias, this);
    }

    @Override
    public NotificationRule as(Table<?> alias) {
        return new NotificationRule(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public NotificationRule rename(String name) {
        return new NotificationRule(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public NotificationRule rename(Name name) {
        return new NotificationRule(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public NotificationRule rename(Table<?> name) {
        return new NotificationRule(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public NotificationRule where(Condition condition) {
        return new NotificationRule(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public NotificationRule where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public NotificationRule where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public NotificationRule where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public NotificationRule where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public NotificationRule where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public NotificationRule where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public NotificationRule where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public NotificationRule whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public NotificationRule whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
