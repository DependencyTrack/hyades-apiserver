/*
 * This file is generated by jOOQ.
 */
package org.dependencytrack.persistence.jooq.generated.tables;


import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.dependencytrack.persistence.jooq.generated.Indexes;
import org.dependencytrack.persistence.jooq.generated.Keys;
import org.dependencytrack.persistence.jooq.generated.Public;
import org.dependencytrack.persistence.jooq.generated.tables.NotificationPublisher.NotificationpublisherPath;
import org.dependencytrack.persistence.jooq.generated.tables.NotificationRuleProjects.NotificationruleProjectsPath;
import org.dependencytrack.persistence.jooq.generated.tables.NotificationRuleTags.NotificationruleTagsPath;
import org.dependencytrack.persistence.jooq.generated.tables.NotificationRuleTeams.NotificationruleTeamsPath;
import org.dependencytrack.persistence.jooq.generated.tables.Team.TeamPath;
import org.dependencytrack.persistence.jooq.generated.tables.records.NotificationRuleRecord;
import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class NotificationRule extends TableImpl<NotificationRuleRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.NOTIFICATIONRULE</code>
     */
    public static final NotificationRule NOTIFICATIONRULE = new NotificationRule();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<NotificationRuleRecord> getRecordType() {
        return NotificationRuleRecord.class;
    }

    /**
     * The column <code>public.NOTIFICATIONRULE.ID</code>.
     */
    public final TableField<NotificationRuleRecord, Long> ID = createField(DSL.name("ID"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.NOTIFICATIONRULE.ENABLED</code>.
     */
    public final TableField<NotificationRuleRecord, Boolean> ENABLED = createField(DSL.name("ENABLED"), SQLDataType.BOOLEAN.nullable(false), this, "");

    /**
     * The column <code>public.NOTIFICATIONRULE.MESSAGE</code>.
     */
    public final TableField<NotificationRuleRecord, String> MESSAGE = createField(DSL.name("MESSAGE"), SQLDataType.VARCHAR(1024), this, "");

    /**
     * The column <code>public.NOTIFICATIONRULE.NAME</code>.
     */
    public final TableField<NotificationRuleRecord, String> NAME = createField(DSL.name("NAME"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>public.NOTIFICATIONRULE.NOTIFICATION_LEVEL</code>.
     */
    public final TableField<NotificationRuleRecord, String> NOTIFICATION_LEVEL = createField(DSL.name("NOTIFICATION_LEVEL"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.NOTIFICATIONRULE.NOTIFY_CHILDREN</code>.
     */
    public final TableField<NotificationRuleRecord, Boolean> NOTIFY_CHILDREN = createField(DSL.name("NOTIFY_CHILDREN"), SQLDataType.BOOLEAN, this, "");

    /**
     * The column <code>public.NOTIFICATIONRULE.NOTIFY_ON</code>.
     */
    public final TableField<NotificationRuleRecord, String> NOTIFY_ON = createField(DSL.name("NOTIFY_ON"), SQLDataType.VARCHAR(1024), this, "");

    /**
     * The column <code>public.NOTIFICATIONRULE.PUBLISHER</code>.
     */
    public final TableField<NotificationRuleRecord, Long> PUBLISHER = createField(DSL.name("PUBLISHER"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>public.NOTIFICATIONRULE.PUBLISHER_CONFIG</code>.
     */
    public final TableField<NotificationRuleRecord, String> PUBLISHER_CONFIG = createField(DSL.name("PUBLISHER_CONFIG"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.NOTIFICATIONRULE.SCOPE</code>.
     */
    public final TableField<NotificationRuleRecord, String> SCOPE = createField(DSL.name("SCOPE"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>public.NOTIFICATIONRULE.UUID</code>.
     */
    public final TableField<NotificationRuleRecord, java.util.UUID> UUID = createField(DSL.name("UUID"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.NOTIFICATIONRULE.LOG_SUCCESSFUL_PUBLISH</code>.
     */
    public final TableField<NotificationRuleRecord, Boolean> LOG_SUCCESSFUL_PUBLISH = createField(DSL.name("LOG_SUCCESSFUL_PUBLISH"), SQLDataType.BOOLEAN, this, "");

    private NotificationRule(Name alias, Table<NotificationRuleRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private NotificationRule(Name alias, Table<NotificationRuleRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.NOTIFICATIONRULE</code> table reference
     */
    public NotificationRule(String alias) {
        this(DSL.name(alias), NOTIFICATIONRULE);
    }

    /**
     * Create an aliased <code>public.NOTIFICATIONRULE</code> table reference
     */
    public NotificationRule(Name alias) {
        this(alias, NOTIFICATIONRULE);
    }

    /**
     * Create a <code>public.NOTIFICATIONRULE</code> table reference
     */
    public NotificationRule() {
        this(DSL.name("NOTIFICATIONRULE"), null);
    }

    public <O extends Record> NotificationRule(Table<O> path, ForeignKey<O, NotificationRuleRecord> childPath, InverseForeignKey<O, NotificationRuleRecord> parentPath) {
        super(path, childPath, parentPath, NOTIFICATIONRULE);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class NotificationrulePath extends NotificationRule implements Path<NotificationRuleRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> NotificationrulePath(Table<O> path, ForeignKey<O, NotificationRuleRecord> childPath, InverseForeignKey<O, NotificationRuleRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private NotificationrulePath(Name alias, Table<NotificationRuleRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public NotificationrulePath as(String alias) {
            return new NotificationrulePath(DSL.name(alias), this);
        }

        @Override
        public NotificationrulePath as(Name alias) {
            return new NotificationrulePath(alias, this);
        }

        @Override
        public NotificationrulePath as(Table<?> alias) {
            return new NotificationrulePath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.NOTIFICATIONRULE_PUBLISHER_IDX);
    }

    @Override
    public Identity<NotificationRuleRecord, Long> getIdentity() {
        return (Identity<NotificationRuleRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<NotificationRuleRecord> getPrimaryKey() {
        return Keys.NOTIFICATIONRULE_PK;
    }

    @Override
    public List<UniqueKey<NotificationRuleRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.NOTIFICATIONRULE_UUID_IDX);
    }

    @Override
    public List<ForeignKey<NotificationRuleRecord, ?>> getReferences() {
        return Arrays.asList(Keys.NOTIFICATIONRULE__NOTIFICATIONRULE_NOTIFICATIONPUBLISHER_FK);
    }

    private transient NotificationpublisherPath _notificationpublisher;

    /**
     * Get the implicit join path to the
     * <code>public.NOTIFICATIONPUBLISHER</code> table.
     */
    public NotificationpublisherPath notificationpublisher() {
        if (_notificationpublisher == null)
            _notificationpublisher = new NotificationpublisherPath(this, Keys.NOTIFICATIONRULE__NOTIFICATIONRULE_NOTIFICATIONPUBLISHER_FK, null);

        return _notificationpublisher;
    }

    private transient NotificationruleProjectsPath _notificationruleProjects;

    /**
     * Get the implicit to-many join path to the
     * <code>public.NOTIFICATIONRULE_PROJECTS</code> table
     */
    public NotificationruleProjectsPath notificationruleProjects() {
        if (_notificationruleProjects == null)
            _notificationruleProjects = new NotificationruleProjectsPath(this, null, Keys.NOTIFICATIONRULE_PROJECTS__NOTIFICATIONRULE_PROJECTS_NOTIFICATIONRULE_FK.getInverseKey());

        return _notificationruleProjects;
    }

    private transient NotificationruleTagsPath _notificationruleTags;

    /**
     * Get the implicit to-many join path to the
     * <code>public.NOTIFICATIONRULE_TAGS</code> table
     */
    public NotificationruleTagsPath notificationruleTags() {
        if (_notificationruleTags == null)
            _notificationruleTags = new NotificationruleTagsPath(this, null, Keys.NOTIFICATIONRULE_TAGS__NOTIFICATIONRULE_TAGS_NOTIFICATIONRULE_FK.getInverseKey());

        return _notificationruleTags;
    }

    private transient NotificationruleTeamsPath _notificationruleTeams;

    /**
     * Get the implicit to-many join path to the
     * <code>public.NOTIFICATIONRULE_TEAMS</code> table
     */
    public NotificationruleTeamsPath notificationruleTeams() {
        if (_notificationruleTeams == null)
            _notificationruleTeams = new NotificationruleTeamsPath(this, null, Keys.NOTIFICATIONRULE_TEAMS__NOTIFICATIONRULE_TEAMS_NOTIFICATIONRULE_FK.getInverseKey());

        return _notificationruleTeams;
    }

    /**
     * Get the implicit many-to-many join path to the <code>public.TEAM</code>
     * table
     */
    public TeamPath team() {
        return notificationruleTeams().team();
    }

    @Override
    public NotificationRule as(String alias) {
        return new NotificationRule(DSL.name(alias), this);
    }

    @Override
    public NotificationRule as(Name alias) {
        return new NotificationRule(alias, this);
    }

    @Override
    public NotificationRule as(Table<?> alias) {
        return new NotificationRule(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public NotificationRule rename(String name) {
        return new NotificationRule(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public NotificationRule rename(Name name) {
        return new NotificationRule(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public NotificationRule rename(Table<?> name) {
        return new NotificationRule(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public NotificationRule where(Condition condition) {
        return new NotificationRule(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public NotificationRule where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public NotificationRule where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public NotificationRule where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public NotificationRule where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public NotificationRule where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public NotificationRule where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public NotificationRule where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public NotificationRule whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public NotificationRule whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
