/*
 * This file is generated by jOOQ.
 */
package org.dependencytrack.persistence.jooq.generated;


import org.dependencytrack.persistence.jooq.generated.tables.AffectedVersionAttribution;
import org.dependencytrack.persistence.jooq.generated.tables.Analysis;
import org.dependencytrack.persistence.jooq.generated.tables.AnalysisComment;
import org.dependencytrack.persistence.jooq.generated.tables.ApiKey;
import org.dependencytrack.persistence.jooq.generated.tables.ApiKeysTeams;
import org.dependencytrack.persistence.jooq.generated.tables.Bom;
import org.dependencytrack.persistence.jooq.generated.tables.Component;
import org.dependencytrack.persistence.jooq.generated.tables.ComponentOccurrence;
import org.dependencytrack.persistence.jooq.generated.tables.ComponentProperty;
import org.dependencytrack.persistence.jooq.generated.tables.ComponentsVulnerabilities;
import org.dependencytrack.persistence.jooq.generated.tables.ConfigProperty;
import org.dependencytrack.persistence.jooq.generated.tables.DependencyMetrics;
import org.dependencytrack.persistence.jooq.generated.tables.Epss;
import org.dependencytrack.persistence.jooq.generated.tables.FindingAttribution;
import org.dependencytrack.persistence.jooq.generated.tables.IntegrityAnalysis;
import org.dependencytrack.persistence.jooq.generated.tables.IntegrityMetaComponent;
import org.dependencytrack.persistence.jooq.generated.tables.LdapUser;
import org.dependencytrack.persistence.jooq.generated.tables.LdapUsersPermissions;
import org.dependencytrack.persistence.jooq.generated.tables.LdapUsersTeams;
import org.dependencytrack.persistence.jooq.generated.tables.License;
import org.dependencytrack.persistence.jooq.generated.tables.LicenseGroup;
import org.dependencytrack.persistence.jooq.generated.tables.LicenseGroupLicense;
import org.dependencytrack.persistence.jooq.generated.tables.ManagedUser;
import org.dependencytrack.persistence.jooq.generated.tables.ManagedUsersPermissions;
import org.dependencytrack.persistence.jooq.generated.tables.ManagedUsersTeams;
import org.dependencytrack.persistence.jooq.generated.tables.MappedLdapGroup;
import org.dependencytrack.persistence.jooq.generated.tables.MappedOidcGroup;
import org.dependencytrack.persistence.jooq.generated.tables.NotificationPublisher;
import org.dependencytrack.persistence.jooq.generated.tables.NotificationRule;
import org.dependencytrack.persistence.jooq.generated.tables.NotificationRuleProjects;
import org.dependencytrack.persistence.jooq.generated.tables.NotificationRuleTags;
import org.dependencytrack.persistence.jooq.generated.tables.NotificationRuleTeams;
import org.dependencytrack.persistence.jooq.generated.tables.OidcGroup;
import org.dependencytrack.persistence.jooq.generated.tables.OidcUser;
import org.dependencytrack.persistence.jooq.generated.tables.OidcUsersPermissions;
import org.dependencytrack.persistence.jooq.generated.tables.OidcUsersTeams;
import org.dependencytrack.persistence.jooq.generated.tables.Permission;
import org.dependencytrack.persistence.jooq.generated.tables.Policy;
import org.dependencytrack.persistence.jooq.generated.tables.PolicyCondition;
import org.dependencytrack.persistence.jooq.generated.tables.PolicyProjects;
import org.dependencytrack.persistence.jooq.generated.tables.PolicyTags;
import org.dependencytrack.persistence.jooq.generated.tables.PolicyViolation;
import org.dependencytrack.persistence.jooq.generated.tables.PortfolioMetrics;
import org.dependencytrack.persistence.jooq.generated.tables.Project;
import org.dependencytrack.persistence.jooq.generated.tables.ProjectAccessTeams;
import org.dependencytrack.persistence.jooq.generated.tables.ProjectHierarchy;
import org.dependencytrack.persistence.jooq.generated.tables.ProjectMetadata;
import org.dependencytrack.persistence.jooq.generated.tables.ProjectMetrics;
import org.dependencytrack.persistence.jooq.generated.tables.ProjectProperty;
import org.dependencytrack.persistence.jooq.generated.tables.ProjectsTags;
import org.dependencytrack.persistence.jooq.generated.tables.Repository;
import org.dependencytrack.persistence.jooq.generated.tables.RepositoryMetaComponent;
import org.dependencytrack.persistence.jooq.generated.tables.ServiceComponent;
import org.dependencytrack.persistence.jooq.generated.tables.ServiceComponentsVulnerabilities;
import org.dependencytrack.persistence.jooq.generated.tables.Tag;
import org.dependencytrack.persistence.jooq.generated.tables.Team;
import org.dependencytrack.persistence.jooq.generated.tables.TeamsPermissions;
import org.dependencytrack.persistence.jooq.generated.tables.UserProjectEffectivePermissions;
import org.dependencytrack.persistence.jooq.generated.tables.Vex;
import org.dependencytrack.persistence.jooq.generated.tables.ViolationAnalysis;
import org.dependencytrack.persistence.jooq.generated.tables.ViolationAnalysisComment;
import org.dependencytrack.persistence.jooq.generated.tables.VulnerabilitiesTags;
import org.dependencytrack.persistence.jooq.generated.tables.Vulnerability;
import org.dependencytrack.persistence.jooq.generated.tables.VulnerabilityAlias;
import org.dependencytrack.persistence.jooq.generated.tables.VulnerabilityMetrics;
import org.dependencytrack.persistence.jooq.generated.tables.VulnerabilityPolicy;
import org.dependencytrack.persistence.jooq.generated.tables.VulnerabilityPolicyBundle;
import org.dependencytrack.persistence.jooq.generated.tables.VulnerabilityScan;
import org.dependencytrack.persistence.jooq.generated.tables.VulnerableSoftware;
import org.dependencytrack.persistence.jooq.generated.tables.VulnerableSoftwareVulnerabilities;
import org.dependencytrack.persistence.jooq.generated.tables.WorkflowState;
import org.dependencytrack.persistence.jooq.generated.tables.records.AffectedVersionAttributionRecord;
import org.dependencytrack.persistence.jooq.generated.tables.records.AnalysisCommentRecord;
import org.dependencytrack.persistence.jooq.generated.tables.records.AnalysisRecord;
import org.dependencytrack.persistence.jooq.generated.tables.records.ApiKeyRecord;
import org.dependencytrack.persistence.jooq.generated.tables.records.ApiKeysTeamsRecord;
import org.dependencytrack.persistence.jooq.generated.tables.records.BomRecord;
import org.dependencytrack.persistence.jooq.generated.tables.records.ComponentOccurrenceRecord;
import org.dependencytrack.persistence.jooq.generated.tables.records.ComponentPropertyRecord;
import org.dependencytrack.persistence.jooq.generated.tables.records.ComponentRecord;
import org.dependencytrack.persistence.jooq.generated.tables.records.ComponentsVulnerabilitiesRecord;
import org.dependencytrack.persistence.jooq.generated.tables.records.ConfigPropertyRecord;
import org.dependencytrack.persistence.jooq.generated.tables.records.DependencyMetricsRecord;
import org.dependencytrack.persistence.jooq.generated.tables.records.EpssRecord;
import org.dependencytrack.persistence.jooq.generated.tables.records.FindingAttributionRecord;
import org.dependencytrack.persistence.jooq.generated.tables.records.IntegrityAnalysisRecord;
import org.dependencytrack.persistence.jooq.generated.tables.records.IntegrityMetaComponentRecord;
import org.dependencytrack.persistence.jooq.generated.tables.records.LdapUserRecord;
import org.dependencytrack.persistence.jooq.generated.tables.records.LdapUsersPermissionsRecord;
import org.dependencytrack.persistence.jooq.generated.tables.records.LdapUsersTeamsRecord;
import org.dependencytrack.persistence.jooq.generated.tables.records.LicenseGroupLicenseRecord;
import org.dependencytrack.persistence.jooq.generated.tables.records.LicenseGroupRecord;
import org.dependencytrack.persistence.jooq.generated.tables.records.LicenseRecord;
import org.dependencytrack.persistence.jooq.generated.tables.records.ManagedUserRecord;
import org.dependencytrack.persistence.jooq.generated.tables.records.ManagedUsersPermissionsRecord;
import org.dependencytrack.persistence.jooq.generated.tables.records.ManagedUsersTeamsRecord;
import org.dependencytrack.persistence.jooq.generated.tables.records.MappedLdapGroupRecord;
import org.dependencytrack.persistence.jooq.generated.tables.records.MappedOidcGroupRecord;
import org.dependencytrack.persistence.jooq.generated.tables.records.NotificationPublisherRecord;
import org.dependencytrack.persistence.jooq.generated.tables.records.NotificationRuleProjectsRecord;
import org.dependencytrack.persistence.jooq.generated.tables.records.NotificationRuleRecord;
import org.dependencytrack.persistence.jooq.generated.tables.records.NotificationRuleTagsRecord;
import org.dependencytrack.persistence.jooq.generated.tables.records.NotificationRuleTeamsRecord;
import org.dependencytrack.persistence.jooq.generated.tables.records.OidcGroupRecord;
import org.dependencytrack.persistence.jooq.generated.tables.records.OidcUserRecord;
import org.dependencytrack.persistence.jooq.generated.tables.records.OidcUsersPermissionsRecord;
import org.dependencytrack.persistence.jooq.generated.tables.records.OidcUsersTeamsRecord;
import org.dependencytrack.persistence.jooq.generated.tables.records.PermissionRecord;
import org.dependencytrack.persistence.jooq.generated.tables.records.PolicyConditionRecord;
import org.dependencytrack.persistence.jooq.generated.tables.records.PolicyProjectsRecord;
import org.dependencytrack.persistence.jooq.generated.tables.records.PolicyRecord;
import org.dependencytrack.persistence.jooq.generated.tables.records.PolicyTagsRecord;
import org.dependencytrack.persistence.jooq.generated.tables.records.PolicyViolationRecord;
import org.dependencytrack.persistence.jooq.generated.tables.records.PortfolioMetricsRecord;
import org.dependencytrack.persistence.jooq.generated.tables.records.ProjectAccessTeamsRecord;
import org.dependencytrack.persistence.jooq.generated.tables.records.ProjectHierarchyRecord;
import org.dependencytrack.persistence.jooq.generated.tables.records.ProjectMetadataRecord;
import org.dependencytrack.persistence.jooq.generated.tables.records.ProjectMetricsRecord;
import org.dependencytrack.persistence.jooq.generated.tables.records.ProjectPropertyRecord;
import org.dependencytrack.persistence.jooq.generated.tables.records.ProjectRecord;
import org.dependencytrack.persistence.jooq.generated.tables.records.ProjectsTagsRecord;
import org.dependencytrack.persistence.jooq.generated.tables.records.RepositoryMetaComponentRecord;
import org.dependencytrack.persistence.jooq.generated.tables.records.RepositoryRecord;
import org.dependencytrack.persistence.jooq.generated.tables.records.ServiceComponentRecord;
import org.dependencytrack.persistence.jooq.generated.tables.records.ServiceComponentsVulnerabilitiesRecord;
import org.dependencytrack.persistence.jooq.generated.tables.records.TagRecord;
import org.dependencytrack.persistence.jooq.generated.tables.records.TeamRecord;
import org.dependencytrack.persistence.jooq.generated.tables.records.TeamsPermissionsRecord;
import org.dependencytrack.persistence.jooq.generated.tables.records.UserProjectEffectivePermissionsRecord;
import org.dependencytrack.persistence.jooq.generated.tables.records.VexRecord;
import org.dependencytrack.persistence.jooq.generated.tables.records.ViolationAnalysisCommentRecord;
import org.dependencytrack.persistence.jooq.generated.tables.records.ViolationAnalysisRecord;
import org.dependencytrack.persistence.jooq.generated.tables.records.VulnerabilitiesTagsRecord;
import org.dependencytrack.persistence.jooq.generated.tables.records.VulnerabilityAliasRecord;
import org.dependencytrack.persistence.jooq.generated.tables.records.VulnerabilityMetricsRecord;
import org.dependencytrack.persistence.jooq.generated.tables.records.VulnerabilityPolicyBundleRecord;
import org.dependencytrack.persistence.jooq.generated.tables.records.VulnerabilityPolicyRecord;
import org.dependencytrack.persistence.jooq.generated.tables.records.VulnerabilityRecord;
import org.dependencytrack.persistence.jooq.generated.tables.records.VulnerabilityScanRecord;
import org.dependencytrack.persistence.jooq.generated.tables.records.VulnerableSoftwareRecord;
import org.dependencytrack.persistence.jooq.generated.tables.records.VulnerableSoftwareVulnerabilitiesRecord;
import org.dependencytrack.persistence.jooq.generated.tables.records.WorkflowStateRecord;
import org.jooq.ForeignKey;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;
import org.jooq.impl.QOM.ForeignKeyRule;


/**
 * A class modelling foreign key relationships and constraints of tables in the
 * default schema.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Keys {

    // -------------------------------------------------------------------------
    // UNIQUE and PRIMARY KEY definitions
    // -------------------------------------------------------------------------

    public static final UniqueKey<AffectedVersionAttributionRecord> AFFECTEDVERSIONATTRIBUTION_PK = Internal.createUniqueKey(AffectedVersionAttribution.AFFECTEDVERSIONATTRIBUTION, DSL.name("AFFECTEDVERSIONATTRIBUTION_PK"), new TableField[] { AffectedVersionAttribution.AFFECTEDVERSIONATTRIBUTION.ID }, true);
    public static final UniqueKey<AffectedVersionAttributionRecord> AFFECTEDVERSIONATTRIBUTION_UUID_IDX = Internal.createUniqueKey(AffectedVersionAttribution.AFFECTEDVERSIONATTRIBUTION, DSL.name("AFFECTEDVERSIONATTRIBUTION_UUID_IDX"), new TableField[] { AffectedVersionAttribution.AFFECTEDVERSIONATTRIBUTION.UUID }, true);
    public static final UniqueKey<AnalysisRecord> ANALYSIS_COMPOSITE_IDX = Internal.createUniqueKey(Analysis.ANALYSIS, DSL.name("ANALYSIS_COMPOSITE_IDX"), new TableField[] { Analysis.ANALYSIS.PROJECT_ID, Analysis.ANALYSIS.COMPONENT_ID, Analysis.ANALYSIS.VULNERABILITY_ID }, true);
    public static final UniqueKey<AnalysisRecord> ANALYSIS_PK = Internal.createUniqueKey(Analysis.ANALYSIS, DSL.name("ANALYSIS_PK"), new TableField[] { Analysis.ANALYSIS.ID }, true);
    public static final UniqueKey<AnalysisCommentRecord> ANALYSISCOMMENT_PK = Internal.createUniqueKey(AnalysisComment.ANALYSISCOMMENT, DSL.name("ANALYSISCOMMENT_PK"), new TableField[] { AnalysisComment.ANALYSISCOMMENT.ID }, true);
    public static final UniqueKey<ApiKeyRecord> APIKEY_PK = Internal.createUniqueKey(ApiKey.APIKEY, DSL.name("APIKEY_PK"), new TableField[] { ApiKey.APIKEY.ID }, true);
    public static final UniqueKey<ApiKeysTeamsRecord> APIKEYS_TEAMS_PK = Internal.createUniqueKey(ApiKeysTeams.APIKEYS_TEAMS, DSL.name("APIKEYS_TEAMS_PK"), new TableField[] { ApiKeysTeams.APIKEYS_TEAMS.TEAM_ID, ApiKeysTeams.APIKEYS_TEAMS.APIKEY_ID }, true);
    public static final UniqueKey<BomRecord> BOM_PK = Internal.createUniqueKey(Bom.BOM, DSL.name("BOM_PK"), new TableField[] { Bom.BOM.ID }, true);
    public static final UniqueKey<BomRecord> BOM_UUID_IDX = Internal.createUniqueKey(Bom.BOM, DSL.name("BOM_UUID_IDX"), new TableField[] { Bom.BOM.UUID }, true);
    public static final UniqueKey<ComponentRecord> COMPONENT_PK = Internal.createUniqueKey(Component.COMPONENT, DSL.name("COMPONENT_PK"), new TableField[] { Component.COMPONENT.ID }, true);
    public static final UniqueKey<ComponentRecord> COMPONENT_UUID_IDX = Internal.createUniqueKey(Component.COMPONENT, DSL.name("COMPONENT_UUID_IDX"), new TableField[] { Component.COMPONENT.UUID }, true);
    public static final UniqueKey<ComponentOccurrenceRecord> COMPONENT_OCCURRENCE_PK = Internal.createUniqueKey(ComponentOccurrence.COMPONENT_OCCURRENCE, DSL.name("COMPONENT_OCCURRENCE_PK"), new TableField[] { ComponentOccurrence.COMPONENT_OCCURRENCE.ID }, true);
    public static final UniqueKey<ComponentPropertyRecord> COMPONENT_PROPERTY_PK = Internal.createUniqueKey(ComponentProperty.COMPONENT_PROPERTY, DSL.name("COMPONENT_PROPERTY_PK"), new TableField[] { ComponentProperty.COMPONENT_PROPERTY.ID }, true);
    public static final UniqueKey<ConfigPropertyRecord> CONFIGPROPERTY_PK = Internal.createUniqueKey(ConfigProperty.CONFIGPROPERTY, DSL.name("CONFIGPROPERTY_PK"), new TableField[] { ConfigProperty.CONFIGPROPERTY.ID }, true);
    public static final UniqueKey<ConfigPropertyRecord> CONFIGPROPERTY_U1 = Internal.createUniqueKey(ConfigProperty.CONFIGPROPERTY, DSL.name("CONFIGPROPERTY_U1"), new TableField[] { ConfigProperty.CONFIGPROPERTY.GROUPNAME, ConfigProperty.CONFIGPROPERTY.PROPERTYNAME }, true);
    public static final UniqueKey<DependencyMetricsRecord> DEPENDENCYMETRICS_PK = Internal.createUniqueKey(DependencyMetrics.DEPENDENCYMETRICS, DSL.name("DEPENDENCYMETRICS_PK"), new TableField[] { DependencyMetrics.DEPENDENCYMETRICS.ID }, true);
    public static final UniqueKey<EpssRecord> EPSS_CVE_KEY = Internal.createUniqueKey(Epss.EPSS, DSL.name("EPSS_CVE_key"), new TableField[] { Epss.EPSS.CVE }, true);
    public static final UniqueKey<EpssRecord> EPSS_CVE_PK = Internal.createUniqueKey(Epss.EPSS, DSL.name("EPSS_CVE_PK"), new TableField[] { Epss.EPSS.ID }, true);
    public static final UniqueKey<FindingAttributionRecord> FINDINGATTRIBUTION_PK = Internal.createUniqueKey(FindingAttribution.FINDINGATTRIBUTION, DSL.name("FINDINGATTRIBUTION_PK"), new TableField[] { FindingAttribution.FINDINGATTRIBUTION.ID }, true);
    public static final UniqueKey<FindingAttributionRecord> FINDINGATTRIBUTION_UUID_IDX = Internal.createUniqueKey(FindingAttribution.FINDINGATTRIBUTION, DSL.name("FINDINGATTRIBUTION_UUID_IDX"), new TableField[] { FindingAttribution.FINDINGATTRIBUTION.UUID }, true);
    public static final UniqueKey<IntegrityAnalysisRecord> INTEGRITY_ANALYSIS_PK = Internal.createUniqueKey(IntegrityAnalysis.INTEGRITY_ANALYSIS, DSL.name("INTEGRITY_ANALYSIS_PK"), new TableField[] { IntegrityAnalysis.INTEGRITY_ANALYSIS.ID }, true);
    public static final UniqueKey<IntegrityMetaComponentRecord> INTEGRITY_META_COMPONENT_PK = Internal.createUniqueKey(IntegrityMetaComponent.INTEGRITY_META_COMPONENT, DSL.name("INTEGRITY_META_COMPONENT_PK"), new TableField[] { IntegrityMetaComponent.INTEGRITY_META_COMPONENT.ID }, true);
    public static final UniqueKey<LdapUserRecord> LDAPUSER_PK = Internal.createUniqueKey(LdapUser.LDAPUSER, DSL.name("LDAPUSER_PK"), new TableField[] { LdapUser.LDAPUSER.ID }, true);
    public static final UniqueKey<LdapUserRecord> LDAPUSER_USERNAME_IDX = Internal.createUniqueKey(LdapUser.LDAPUSER, DSL.name("LDAPUSER_USERNAME_IDX"), new TableField[] { LdapUser.LDAPUSER.USERNAME }, true);
    public static final UniqueKey<LdapUsersPermissionsRecord> LDAPUSERS_PERMISSIONS_PK = Internal.createUniqueKey(LdapUsersPermissions.LDAPUSERS_PERMISSIONS, DSL.name("LDAPUSERS_PERMISSIONS_PK"), new TableField[] { LdapUsersPermissions.LDAPUSERS_PERMISSIONS.LDAPUSER_ID, LdapUsersPermissions.LDAPUSERS_PERMISSIONS.PERMISSION_ID }, true);
    public static final UniqueKey<LdapUsersTeamsRecord> LDAPUSERS_TEAMS_PK = Internal.createUniqueKey(LdapUsersTeams.LDAPUSERS_TEAMS, DSL.name("LDAPUSERS_TEAMS_PK"), new TableField[] { LdapUsersTeams.LDAPUSERS_TEAMS.TEAM_ID, LdapUsersTeams.LDAPUSERS_TEAMS.LDAPUSER_ID }, true);
    public static final UniqueKey<LicenseRecord> LICENSE_PK = Internal.createUniqueKey(License.LICENSE, DSL.name("LICENSE_PK"), new TableField[] { License.LICENSE.ID }, true);
    public static final UniqueKey<LicenseRecord> LICENSE_UUID_IDX = Internal.createUniqueKey(License.LICENSE, DSL.name("LICENSE_UUID_IDX"), new TableField[] { License.LICENSE.UUID }, true);
    public static final UniqueKey<LicenseGroupRecord> LICENSEGROUP_PK = Internal.createUniqueKey(LicenseGroup.LICENSEGROUP, DSL.name("LICENSEGROUP_PK"), new TableField[] { LicenseGroup.LICENSEGROUP.ID }, true);
    public static final UniqueKey<LicenseGroupRecord> LICENSEGROUP_UUID_IDX = Internal.createUniqueKey(LicenseGroup.LICENSEGROUP, DSL.name("LICENSEGROUP_UUID_IDX"), new TableField[] { LicenseGroup.LICENSEGROUP.UUID }, true);
    public static final UniqueKey<ManagedUserRecord> MANAGEDUSER_PK = Internal.createUniqueKey(ManagedUser.MANAGEDUSER, DSL.name("MANAGEDUSER_PK"), new TableField[] { ManagedUser.MANAGEDUSER.ID }, true);
    public static final UniqueKey<ManagedUserRecord> MANAGEDUSER_USERNAME_IDX = Internal.createUniqueKey(ManagedUser.MANAGEDUSER, DSL.name("MANAGEDUSER_USERNAME_IDX"), new TableField[] { ManagedUser.MANAGEDUSER.USERNAME }, true);
    public static final UniqueKey<ManagedUsersPermissionsRecord> MANAGEDUSERS_PERMISSIONS_PK = Internal.createUniqueKey(ManagedUsersPermissions.MANAGEDUSERS_PERMISSIONS, DSL.name("MANAGEDUSERS_PERMISSIONS_PK"), new TableField[] { ManagedUsersPermissions.MANAGEDUSERS_PERMISSIONS.MANAGEDUSER_ID, ManagedUsersPermissions.MANAGEDUSERS_PERMISSIONS.PERMISSION_ID }, true);
    public static final UniqueKey<ManagedUsersTeamsRecord> MANAGEDUSERS_TEAMS_PK = Internal.createUniqueKey(ManagedUsersTeams.MANAGEDUSERS_TEAMS, DSL.name("MANAGEDUSERS_TEAMS_PK"), new TableField[] { ManagedUsersTeams.MANAGEDUSERS_TEAMS.TEAM_ID, ManagedUsersTeams.MANAGEDUSERS_TEAMS.MANAGEDUSER_ID }, true);
    public static final UniqueKey<MappedLdapGroupRecord> MAPPEDLDAPGROUP_PK = Internal.createUniqueKey(MappedLdapGroup.MAPPEDLDAPGROUP, DSL.name("MAPPEDLDAPGROUP_PK"), new TableField[] { MappedLdapGroup.MAPPEDLDAPGROUP.ID }, true);
    public static final UniqueKey<MappedLdapGroupRecord> MAPPEDLDAPGROUP_U1 = Internal.createUniqueKey(MappedLdapGroup.MAPPEDLDAPGROUP, DSL.name("MAPPEDLDAPGROUP_U1"), new TableField[] { MappedLdapGroup.MAPPEDLDAPGROUP.TEAM_ID, MappedLdapGroup.MAPPEDLDAPGROUP.DN }, true);
    public static final UniqueKey<MappedLdapGroupRecord> MAPPEDLDAPGROUP_UUID_IDX = Internal.createUniqueKey(MappedLdapGroup.MAPPEDLDAPGROUP, DSL.name("MAPPEDLDAPGROUP_UUID_IDX"), new TableField[] { MappedLdapGroup.MAPPEDLDAPGROUP.UUID }, true);
    public static final UniqueKey<MappedOidcGroupRecord> MAPPEDOIDCGROUP_PK = Internal.createUniqueKey(MappedOidcGroup.MAPPEDOIDCGROUP, DSL.name("MAPPEDOIDCGROUP_PK"), new TableField[] { MappedOidcGroup.MAPPEDOIDCGROUP.ID }, true);
    public static final UniqueKey<MappedOidcGroupRecord> MAPPEDOIDCGROUP_U1 = Internal.createUniqueKey(MappedOidcGroup.MAPPEDOIDCGROUP, DSL.name("MAPPEDOIDCGROUP_U1"), new TableField[] { MappedOidcGroup.MAPPEDOIDCGROUP.TEAM_ID, MappedOidcGroup.MAPPEDOIDCGROUP.GROUP_ID }, true);
    public static final UniqueKey<MappedOidcGroupRecord> MAPPEDOIDCGROUP_UUID_IDX = Internal.createUniqueKey(MappedOidcGroup.MAPPEDOIDCGROUP, DSL.name("MAPPEDOIDCGROUP_UUID_IDX"), new TableField[] { MappedOidcGroup.MAPPEDOIDCGROUP.UUID }, true);
    public static final UniqueKey<NotificationPublisherRecord> NOTIFICATIONPUBLISHER_PK = Internal.createUniqueKey(NotificationPublisher.NOTIFICATIONPUBLISHER, DSL.name("NOTIFICATIONPUBLISHER_PK"), new TableField[] { NotificationPublisher.NOTIFICATIONPUBLISHER.ID }, true);
    public static final UniqueKey<NotificationPublisherRecord> NOTIFICATIONPUBLISHER_UUID_IDX = Internal.createUniqueKey(NotificationPublisher.NOTIFICATIONPUBLISHER, DSL.name("NOTIFICATIONPUBLISHER_UUID_IDX"), new TableField[] { NotificationPublisher.NOTIFICATIONPUBLISHER.UUID }, true);
    public static final UniqueKey<NotificationRuleRecord> NOTIFICATIONRULE_PK = Internal.createUniqueKey(NotificationRule.NOTIFICATIONRULE, DSL.name("NOTIFICATIONRULE_PK"), new TableField[] { NotificationRule.NOTIFICATIONRULE.ID }, true);
    public static final UniqueKey<NotificationRuleRecord> NOTIFICATIONRULE_UUID_IDX = Internal.createUniqueKey(NotificationRule.NOTIFICATIONRULE, DSL.name("NOTIFICATIONRULE_UUID_IDX"), new TableField[] { NotificationRule.NOTIFICATIONRULE.UUID }, true);
    public static final UniqueKey<NotificationRuleTeamsRecord> NOTIFICATIONRULE_TEAMS_PK = Internal.createUniqueKey(NotificationRuleTeams.NOTIFICATIONRULE_TEAMS, DSL.name("NOTIFICATIONRULE_TEAMS_PK"), new TableField[] { NotificationRuleTeams.NOTIFICATIONRULE_TEAMS.NOTIFICATIONRULE_ID, NotificationRuleTeams.NOTIFICATIONRULE_TEAMS.TEAM_ID }, true);
    public static final UniqueKey<OidcGroupRecord> OIDCGROUP_PK = Internal.createUniqueKey(OidcGroup.OIDCGROUP, DSL.name("OIDCGROUP_PK"), new TableField[] { OidcGroup.OIDCGROUP.ID }, true);
    public static final UniqueKey<OidcGroupRecord> OIDCGROUP_UUID_IDX = Internal.createUniqueKey(OidcGroup.OIDCGROUP, DSL.name("OIDCGROUP_UUID_IDX"), new TableField[] { OidcGroup.OIDCGROUP.UUID }, true);
    public static final UniqueKey<OidcUserRecord> OIDCUSER_PK = Internal.createUniqueKey(OidcUser.OIDCUSER, DSL.name("OIDCUSER_PK"), new TableField[] { OidcUser.OIDCUSER.ID }, true);
    public static final UniqueKey<OidcUserRecord> OIDCUSER_USERNAME_IDX = Internal.createUniqueKey(OidcUser.OIDCUSER, DSL.name("OIDCUSER_USERNAME_IDX"), new TableField[] { OidcUser.OIDCUSER.USERNAME }, true);
    public static final UniqueKey<OidcUsersPermissionsRecord> OIDCUSERS_PERMISSIONS_PK = Internal.createUniqueKey(OidcUsersPermissions.OIDCUSERS_PERMISSIONS, DSL.name("OIDCUSERS_PERMISSIONS_PK"), new TableField[] { OidcUsersPermissions.OIDCUSERS_PERMISSIONS.OIDCUSER_ID, OidcUsersPermissions.OIDCUSERS_PERMISSIONS.PERMISSION_ID }, true);
    public static final UniqueKey<OidcUsersTeamsRecord> OIDCUSERS_TEAMS_PK = Internal.createUniqueKey(OidcUsersTeams.OIDCUSERS_TEAMS, DSL.name("OIDCUSERS_TEAMS_PK"), new TableField[] { OidcUsersTeams.OIDCUSERS_TEAMS.TEAM_ID, OidcUsersTeams.OIDCUSERS_TEAMS.OIDCUSERS_ID }, true);
    public static final UniqueKey<PermissionRecord> PERMISSION_IDX = Internal.createUniqueKey(Permission.PERMISSION, DSL.name("PERMISSION_IDX"), new TableField[] { Permission.PERMISSION.NAME }, true);
    public static final UniqueKey<PermissionRecord> PERMISSION_PK = Internal.createUniqueKey(Permission.PERMISSION, DSL.name("PERMISSION_PK"), new TableField[] { Permission.PERMISSION.ID }, true);
    public static final UniqueKey<PolicyRecord> POLICY_PK = Internal.createUniqueKey(Policy.POLICY, DSL.name("POLICY_PK"), new TableField[] { Policy.POLICY.ID }, true);
    public static final UniqueKey<PolicyRecord> POLICY_UUID_IDX = Internal.createUniqueKey(Policy.POLICY, DSL.name("POLICY_UUID_IDX"), new TableField[] { Policy.POLICY.UUID }, true);
    public static final UniqueKey<PolicyConditionRecord> POLICYCONDITION_PK = Internal.createUniqueKey(PolicyCondition.POLICYCONDITION, DSL.name("POLICYCONDITION_PK"), new TableField[] { PolicyCondition.POLICYCONDITION.ID }, true);
    public static final UniqueKey<PolicyConditionRecord> POLICYCONDITION_UUID_IDX = Internal.createUniqueKey(PolicyCondition.POLICYCONDITION, DSL.name("POLICYCONDITION_UUID_IDX"), new TableField[] { PolicyCondition.POLICYCONDITION.UUID }, true);
    public static final UniqueKey<PolicyViolationRecord> POLICYVIOLATION_PK = Internal.createUniqueKey(PolicyViolation.POLICYVIOLATION, DSL.name("POLICYVIOLATION_PK"), new TableField[] { PolicyViolation.POLICYVIOLATION.ID }, true);
    public static final UniqueKey<PolicyViolationRecord> POLICYVIOLATION_UUID_IDX = Internal.createUniqueKey(PolicyViolation.POLICYVIOLATION, DSL.name("POLICYVIOLATION_UUID_IDX"), new TableField[] { PolicyViolation.POLICYVIOLATION.UUID }, true);
    public static final UniqueKey<PortfolioMetricsRecord> PORTFOLIOMETRICS_PK = Internal.createUniqueKey(PortfolioMetrics.PORTFOLIOMETRICS, DSL.name("PORTFOLIOMETRICS_PK"), new TableField[] { PortfolioMetrics.PORTFOLIOMETRICS.ID }, true);
    public static final UniqueKey<ProjectRecord> PROJECT_PK = Internal.createUniqueKey(Project.PROJECT, DSL.name("PROJECT_PK"), new TableField[] { Project.PROJECT.ID }, true);
    public static final UniqueKey<ProjectRecord> PROJECT_UUID_IDX = Internal.createUniqueKey(Project.PROJECT, DSL.name("PROJECT_UUID_IDX"), new TableField[] { Project.PROJECT.UUID }, true);
    public static final UniqueKey<ProjectAccessTeamsRecord> PROJECT_ACCESS_TEAMS_PK = Internal.createUniqueKey(ProjectAccessTeams.PROJECT_ACCESS_TEAMS, DSL.name("PROJECT_ACCESS_TEAMS_PK"), new TableField[] { ProjectAccessTeams.PROJECT_ACCESS_TEAMS.PROJECT_ID, ProjectAccessTeams.PROJECT_ACCESS_TEAMS.TEAM_ID }, true);
    public static final UniqueKey<ProjectHierarchyRecord> PROJECT_HIERARCHY_PK = Internal.createUniqueKey(ProjectHierarchy.PROJECT_HIERARCHY, DSL.name("PROJECT_HIERARCHY_PK"), new TableField[] { ProjectHierarchy.PROJECT_HIERARCHY.PARENT_PROJECT_ID, ProjectHierarchy.PROJECT_HIERARCHY.CHILD_PROJECT_ID }, true);
    public static final UniqueKey<ProjectMetadataRecord> PROJECT_METADATA_PK = Internal.createUniqueKey(ProjectMetadata.PROJECT_METADATA, DSL.name("PROJECT_METADATA_PK"), new TableField[] { ProjectMetadata.PROJECT_METADATA.ID }, true);
    public static final UniqueKey<ProjectPropertyRecord> PROJECT_PROPERTY_KEYS_IDX = Internal.createUniqueKey(ProjectProperty.PROJECT_PROPERTY, DSL.name("PROJECT_PROPERTY_KEYS_IDX"), new TableField[] { ProjectProperty.PROJECT_PROPERTY.PROJECT_ID, ProjectProperty.PROJECT_PROPERTY.GROUPNAME, ProjectProperty.PROJECT_PROPERTY.PROPERTYNAME }, true);
    public static final UniqueKey<ProjectPropertyRecord> PROJECT_PROPERTY_PK = Internal.createUniqueKey(ProjectProperty.PROJECT_PROPERTY, DSL.name("PROJECT_PROPERTY_PK"), new TableField[] { ProjectProperty.PROJECT_PROPERTY.ID }, true);
    public static final UniqueKey<ProjectMetricsRecord> PROJECTMETRICS_PK = Internal.createUniqueKey(ProjectMetrics.PROJECTMETRICS, DSL.name("PROJECTMETRICS_PK"), new TableField[] { ProjectMetrics.PROJECTMETRICS.ID }, true);
    public static final UniqueKey<RepositoryRecord> REPOSITORY_COMPOUND_IDX = Internal.createUniqueKey(Repository.REPOSITORY, DSL.name("REPOSITORY_COMPOUND_IDX"), new TableField[] { Repository.REPOSITORY.TYPE, Repository.REPOSITORY.IDENTIFIER }, true);
    public static final UniqueKey<RepositoryRecord> REPOSITORY_PK = Internal.createUniqueKey(Repository.REPOSITORY, DSL.name("REPOSITORY_PK"), new TableField[] { Repository.REPOSITORY.ID }, true);
    public static final UniqueKey<RepositoryMetaComponentRecord> REPOSITORY_META_COMPONENT_PK = Internal.createUniqueKey(RepositoryMetaComponent.REPOSITORY_META_COMPONENT, DSL.name("REPOSITORY_META_COMPONENT_PK"), new TableField[] { RepositoryMetaComponent.REPOSITORY_META_COMPONENT.ID }, true);
    public static final UniqueKey<ServiceComponentRecord> SERVICECOMPONENT_PK = Internal.createUniqueKey(ServiceComponent.SERVICECOMPONENT, DSL.name("SERVICECOMPONENT_PK"), new TableField[] { ServiceComponent.SERVICECOMPONENT.ID }, true);
    public static final UniqueKey<ServiceComponentRecord> SERVICECOMPONENT_UUID_IDX = Internal.createUniqueKey(ServiceComponent.SERVICECOMPONENT, DSL.name("SERVICECOMPONENT_UUID_IDX"), new TableField[] { ServiceComponent.SERVICECOMPONENT.UUID }, true);
    public static final UniqueKey<TagRecord> TAG_PK = Internal.createUniqueKey(Tag.TAG, DSL.name("TAG_PK"), new TableField[] { Tag.TAG.ID }, true);
    public static final UniqueKey<TeamRecord> TEAM_NAME_IDX = Internal.createUniqueKey(Team.TEAM, DSL.name("TEAM_NAME_IDX"), new TableField[] { Team.TEAM.NAME }, true);
    public static final UniqueKey<TeamRecord> TEAM_PK = Internal.createUniqueKey(Team.TEAM, DSL.name("TEAM_PK"), new TableField[] { Team.TEAM.ID }, true);
    public static final UniqueKey<TeamRecord> TEAM_UUID_IDX = Internal.createUniqueKey(Team.TEAM, DSL.name("TEAM_UUID_IDX"), new TableField[] { Team.TEAM.UUID }, true);
    public static final UniqueKey<TeamsPermissionsRecord> TEAMS_PERMISSIONS_PK = Internal.createUniqueKey(TeamsPermissions.TEAMS_PERMISSIONS, DSL.name("TEAMS_PERMISSIONS_PK"), new TableField[] { TeamsPermissions.TEAMS_PERMISSIONS.TEAM_ID, TeamsPermissions.TEAMS_PERMISSIONS.PERMISSION_ID }, true);
    public static final UniqueKey<VexRecord> VEX_PK = Internal.createUniqueKey(Vex.VEX, DSL.name("VEX_PK"), new TableField[] { Vex.VEX.ID }, true);
    public static final UniqueKey<VexRecord> VEX_UUID_IDX = Internal.createUniqueKey(Vex.VEX, DSL.name("VEX_UUID_IDX"), new TableField[] { Vex.VEX.UUID }, true);
    public static final UniqueKey<ViolationAnalysisRecord> VIOLATIONANALYSIS_COMPOSITE_IDX = Internal.createUniqueKey(ViolationAnalysis.VIOLATIONANALYSIS, DSL.name("VIOLATIONANALYSIS_COMPOSITE_IDX"), new TableField[] { ViolationAnalysis.VIOLATIONANALYSIS.PROJECT_ID, ViolationAnalysis.VIOLATIONANALYSIS.COMPONENT_ID, ViolationAnalysis.VIOLATIONANALYSIS.POLICYVIOLATION_ID }, true);
    public static final UniqueKey<ViolationAnalysisRecord> VIOLATIONANALYSIS_PK = Internal.createUniqueKey(ViolationAnalysis.VIOLATIONANALYSIS, DSL.name("VIOLATIONANALYSIS_PK"), new TableField[] { ViolationAnalysis.VIOLATIONANALYSIS.ID }, true);
    public static final UniqueKey<ViolationAnalysisCommentRecord> VIOLATIONANALYSISCOMMENT_PK = Internal.createUniqueKey(ViolationAnalysisComment.VIOLATIONANALYSISCOMMENT, DSL.name("VIOLATIONANALYSISCOMMENT_PK"), new TableField[] { ViolationAnalysisComment.VIOLATIONANALYSISCOMMENT.ID }, true);
    public static final UniqueKey<VulnerabilityRecord> VULNERABILITY_PK = Internal.createUniqueKey(Vulnerability.VULNERABILITY, DSL.name("VULNERABILITY_PK"), new TableField[] { Vulnerability.VULNERABILITY.ID }, true);
    public static final UniqueKey<VulnerabilityRecord> VULNERABILITY_U1 = Internal.createUniqueKey(Vulnerability.VULNERABILITY, DSL.name("VULNERABILITY_U1"), new TableField[] { Vulnerability.VULNERABILITY.VULNID, Vulnerability.VULNERABILITY.SOURCE }, true);
    public static final UniqueKey<VulnerabilityRecord> VULNERABILITY_UUID_IDX = Internal.createUniqueKey(Vulnerability.VULNERABILITY, DSL.name("VULNERABILITY_UUID_IDX"), new TableField[] { Vulnerability.VULNERABILITY.UUID }, true);
    public static final UniqueKey<VulnerabilityPolicyRecord> VULNERABILITYPOLICY_PK = Internal.createUniqueKey(VulnerabilityPolicy.VULNERABILITY_POLICY, DSL.name("VULNERABILITYPOLICY_PK"), new TableField[] { VulnerabilityPolicy.VULNERABILITY_POLICY.ID }, true);
    public static final UniqueKey<VulnerabilityPolicyBundleRecord> VULNERABILITY_POLICY_BUNDLE_PK = Internal.createUniqueKey(VulnerabilityPolicyBundle.VULNERABILITY_POLICY_BUNDLE, DSL.name("VULNERABILITY_POLICY_BUNDLE_PK"), new TableField[] { VulnerabilityPolicyBundle.VULNERABILITY_POLICY_BUNDLE.ID }, true);
    public static final UniqueKey<VulnerabilityAliasRecord> VULNERABILITYALIAS_PK = Internal.createUniqueKey(VulnerabilityAlias.VULNERABILITYALIAS, DSL.name("VULNERABILITYALIAS_PK"), new TableField[] { VulnerabilityAlias.VULNERABILITYALIAS.ID }, true);
    public static final UniqueKey<VulnerabilityAliasRecord> VULNERABILITYALIAS_UUID_IDX = Internal.createUniqueKey(VulnerabilityAlias.VULNERABILITYALIAS, DSL.name("VULNERABILITYALIAS_UUID_IDX"), new TableField[] { VulnerabilityAlias.VULNERABILITYALIAS.UUID }, true);
    public static final UniqueKey<VulnerabilityMetricsRecord> VULNERABILITYMETRICS_PK = Internal.createUniqueKey(VulnerabilityMetrics.VULNERABILITYMETRICS, DSL.name("VULNERABILITYMETRICS_PK"), new TableField[] { VulnerabilityMetrics.VULNERABILITYMETRICS.ID }, true);
    public static final UniqueKey<VulnerabilityScanRecord> VULNERABILITY_SCAN_TOKEN_IDX = Internal.createUniqueKey(VulnerabilityScan.VULNERABILITYSCAN, DSL.name("VULNERABILITY_SCAN_TOKEN_IDX"), new TableField[] { VulnerabilityScan.VULNERABILITYSCAN.TOKEN }, true);
    public static final UniqueKey<VulnerabilityScanRecord> VULNERABILITYSCAN_PK = Internal.createUniqueKey(VulnerabilityScan.VULNERABILITYSCAN, DSL.name("VULNERABILITYSCAN_PK"), new TableField[] { VulnerabilityScan.VULNERABILITYSCAN.ID }, true);
    public static final UniqueKey<VulnerableSoftwareRecord> VULNERABLESOFTWARE_PK = Internal.createUniqueKey(VulnerableSoftware.VULNERABLESOFTWARE, DSL.name("VULNERABLESOFTWARE_PK"), new TableField[] { VulnerableSoftware.VULNERABLESOFTWARE.ID }, true);
    public static final UniqueKey<VulnerableSoftwareRecord> VULNERABLESOFTWARE_UUID_IDX = Internal.createUniqueKey(VulnerableSoftware.VULNERABLESOFTWARE, DSL.name("VULNERABLESOFTWARE_UUID_IDX"), new TableField[] { VulnerableSoftware.VULNERABLESOFTWARE.UUID }, true);
    public static final UniqueKey<WorkflowStateRecord> WORKFLOW_STATE_COMPOSITE_IDX = Internal.createUniqueKey(WorkflowState.WORKFLOW_STATE, DSL.name("WORKFLOW_STATE_COMPOSITE_IDX"), new TableField[] { WorkflowState.WORKFLOW_STATE.TOKEN, WorkflowState.WORKFLOW_STATE.STEP }, true);
    public static final UniqueKey<WorkflowStateRecord> WORKFLOW_STATE_PK = Internal.createUniqueKey(WorkflowState.WORKFLOW_STATE, DSL.name("WORKFLOW_STATE_PK"), new TableField[] { WorkflowState.WORKFLOW_STATE.ID }, true);

    // -------------------------------------------------------------------------
    // FOREIGN KEY definitions
    // -------------------------------------------------------------------------

    public static final ForeignKey<AffectedVersionAttributionRecord, VulnerabilityRecord> AFFECTEDVERSIONATTRIBUTION_VULNERABILITY_FK = Internal.createForeignKey(AffectedVersionAttribution.AFFECTEDVERSIONATTRIBUTION, DSL.name("AFFECTEDVERSIONATTRIBUTION_VULNERABILITY_FK"), new TableField[] { AffectedVersionAttribution.AFFECTEDVERSIONATTRIBUTION.VULNERABILITY }, Keys.VULNERABILITY_PK, new TableField[] { Vulnerability.VULNERABILITY.ID }, true, ForeignKeyRule.CASCADE, ForeignKeyRule.NO_ACTION);
    public static final ForeignKey<AffectedVersionAttributionRecord, VulnerableSoftwareRecord> AFFECTEDVERSIONATTRIBUTION_VULNERABLESOFTWARE_FK = Internal.createForeignKey(AffectedVersionAttribution.AFFECTEDVERSIONATTRIBUTION, DSL.name("AFFECTEDVERSIONATTRIBUTION_VULNERABLESOFTWARE_FK"), new TableField[] { AffectedVersionAttribution.AFFECTEDVERSIONATTRIBUTION.VULNERABLE_SOFTWARE }, Keys.VULNERABLESOFTWARE_PK, new TableField[] { VulnerableSoftware.VULNERABLESOFTWARE.ID }, true, ForeignKeyRule.CASCADE, ForeignKeyRule.NO_ACTION);
    public static final ForeignKey<AnalysisRecord, ComponentRecord> ANALYSIS__ANALYSIS_COMPONENT_FK = Internal.createForeignKey(Analysis.ANALYSIS, DSL.name("ANALYSIS_COMPONENT_FK"), new TableField[] { Analysis.ANALYSIS.COMPONENT_ID }, Keys.COMPONENT_PK, new TableField[] { Component.COMPONENT.ID }, true, ForeignKeyRule.CASCADE, ForeignKeyRule.NO_ACTION);
    public static final ForeignKey<AnalysisRecord, ProjectRecord> ANALYSIS__ANALYSIS_PROJECT_FK = Internal.createForeignKey(Analysis.ANALYSIS, DSL.name("ANALYSIS_PROJECT_FK"), new TableField[] { Analysis.ANALYSIS.PROJECT_ID }, Keys.PROJECT_PK, new TableField[] { Project.PROJECT.ID }, true, ForeignKeyRule.CASCADE, ForeignKeyRule.NO_ACTION);
    public static final ForeignKey<AnalysisRecord, VulnerabilityRecord> ANALYSIS__ANALYSIS_VULNERABILITY_FK = Internal.createForeignKey(Analysis.ANALYSIS, DSL.name("ANALYSIS_VULNERABILITY_FK"), new TableField[] { Analysis.ANALYSIS.VULNERABILITY_ID }, Keys.VULNERABILITY_PK, new TableField[] { Vulnerability.VULNERABILITY.ID }, true, ForeignKeyRule.CASCADE, ForeignKeyRule.NO_ACTION);
    public static final ForeignKey<AnalysisRecord, VulnerabilityPolicyRecord> ANALYSIS__ANALYSIS_VULNERABILITY_POLICY_ID_FK = Internal.createForeignKey(Analysis.ANALYSIS, DSL.name("ANALYSIS_VULNERABILITY_POLICY_ID_FK"), new TableField[] { Analysis.ANALYSIS.VULNERABILITY_POLICY_ID }, Keys.VULNERABILITYPOLICY_PK, new TableField[] { VulnerabilityPolicy.VULNERABILITY_POLICY.ID }, true, ForeignKeyRule.NO_ACTION, ForeignKeyRule.NO_ACTION);
    public static final ForeignKey<AnalysisCommentRecord, AnalysisRecord> ANALYSISCOMMENT_ANALYSIS_FK = Internal.createForeignKey(AnalysisComment.ANALYSISCOMMENT, DSL.name("ANALYSISCOMMENT_ANALYSIS_FK"), new TableField[] { AnalysisComment.ANALYSISCOMMENT.ANALYSIS_ID }, Keys.ANALYSIS_PK, new TableField[] { Analysis.ANALYSIS.ID }, true, ForeignKeyRule.CASCADE, ForeignKeyRule.NO_ACTION);
    public static final ForeignKey<ApiKeysTeamsRecord, ApiKeyRecord> APIKEYS_TEAMS_APIKEY_FK = Internal.createForeignKey(ApiKeysTeams.APIKEYS_TEAMS, DSL.name("APIKEYS_TEAMS_APIKEY_FK"), new TableField[] { ApiKeysTeams.APIKEYS_TEAMS.APIKEY_ID }, Keys.APIKEY_PK, new TableField[] { ApiKey.APIKEY.ID }, true, ForeignKeyRule.CASCADE, ForeignKeyRule.NO_ACTION);
    public static final ForeignKey<ApiKeysTeamsRecord, TeamRecord> APIKEYS_TEAMS_TEAM_FK = Internal.createForeignKey(ApiKeysTeams.APIKEYS_TEAMS, DSL.name("APIKEYS_TEAMS_TEAM_FK"), new TableField[] { ApiKeysTeams.APIKEYS_TEAMS.TEAM_ID }, Keys.TEAM_PK, new TableField[] { Team.TEAM.ID }, true, ForeignKeyRule.CASCADE, ForeignKeyRule.NO_ACTION);
    public static final ForeignKey<BomRecord, ProjectRecord> BOM__BOM_PROJECT_FK = Internal.createForeignKey(Bom.BOM, DSL.name("BOM_PROJECT_FK"), new TableField[] { Bom.BOM.PROJECT_ID }, Keys.PROJECT_PK, new TableField[] { Project.PROJECT.ID }, true, ForeignKeyRule.CASCADE, ForeignKeyRule.NO_ACTION);
    public static final ForeignKey<ComponentRecord, ComponentRecord> COMPONENT__COMPONENT_COMPONENT_FK = Internal.createForeignKey(Component.COMPONENT, DSL.name("COMPONENT_COMPONENT_FK"), new TableField[] { Component.COMPONENT.PARENT_COMPONENT_ID }, Keys.COMPONENT_PK, new TableField[] { Component.COMPONENT.ID }, true, ForeignKeyRule.CASCADE, ForeignKeyRule.NO_ACTION);
    public static final ForeignKey<ComponentRecord, LicenseRecord> COMPONENT__COMPONENT_LICENSE_FK = Internal.createForeignKey(Component.COMPONENT, DSL.name("COMPONENT_LICENSE_FK"), new TableField[] { Component.COMPONENT.LICENSE_ID }, Keys.LICENSE_PK, new TableField[] { License.LICENSE.ID }, true, ForeignKeyRule.NO_ACTION, ForeignKeyRule.NO_ACTION);
    public static final ForeignKey<ComponentRecord, ProjectRecord> COMPONENT__COMPONENT_PROJECT_FK = Internal.createForeignKey(Component.COMPONENT, DSL.name("COMPONENT_PROJECT_FK"), new TableField[] { Component.COMPONENT.PROJECT_ID }, Keys.PROJECT_PK, new TableField[] { Project.PROJECT.ID }, true, ForeignKeyRule.CASCADE, ForeignKeyRule.NO_ACTION);
    public static final ForeignKey<ComponentOccurrenceRecord, ComponentRecord> COMPONENT_OCCURRENCE__COMPONENT_OCCURRENCE_COMPONENT_FK = Internal.createForeignKey(ComponentOccurrence.COMPONENT_OCCURRENCE, DSL.name("COMPONENT_OCCURRENCE_COMPONENT_FK"), new TableField[] { ComponentOccurrence.COMPONENT_OCCURRENCE.COMPONENT_ID }, Keys.COMPONENT_PK, new TableField[] { Component.COMPONENT.ID }, true, ForeignKeyRule.CASCADE, ForeignKeyRule.NO_ACTION);
    public static final ForeignKey<ComponentPropertyRecord, ComponentRecord> COMPONENT_PROPERTY__COMPONENT_PROPERTY_COMPONENT_ID_FK = Internal.createForeignKey(ComponentProperty.COMPONENT_PROPERTY, DSL.name("COMPONENT_PROPERTY_COMPONENT_ID_FK"), new TableField[] { ComponentProperty.COMPONENT_PROPERTY.COMPONENT_ID }, Keys.COMPONENT_PK, new TableField[] { Component.COMPONENT.ID }, true, ForeignKeyRule.CASCADE, ForeignKeyRule.NO_ACTION);
    public static final ForeignKey<ComponentsVulnerabilitiesRecord, ComponentRecord> COMPONENTS_VULNERABILITIES__COMPONENTS_VULNERABILITIES_COMPONENT_FK = Internal.createForeignKey(ComponentsVulnerabilities.COMPONENTS_VULNERABILITIES, DSL.name("COMPONENTS_VULNERABILITIES_COMPONENT_FK"), new TableField[] { ComponentsVulnerabilities.COMPONENTS_VULNERABILITIES.COMPONENT_ID }, Keys.COMPONENT_PK, new TableField[] { Component.COMPONENT.ID }, true, ForeignKeyRule.CASCADE, ForeignKeyRule.NO_ACTION);
    public static final ForeignKey<ComponentsVulnerabilitiesRecord, VulnerabilityRecord> COMPONENTS_VULNERABILITIES__COMPONENTS_VULNERABILITIES_VULNERABILITY_FK = Internal.createForeignKey(ComponentsVulnerabilities.COMPONENTS_VULNERABILITIES, DSL.name("COMPONENTS_VULNERABILITIES_VULNERABILITY_FK"), new TableField[] { ComponentsVulnerabilities.COMPONENTS_VULNERABILITIES.VULNERABILITY_ID }, Keys.VULNERABILITY_PK, new TableField[] { Vulnerability.VULNERABILITY.ID }, true, ForeignKeyRule.CASCADE, ForeignKeyRule.NO_ACTION);
    public static final ForeignKey<DependencyMetricsRecord, ComponentRecord> DEPENDENCYMETRICS_COMPONENT_FK = Internal.createForeignKey(DependencyMetrics.DEPENDENCYMETRICS, DSL.name("DEPENDENCYMETRICS_COMPONENT_FK"), new TableField[] { DependencyMetrics.DEPENDENCYMETRICS.COMPONENT_ID }, Keys.COMPONENT_PK, new TableField[] { Component.COMPONENT.ID }, true, ForeignKeyRule.CASCADE, ForeignKeyRule.NO_ACTION);
    public static final ForeignKey<DependencyMetricsRecord, ProjectRecord> DEPENDENCYMETRICS_PROJECT_FK = Internal.createForeignKey(DependencyMetrics.DEPENDENCYMETRICS, DSL.name("DEPENDENCYMETRICS_PROJECT_FK"), new TableField[] { DependencyMetrics.DEPENDENCYMETRICS.PROJECT_ID }, Keys.PROJECT_PK, new TableField[] { Project.PROJECT.ID }, true, ForeignKeyRule.CASCADE, ForeignKeyRule.NO_ACTION);
    public static final ForeignKey<FindingAttributionRecord, ComponentRecord> FINDINGATTRIBUTION_COMPONENT_FK = Internal.createForeignKey(FindingAttribution.FINDINGATTRIBUTION, DSL.name("FINDINGATTRIBUTION_COMPONENT_FK"), new TableField[] { FindingAttribution.FINDINGATTRIBUTION.COMPONENT_ID }, Keys.COMPONENT_PK, new TableField[] { Component.COMPONENT.ID }, true, ForeignKeyRule.CASCADE, ForeignKeyRule.NO_ACTION);
    public static final ForeignKey<FindingAttributionRecord, ProjectRecord> FINDINGATTRIBUTION_PROJECT_FK = Internal.createForeignKey(FindingAttribution.FINDINGATTRIBUTION, DSL.name("FINDINGATTRIBUTION_PROJECT_FK"), new TableField[] { FindingAttribution.FINDINGATTRIBUTION.PROJECT_ID }, Keys.PROJECT_PK, new TableField[] { Project.PROJECT.ID }, true, ForeignKeyRule.CASCADE, ForeignKeyRule.NO_ACTION);
    public static final ForeignKey<FindingAttributionRecord, VulnerabilityRecord> FINDINGATTRIBUTION_VULNERABILITY_FK = Internal.createForeignKey(FindingAttribution.FINDINGATTRIBUTION, DSL.name("FINDINGATTRIBUTION_VULNERABILITY_FK"), new TableField[] { FindingAttribution.FINDINGATTRIBUTION.VULNERABILITY_ID }, Keys.VULNERABILITY_PK, new TableField[] { Vulnerability.VULNERABILITY.ID }, true, ForeignKeyRule.CASCADE, ForeignKeyRule.NO_ACTION);
    public static final ForeignKey<IntegrityAnalysisRecord, ComponentRecord> INTEGRITY_ANALYSIS__INTEGRITY_ANALYSIS_COMPONENT_FK = Internal.createForeignKey(IntegrityAnalysis.INTEGRITY_ANALYSIS, DSL.name("INTEGRITY_ANALYSIS_COMPONENT_FK"), new TableField[] { IntegrityAnalysis.INTEGRITY_ANALYSIS.COMPONENT_ID }, Keys.COMPONENT_PK, new TableField[] { Component.COMPONENT.ID }, true, ForeignKeyRule.CASCADE, ForeignKeyRule.NO_ACTION);
    public static final ForeignKey<LdapUsersPermissionsRecord, LdapUserRecord> LDAPUSERS_PERMISSIONS_LDAPUSER_FK = Internal.createForeignKey(LdapUsersPermissions.LDAPUSERS_PERMISSIONS, DSL.name("LDAPUSERS_PERMISSIONS_LDAPUSER_FK"), new TableField[] { LdapUsersPermissions.LDAPUSERS_PERMISSIONS.LDAPUSER_ID }, Keys.LDAPUSER_PK, new TableField[] { LdapUser.LDAPUSER.ID }, true, ForeignKeyRule.CASCADE, ForeignKeyRule.NO_ACTION);
    public static final ForeignKey<LdapUsersPermissionsRecord, PermissionRecord> LDAPUSERS_PERMISSIONS_PERMISSION_FK = Internal.createForeignKey(LdapUsersPermissions.LDAPUSERS_PERMISSIONS, DSL.name("LDAPUSERS_PERMISSIONS_PERMISSION_FK"), new TableField[] { LdapUsersPermissions.LDAPUSERS_PERMISSIONS.PERMISSION_ID }, Keys.PERMISSION_PK, new TableField[] { Permission.PERMISSION.ID }, true, ForeignKeyRule.CASCADE, ForeignKeyRule.NO_ACTION);
    public static final ForeignKey<LdapUsersTeamsRecord, LdapUserRecord> LDAPUSERS_TEAMS_LDAPUSER_FK = Internal.createForeignKey(LdapUsersTeams.LDAPUSERS_TEAMS, DSL.name("LDAPUSERS_TEAMS_LDAPUSER_FK"), new TableField[] { LdapUsersTeams.LDAPUSERS_TEAMS.LDAPUSER_ID }, Keys.LDAPUSER_PK, new TableField[] { LdapUser.LDAPUSER.ID }, true, ForeignKeyRule.CASCADE, ForeignKeyRule.NO_ACTION);
    public static final ForeignKey<LdapUsersTeamsRecord, TeamRecord> LDAPUSERS_TEAMS_TEAM_FK = Internal.createForeignKey(LdapUsersTeams.LDAPUSERS_TEAMS, DSL.name("LDAPUSERS_TEAMS_TEAM_FK"), new TableField[] { LdapUsersTeams.LDAPUSERS_TEAMS.TEAM_ID }, Keys.TEAM_PK, new TableField[] { Team.TEAM.ID }, true, ForeignKeyRule.CASCADE, ForeignKeyRule.NO_ACTION);
    public static final ForeignKey<LicenseGroupLicenseRecord, LicenseRecord> LICENSEGROUP_LICENSE_LICENSE_FK = Internal.createForeignKey(LicenseGroupLicense.LICENSEGROUP_LICENSE, DSL.name("LICENSEGROUP_LICENSE_LICENSE_FK"), new TableField[] { LicenseGroupLicense.LICENSEGROUP_LICENSE.LICENSE_ID }, Keys.LICENSE_PK, new TableField[] { License.LICENSE.ID }, true, ForeignKeyRule.CASCADE, ForeignKeyRule.NO_ACTION);
    public static final ForeignKey<LicenseGroupLicenseRecord, LicenseGroupRecord> LICENSEGROUP_LICENSE_LICENSEGROUP_FK = Internal.createForeignKey(LicenseGroupLicense.LICENSEGROUP_LICENSE, DSL.name("LICENSEGROUP_LICENSE_LICENSEGROUP_FK"), new TableField[] { LicenseGroupLicense.LICENSEGROUP_LICENSE.LICENSEGROUP_ID }, Keys.LICENSEGROUP_PK, new TableField[] { LicenseGroup.LICENSEGROUP.ID }, true, ForeignKeyRule.CASCADE, ForeignKeyRule.NO_ACTION);
    public static final ForeignKey<ManagedUsersPermissionsRecord, ManagedUserRecord> MANAGEDUSERS_PERMISSIONS_MANAGEDUSER_FK = Internal.createForeignKey(ManagedUsersPermissions.MANAGEDUSERS_PERMISSIONS, DSL.name("MANAGEDUSERS_PERMISSIONS_MANAGEDUSER_FK"), new TableField[] { ManagedUsersPermissions.MANAGEDUSERS_PERMISSIONS.MANAGEDUSER_ID }, Keys.MANAGEDUSER_PK, new TableField[] { ManagedUser.MANAGEDUSER.ID }, true, ForeignKeyRule.CASCADE, ForeignKeyRule.NO_ACTION);
    public static final ForeignKey<ManagedUsersPermissionsRecord, PermissionRecord> MANAGEDUSERS_PERMISSIONS_PERMISSION_FK = Internal.createForeignKey(ManagedUsersPermissions.MANAGEDUSERS_PERMISSIONS, DSL.name("MANAGEDUSERS_PERMISSIONS_PERMISSION_FK"), new TableField[] { ManagedUsersPermissions.MANAGEDUSERS_PERMISSIONS.PERMISSION_ID }, Keys.PERMISSION_PK, new TableField[] { Permission.PERMISSION.ID }, true, ForeignKeyRule.CASCADE, ForeignKeyRule.NO_ACTION);
    public static final ForeignKey<ManagedUsersTeamsRecord, ManagedUserRecord> MANAGEDUSERS_TEAMS_MANAGEDUSER_FK = Internal.createForeignKey(ManagedUsersTeams.MANAGEDUSERS_TEAMS, DSL.name("MANAGEDUSERS_TEAMS_MANAGEDUSER_FK"), new TableField[] { ManagedUsersTeams.MANAGEDUSERS_TEAMS.MANAGEDUSER_ID }, Keys.MANAGEDUSER_PK, new TableField[] { ManagedUser.MANAGEDUSER.ID }, true, ForeignKeyRule.CASCADE, ForeignKeyRule.NO_ACTION);
    public static final ForeignKey<ManagedUsersTeamsRecord, TeamRecord> MANAGEDUSERS_TEAMS_TEAM_FK = Internal.createForeignKey(ManagedUsersTeams.MANAGEDUSERS_TEAMS, DSL.name("MANAGEDUSERS_TEAMS_TEAM_FK"), new TableField[] { ManagedUsersTeams.MANAGEDUSERS_TEAMS.TEAM_ID }, Keys.TEAM_PK, new TableField[] { Team.TEAM.ID }, true, ForeignKeyRule.CASCADE, ForeignKeyRule.NO_ACTION);
    public static final ForeignKey<MappedLdapGroupRecord, TeamRecord> MAPPEDLDAPGROUP_TEAM_FK = Internal.createForeignKey(MappedLdapGroup.MAPPEDLDAPGROUP, DSL.name("MAPPEDLDAPGROUP_TEAM_FK"), new TableField[] { MappedLdapGroup.MAPPEDLDAPGROUP.TEAM_ID }, Keys.TEAM_PK, new TableField[] { Team.TEAM.ID }, true, ForeignKeyRule.CASCADE, ForeignKeyRule.NO_ACTION);
    public static final ForeignKey<MappedOidcGroupRecord, OidcGroupRecord> MAPPEDOIDCGROUP_OIDCGROUP_FK = Internal.createForeignKey(MappedOidcGroup.MAPPEDOIDCGROUP, DSL.name("MAPPEDOIDCGROUP_OIDCGROUP_FK"), new TableField[] { MappedOidcGroup.MAPPEDOIDCGROUP.GROUP_ID }, Keys.OIDCGROUP_PK, new TableField[] { OidcGroup.OIDCGROUP.ID }, true, ForeignKeyRule.CASCADE, ForeignKeyRule.NO_ACTION);
    public static final ForeignKey<MappedOidcGroupRecord, TeamRecord> MAPPEDOIDCGROUP_TEAM_FK = Internal.createForeignKey(MappedOidcGroup.MAPPEDOIDCGROUP, DSL.name("MAPPEDOIDCGROUP_TEAM_FK"), new TableField[] { MappedOidcGroup.MAPPEDOIDCGROUP.TEAM_ID }, Keys.TEAM_PK, new TableField[] { Team.TEAM.ID }, true, ForeignKeyRule.CASCADE, ForeignKeyRule.NO_ACTION);
    public static final ForeignKey<NotificationRuleRecord, NotificationPublisherRecord> NOTIFICATIONRULE_NOTIFICATIONPUBLISHER_FK = Internal.createForeignKey(NotificationRule.NOTIFICATIONRULE, DSL.name("NOTIFICATIONRULE_NOTIFICATIONPUBLISHER_FK"), new TableField[] { NotificationRule.NOTIFICATIONRULE.PUBLISHER }, Keys.NOTIFICATIONPUBLISHER_PK, new TableField[] { NotificationPublisher.NOTIFICATIONPUBLISHER.ID }, true, ForeignKeyRule.CASCADE, ForeignKeyRule.NO_ACTION);
    public static final ForeignKey<NotificationRuleProjectsRecord, NotificationRuleRecord> NOTIFICATIONRULE_PROJECTS_NOTIFICATIONRULE_FK = Internal.createForeignKey(NotificationRuleProjects.NOTIFICATIONRULE_PROJECTS, DSL.name("NOTIFICATIONRULE_PROJECTS_NOTIFICATIONRULE_FK"), new TableField[] { NotificationRuleProjects.NOTIFICATIONRULE_PROJECTS.NOTIFICATIONRULE_ID }, Keys.NOTIFICATIONRULE_PK, new TableField[] { NotificationRule.NOTIFICATIONRULE.ID }, true, ForeignKeyRule.CASCADE, ForeignKeyRule.NO_ACTION);
    public static final ForeignKey<NotificationRuleProjectsRecord, ProjectRecord> NOTIFICATIONRULE_PROJECTS_PROJECT_FK = Internal.createForeignKey(NotificationRuleProjects.NOTIFICATIONRULE_PROJECTS, DSL.name("NOTIFICATIONRULE_PROJECTS_PROJECT_FK"), new TableField[] { NotificationRuleProjects.NOTIFICATIONRULE_PROJECTS.PROJECT_ID }, Keys.PROJECT_PK, new TableField[] { Project.PROJECT.ID }, true, ForeignKeyRule.CASCADE, ForeignKeyRule.NO_ACTION);
    public static final ForeignKey<NotificationRuleTagsRecord, NotificationRuleRecord> NOTIFICATIONRULE_TAGS_NOTIFICATIONRULE_FK = Internal.createForeignKey(NotificationRuleTags.NOTIFICATIONRULE_TAGS, DSL.name("NOTIFICATIONRULE_TAGS_NOTIFICATIONRULE_FK"), new TableField[] { NotificationRuleTags.NOTIFICATIONRULE_TAGS.NOTIFICATIONRULE_ID }, Keys.NOTIFICATIONRULE_PK, new TableField[] { NotificationRule.NOTIFICATIONRULE.ID }, true, ForeignKeyRule.CASCADE, ForeignKeyRule.NO_ACTION);
    public static final ForeignKey<NotificationRuleTagsRecord, TagRecord> NOTIFICATIONRULE_TAGS_TAG_FK = Internal.createForeignKey(NotificationRuleTags.NOTIFICATIONRULE_TAGS, DSL.name("NOTIFICATIONRULE_TAGS_TAG_FK"), new TableField[] { NotificationRuleTags.NOTIFICATIONRULE_TAGS.TAG_ID }, Keys.TAG_PK, new TableField[] { Tag.TAG.ID }, true, ForeignKeyRule.CASCADE, ForeignKeyRule.NO_ACTION);
    public static final ForeignKey<NotificationRuleTeamsRecord, NotificationRuleRecord> NOTIFICATIONRULE_TEAMS_NOTIFICATIONRULE_FK = Internal.createForeignKey(NotificationRuleTeams.NOTIFICATIONRULE_TEAMS, DSL.name("NOTIFICATIONRULE_TEAMS_NOTIFICATIONRULE_FK"), new TableField[] { NotificationRuleTeams.NOTIFICATIONRULE_TEAMS.NOTIFICATIONRULE_ID }, Keys.NOTIFICATIONRULE_PK, new TableField[] { NotificationRule.NOTIFICATIONRULE.ID }, true, ForeignKeyRule.CASCADE, ForeignKeyRule.NO_ACTION);
    public static final ForeignKey<NotificationRuleTeamsRecord, TeamRecord> NOTIFICATIONRULE_TEAMS_TEAM_FK = Internal.createForeignKey(NotificationRuleTeams.NOTIFICATIONRULE_TEAMS, DSL.name("NOTIFICATIONRULE_TEAMS_TEAM_FK"), new TableField[] { NotificationRuleTeams.NOTIFICATIONRULE_TEAMS.TEAM_ID }, Keys.TEAM_PK, new TableField[] { Team.TEAM.ID }, true, ForeignKeyRule.CASCADE, ForeignKeyRule.NO_ACTION);
    public static final ForeignKey<OidcUsersPermissionsRecord, OidcUserRecord> OIDCUSERS_PERMISSIONS_OIDCUSER_FK = Internal.createForeignKey(OidcUsersPermissions.OIDCUSERS_PERMISSIONS, DSL.name("OIDCUSERS_PERMISSIONS_OIDCUSER_FK"), new TableField[] { OidcUsersPermissions.OIDCUSERS_PERMISSIONS.OIDCUSER_ID }, Keys.OIDCUSER_PK, new TableField[] { OidcUser.OIDCUSER.ID }, true, ForeignKeyRule.CASCADE, ForeignKeyRule.NO_ACTION);
    public static final ForeignKey<OidcUsersPermissionsRecord, PermissionRecord> OIDCUSERS_PERMISSIONS_PERMISSION_FK = Internal.createForeignKey(OidcUsersPermissions.OIDCUSERS_PERMISSIONS, DSL.name("OIDCUSERS_PERMISSIONS_PERMISSION_FK"), new TableField[] { OidcUsersPermissions.OIDCUSERS_PERMISSIONS.PERMISSION_ID }, Keys.PERMISSION_PK, new TableField[] { Permission.PERMISSION.ID }, true, ForeignKeyRule.CASCADE, ForeignKeyRule.NO_ACTION);
    public static final ForeignKey<OidcUsersTeamsRecord, OidcUserRecord> OIDCUSERS_TEAMS_OIDCUSER_FK = Internal.createForeignKey(OidcUsersTeams.OIDCUSERS_TEAMS, DSL.name("OIDCUSERS_TEAMS_OIDCUSER_FK"), new TableField[] { OidcUsersTeams.OIDCUSERS_TEAMS.OIDCUSERS_ID }, Keys.OIDCUSER_PK, new TableField[] { OidcUser.OIDCUSER.ID }, true, ForeignKeyRule.CASCADE, ForeignKeyRule.NO_ACTION);
    public static final ForeignKey<OidcUsersTeamsRecord, TeamRecord> OIDCUSERS_TEAMS_TEAM_FK = Internal.createForeignKey(OidcUsersTeams.OIDCUSERS_TEAMS, DSL.name("OIDCUSERS_TEAMS_TEAM_FK"), new TableField[] { OidcUsersTeams.OIDCUSERS_TEAMS.TEAM_ID }, Keys.TEAM_PK, new TableField[] { Team.TEAM.ID }, true, ForeignKeyRule.CASCADE, ForeignKeyRule.NO_ACTION);
    public static final ForeignKey<PolicyProjectsRecord, PolicyRecord> POLICY_PROJECTS__POLICY_PROJECTS_POLICY_FK = Internal.createForeignKey(PolicyProjects.POLICY_PROJECTS, DSL.name("POLICY_PROJECTS_POLICY_FK"), new TableField[] { PolicyProjects.POLICY_PROJECTS.POLICY_ID }, Keys.POLICY_PK, new TableField[] { Policy.POLICY.ID }, true, ForeignKeyRule.CASCADE, ForeignKeyRule.NO_ACTION);
    public static final ForeignKey<PolicyProjectsRecord, ProjectRecord> POLICY_PROJECTS__POLICY_PROJECTS_PROJECT_FK = Internal.createForeignKey(PolicyProjects.POLICY_PROJECTS, DSL.name("POLICY_PROJECTS_PROJECT_FK"), new TableField[] { PolicyProjects.POLICY_PROJECTS.PROJECT_ID }, Keys.PROJECT_PK, new TableField[] { Project.PROJECT.ID }, true, ForeignKeyRule.CASCADE, ForeignKeyRule.NO_ACTION);
    public static final ForeignKey<PolicyTagsRecord, PolicyRecord> POLICY_TAGS__POLICY_TAGS_POLICY_FK = Internal.createForeignKey(PolicyTags.POLICY_TAGS, DSL.name("POLICY_TAGS_POLICY_FK"), new TableField[] { PolicyTags.POLICY_TAGS.POLICY_ID }, Keys.POLICY_PK, new TableField[] { Policy.POLICY.ID }, true, ForeignKeyRule.CASCADE, ForeignKeyRule.NO_ACTION);
    public static final ForeignKey<PolicyTagsRecord, TagRecord> POLICY_TAGS__POLICY_TAGS_TAG_FK = Internal.createForeignKey(PolicyTags.POLICY_TAGS, DSL.name("POLICY_TAGS_TAG_FK"), new TableField[] { PolicyTags.POLICY_TAGS.TAG_ID }, Keys.TAG_PK, new TableField[] { Tag.TAG.ID }, true, ForeignKeyRule.CASCADE, ForeignKeyRule.NO_ACTION);
    public static final ForeignKey<PolicyConditionRecord, PolicyRecord> POLICYCONDITION_POLICY_FK = Internal.createForeignKey(PolicyCondition.POLICYCONDITION, DSL.name("POLICYCONDITION_POLICY_FK"), new TableField[] { PolicyCondition.POLICYCONDITION.POLICY_ID }, Keys.POLICY_PK, new TableField[] { Policy.POLICY.ID }, true, ForeignKeyRule.CASCADE, ForeignKeyRule.NO_ACTION);
    public static final ForeignKey<PolicyViolationRecord, ComponentRecord> POLICYVIOLATION_COMPONENT_FK = Internal.createForeignKey(PolicyViolation.POLICYVIOLATION, DSL.name("POLICYVIOLATION_COMPONENT_FK"), new TableField[] { PolicyViolation.POLICYVIOLATION.COMPONENT_ID }, Keys.COMPONENT_PK, new TableField[] { Component.COMPONENT.ID }, true, ForeignKeyRule.CASCADE, ForeignKeyRule.NO_ACTION);
    public static final ForeignKey<PolicyViolationRecord, PolicyConditionRecord> POLICYVIOLATION_POLICYCONDITION_FK = Internal.createForeignKey(PolicyViolation.POLICYVIOLATION, DSL.name("POLICYVIOLATION_POLICYCONDITION_FK"), new TableField[] { PolicyViolation.POLICYVIOLATION.POLICYCONDITION_ID }, Keys.POLICYCONDITION_PK, new TableField[] { PolicyCondition.POLICYCONDITION.ID }, true, ForeignKeyRule.CASCADE, ForeignKeyRule.NO_ACTION);
    public static final ForeignKey<PolicyViolationRecord, ProjectRecord> POLICYVIOLATION_PROJECT_FK = Internal.createForeignKey(PolicyViolation.POLICYVIOLATION, DSL.name("POLICYVIOLATION_PROJECT_FK"), new TableField[] { PolicyViolation.POLICYVIOLATION.PROJECT_ID }, Keys.PROJECT_PK, new TableField[] { Project.PROJECT.ID }, true, ForeignKeyRule.CASCADE, ForeignKeyRule.NO_ACTION);
    public static final ForeignKey<ProjectRecord, ProjectRecord> PROJECT__PROJECT_PROJECT_FK = Internal.createForeignKey(Project.PROJECT, DSL.name("PROJECT_PROJECT_FK"), new TableField[] { Project.PROJECT.PARENT_PROJECT_ID }, Keys.PROJECT_PK, new TableField[] { Project.PROJECT.ID }, true, ForeignKeyRule.CASCADE, ForeignKeyRule.NO_ACTION);
    public static final ForeignKey<ProjectAccessTeamsRecord, ProjectRecord> PROJECT_ACCESS_TEAMS__PROJECT_ACCESS_TEAMS_PROJECT_FK = Internal.createForeignKey(ProjectAccessTeams.PROJECT_ACCESS_TEAMS, DSL.name("PROJECT_ACCESS_TEAMS_PROJECT_FK"), new TableField[] { ProjectAccessTeams.PROJECT_ACCESS_TEAMS.PROJECT_ID }, Keys.PROJECT_PK, new TableField[] { Project.PROJECT.ID }, true, ForeignKeyRule.CASCADE, ForeignKeyRule.NO_ACTION);
    public static final ForeignKey<ProjectAccessTeamsRecord, TeamRecord> PROJECT_ACCESS_TEAMS__PROJECT_ACCESS_TEAMS_TEAM_FK = Internal.createForeignKey(ProjectAccessTeams.PROJECT_ACCESS_TEAMS, DSL.name("PROJECT_ACCESS_TEAMS_TEAM_FK"), new TableField[] { ProjectAccessTeams.PROJECT_ACCESS_TEAMS.TEAM_ID }, Keys.TEAM_PK, new TableField[] { Team.TEAM.ID }, true, ForeignKeyRule.CASCADE, ForeignKeyRule.NO_ACTION);
    public static final ForeignKey<ProjectHierarchyRecord, ProjectRecord> PROJECT_HIERARCHY__PROJECT_HIERARCHY_CHILD_PROJECT_FK = Internal.createForeignKey(ProjectHierarchy.PROJECT_HIERARCHY, DSL.name("PROJECT_HIERARCHY_CHILD_PROJECT_FK"), new TableField[] { ProjectHierarchy.PROJECT_HIERARCHY.CHILD_PROJECT_ID }, Keys.PROJECT_PK, new TableField[] { Project.PROJECT.ID }, true, ForeignKeyRule.NO_ACTION, ForeignKeyRule.NO_ACTION);
    public static final ForeignKey<ProjectHierarchyRecord, ProjectRecord> PROJECT_HIERARCHY__PROJECT_HIERARCHY_PARENT_PROJECT_FK = Internal.createForeignKey(ProjectHierarchy.PROJECT_HIERARCHY, DSL.name("PROJECT_HIERARCHY_PARENT_PROJECT_FK"), new TableField[] { ProjectHierarchy.PROJECT_HIERARCHY.PARENT_PROJECT_ID }, Keys.PROJECT_PK, new TableField[] { Project.PROJECT.ID }, true, ForeignKeyRule.NO_ACTION, ForeignKeyRule.NO_ACTION);
    public static final ForeignKey<ProjectMetadataRecord, ProjectRecord> PROJECT_METADATA__PROJECT_METADATA_PROJECT_ID_FK = Internal.createForeignKey(ProjectMetadata.PROJECT_METADATA, DSL.name("PROJECT_METADATA_PROJECT_ID_FK"), new TableField[] { ProjectMetadata.PROJECT_METADATA.PROJECT_ID }, Keys.PROJECT_PK, new TableField[] { Project.PROJECT.ID }, true, ForeignKeyRule.CASCADE, ForeignKeyRule.NO_ACTION);
    public static final ForeignKey<ProjectPropertyRecord, ProjectRecord> PROJECT_PROPERTY__PROJECT_PROPERTY_PROJECT_FK = Internal.createForeignKey(ProjectProperty.PROJECT_PROPERTY, DSL.name("PROJECT_PROPERTY_PROJECT_FK"), new TableField[] { ProjectProperty.PROJECT_PROPERTY.PROJECT_ID }, Keys.PROJECT_PK, new TableField[] { Project.PROJECT.ID }, true, ForeignKeyRule.CASCADE, ForeignKeyRule.NO_ACTION);
    public static final ForeignKey<ProjectMetricsRecord, ProjectRecord> PROJECTMETRICS_PROJECT_FK = Internal.createForeignKey(ProjectMetrics.PROJECTMETRICS, DSL.name("PROJECTMETRICS_PROJECT_FK"), new TableField[] { ProjectMetrics.PROJECTMETRICS.PROJECT_ID }, Keys.PROJECT_PK, new TableField[] { Project.PROJECT.ID }, true, ForeignKeyRule.CASCADE, ForeignKeyRule.NO_ACTION);
    public static final ForeignKey<ProjectsTagsRecord, ProjectRecord> PROJECTS_TAGS__PROJECTS_TAGS_PROJECT_FK = Internal.createForeignKey(ProjectsTags.PROJECTS_TAGS, DSL.name("PROJECTS_TAGS_PROJECT_FK"), new TableField[] { ProjectsTags.PROJECTS_TAGS.PROJECT_ID }, Keys.PROJECT_PK, new TableField[] { Project.PROJECT.ID }, true, ForeignKeyRule.CASCADE, ForeignKeyRule.NO_ACTION);
    public static final ForeignKey<ProjectsTagsRecord, TagRecord> PROJECTS_TAGS__PROJECTS_TAGS_TAG_FK = Internal.createForeignKey(ProjectsTags.PROJECTS_TAGS, DSL.name("PROJECTS_TAGS_TAG_FK"), new TableField[] { ProjectsTags.PROJECTS_TAGS.TAG_ID }, Keys.TAG_PK, new TableField[] { Tag.TAG.ID }, true, ForeignKeyRule.CASCADE, ForeignKeyRule.NO_ACTION);
    public static final ForeignKey<ServiceComponentRecord, ProjectRecord> SERVICECOMPONENT_PROJECT_FK = Internal.createForeignKey(ServiceComponent.SERVICECOMPONENT, DSL.name("SERVICECOMPONENT_PROJECT_FK"), new TableField[] { ServiceComponent.SERVICECOMPONENT.PROJECT_ID }, Keys.PROJECT_PK, new TableField[] { Project.PROJECT.ID }, true, ForeignKeyRule.CASCADE, ForeignKeyRule.NO_ACTION);
    public static final ForeignKey<ServiceComponentRecord, ServiceComponentRecord> SERVICECOMPONENT_SERVICECOMPONENT_FK = Internal.createForeignKey(ServiceComponent.SERVICECOMPONENT, DSL.name("SERVICECOMPONENT_SERVICECOMPONENT_FK"), new TableField[] { ServiceComponent.SERVICECOMPONENT.PARENT_SERVICECOMPONENT_ID }, Keys.SERVICECOMPONENT_PK, new TableField[] { ServiceComponent.SERVICECOMPONENT.ID }, true, ForeignKeyRule.CASCADE, ForeignKeyRule.NO_ACTION);
    public static final ForeignKey<ServiceComponentsVulnerabilitiesRecord, ServiceComponentRecord> SERVICECOMPONENTS_VULNERABILITIES_SERVICECOMPONENT_FK = Internal.createForeignKey(ServiceComponentsVulnerabilities.SERVICECOMPONENTS_VULNERABILITIES, DSL.name("SERVICECOMPONENTS_VULNERABILITIES_SERVICECOMPONENT_FK"), new TableField[] { ServiceComponentsVulnerabilities.SERVICECOMPONENTS_VULNERABILITIES.SERVICECOMPONENT_ID }, Keys.SERVICECOMPONENT_PK, new TableField[] { ServiceComponent.SERVICECOMPONENT.ID }, true, ForeignKeyRule.CASCADE, ForeignKeyRule.NO_ACTION);
    public static final ForeignKey<ServiceComponentsVulnerabilitiesRecord, VulnerabilityRecord> SERVICECOMPONENTS_VULNERABILITIES_VULNERABILITY_FK = Internal.createForeignKey(ServiceComponentsVulnerabilities.SERVICECOMPONENTS_VULNERABILITIES, DSL.name("SERVICECOMPONENTS_VULNERABILITIES_VULNERABILITY_FK"), new TableField[] { ServiceComponentsVulnerabilities.SERVICECOMPONENTS_VULNERABILITIES.VULNERABILITY_ID }, Keys.VULNERABILITY_PK, new TableField[] { Vulnerability.VULNERABILITY.ID }, true, ForeignKeyRule.CASCADE, ForeignKeyRule.NO_ACTION);
    public static final ForeignKey<TeamsPermissionsRecord, PermissionRecord> TEAMS_PERMISSIONS__TEAMS_PERMISSIONS_PERMISSION_FK = Internal.createForeignKey(TeamsPermissions.TEAMS_PERMISSIONS, DSL.name("TEAMS_PERMISSIONS_PERMISSION_FK"), new TableField[] { TeamsPermissions.TEAMS_PERMISSIONS.PERMISSION_ID }, Keys.PERMISSION_PK, new TableField[] { Permission.PERMISSION.ID }, true, ForeignKeyRule.CASCADE, ForeignKeyRule.NO_ACTION);
    public static final ForeignKey<TeamsPermissionsRecord, TeamRecord> TEAMS_PERMISSIONS__TEAMS_PERMISSIONS_TEAM_FK = Internal.createForeignKey(TeamsPermissions.TEAMS_PERMISSIONS, DSL.name("TEAMS_PERMISSIONS_TEAM_FK"), new TableField[] { TeamsPermissions.TEAMS_PERMISSIONS.TEAM_ID }, Keys.TEAM_PK, new TableField[] { Team.TEAM.ID }, true, ForeignKeyRule.CASCADE, ForeignKeyRule.NO_ACTION);
    public static final ForeignKey<UserProjectEffectivePermissionsRecord, LdapUserRecord> USER_PROJECT_EFFECTIVE_PERMISSIONS_LDAPUSER_FK = Internal.createForeignKey(UserProjectEffectivePermissions.USER_PROJECT_EFFECTIVE_PERMISSIONS, DSL.name("USER_PROJECT_EFFECTIVE_PERMISSIONS_LDAPUSER_FK"), new TableField[] { UserProjectEffectivePermissions.USER_PROJECT_EFFECTIVE_PERMISSIONS.LDAPUSER_ID }, Keys.LDAPUSER_PK, new TableField[] { LdapUser.LDAPUSER.ID }, true, ForeignKeyRule.NO_ACTION, ForeignKeyRule.NO_ACTION);
    public static final ForeignKey<UserProjectEffectivePermissionsRecord, ManagedUserRecord> USER_PROJECT_EFFECTIVE_PERMISSIONS_MANAGEDUSER_FK = Internal.createForeignKey(UserProjectEffectivePermissions.USER_PROJECT_EFFECTIVE_PERMISSIONS, DSL.name("USER_PROJECT_EFFECTIVE_PERMISSIONS_MANAGEDUSER_FK"), new TableField[] { UserProjectEffectivePermissions.USER_PROJECT_EFFECTIVE_PERMISSIONS.MANAGEDUSER_ID }, Keys.MANAGEDUSER_PK, new TableField[] { ManagedUser.MANAGEDUSER.ID }, true, ForeignKeyRule.NO_ACTION, ForeignKeyRule.NO_ACTION);
    public static final ForeignKey<UserProjectEffectivePermissionsRecord, OidcUserRecord> USER_PROJECT_EFFECTIVE_PERMISSIONS_OIDCUSER_FK = Internal.createForeignKey(UserProjectEffectivePermissions.USER_PROJECT_EFFECTIVE_PERMISSIONS, DSL.name("USER_PROJECT_EFFECTIVE_PERMISSIONS_OIDCUSER_FK"), new TableField[] { UserProjectEffectivePermissions.USER_PROJECT_EFFECTIVE_PERMISSIONS.OIDCUSER_ID }, Keys.OIDCUSER_PK, new TableField[] { OidcUser.OIDCUSER.ID }, true, ForeignKeyRule.NO_ACTION, ForeignKeyRule.NO_ACTION);
    public static final ForeignKey<UserProjectEffectivePermissionsRecord, PermissionRecord> USER_PROJECT_EFFECTIVE_PERMISSIONS__USER_PROJECT_EFFECTIVE_PERMISSIONS_PERMISSION_ID_FK = Internal.createForeignKey(UserProjectEffectivePermissions.USER_PROJECT_EFFECTIVE_PERMISSIONS, DSL.name("USER_PROJECT_EFFECTIVE_PERMISSIONS_PERMISSION_ID_FK"), new TableField[] { UserProjectEffectivePermissions.USER_PROJECT_EFFECTIVE_PERMISSIONS.PERMISSION_ID }, Keys.PERMISSION_PK, new TableField[] { Permission.PERMISSION.ID }, true, ForeignKeyRule.CASCADE, ForeignKeyRule.NO_ACTION);
    public static final ForeignKey<UserProjectEffectivePermissionsRecord, PermissionRecord> USER_PROJECT_EFFECTIVE_PERMISSIONS__USER_PROJECT_EFFECTIVE_PERMISSIONS_PERMISSION_NAME_FK = Internal.createForeignKey(UserProjectEffectivePermissions.USER_PROJECT_EFFECTIVE_PERMISSIONS, DSL.name("USER_PROJECT_EFFECTIVE_PERMISSIONS_PERMISSION_NAME_FK"), new TableField[] { UserProjectEffectivePermissions.USER_PROJECT_EFFECTIVE_PERMISSIONS.PERMISSION_NAME }, Keys.PERMISSION_IDX, new TableField[] { Permission.PERMISSION.NAME }, true, ForeignKeyRule.CASCADE, ForeignKeyRule.NO_ACTION);
    public static final ForeignKey<UserProjectEffectivePermissionsRecord, ProjectRecord> USER_PROJECT_EFFECTIVE_PERMISSIONS__USER_PROJECT_EFFECTIVE_PERMISSIONS_PROJECT_FK = Internal.createForeignKey(UserProjectEffectivePermissions.USER_PROJECT_EFFECTIVE_PERMISSIONS, DSL.name("USER_PROJECT_EFFECTIVE_PERMISSIONS_PROJECT_FK"), new TableField[] { UserProjectEffectivePermissions.USER_PROJECT_EFFECTIVE_PERMISSIONS.PROJECT_ID }, Keys.PROJECT_PK, new TableField[] { Project.PROJECT.ID }, true, ForeignKeyRule.CASCADE, ForeignKeyRule.NO_ACTION);
    public static final ForeignKey<VexRecord, ProjectRecord> VEX__VEX_PROJECT_FK = Internal.createForeignKey(Vex.VEX, DSL.name("VEX_PROJECT_FK"), new TableField[] { Vex.VEX.PROJECT_ID }, Keys.PROJECT_PK, new TableField[] { Project.PROJECT.ID }, true, ForeignKeyRule.CASCADE, ForeignKeyRule.NO_ACTION);
    public static final ForeignKey<ViolationAnalysisRecord, ComponentRecord> VIOLATIONANALYSIS_COMPONENT_FK = Internal.createForeignKey(ViolationAnalysis.VIOLATIONANALYSIS, DSL.name("VIOLATIONANALYSIS_COMPONENT_FK"), new TableField[] { ViolationAnalysis.VIOLATIONANALYSIS.COMPONENT_ID }, Keys.COMPONENT_PK, new TableField[] { Component.COMPONENT.ID }, true, ForeignKeyRule.CASCADE, ForeignKeyRule.NO_ACTION);
    public static final ForeignKey<ViolationAnalysisRecord, PolicyViolationRecord> VIOLATIONANALYSIS_POLICYVIOLATION_FK = Internal.createForeignKey(ViolationAnalysis.VIOLATIONANALYSIS, DSL.name("VIOLATIONANALYSIS_POLICYVIOLATION_FK"), new TableField[] { ViolationAnalysis.VIOLATIONANALYSIS.POLICYVIOLATION_ID }, Keys.POLICYVIOLATION_PK, new TableField[] { PolicyViolation.POLICYVIOLATION.ID }, true, ForeignKeyRule.CASCADE, ForeignKeyRule.NO_ACTION);
    public static final ForeignKey<ViolationAnalysisRecord, ProjectRecord> VIOLATIONANALYSIS_PROJECT_FK = Internal.createForeignKey(ViolationAnalysis.VIOLATIONANALYSIS, DSL.name("VIOLATIONANALYSIS_PROJECT_FK"), new TableField[] { ViolationAnalysis.VIOLATIONANALYSIS.PROJECT_ID }, Keys.PROJECT_PK, new TableField[] { Project.PROJECT.ID }, true, ForeignKeyRule.CASCADE, ForeignKeyRule.NO_ACTION);
    public static final ForeignKey<ViolationAnalysisCommentRecord, ViolationAnalysisRecord> VIOLATIONANALYSISCOMMENT_VIOLATIONANALYSIS_FK = Internal.createForeignKey(ViolationAnalysisComment.VIOLATIONANALYSISCOMMENT, DSL.name("VIOLATIONANALYSISCOMMENT_VIOLATIONANALYSIS_FK"), new TableField[] { ViolationAnalysisComment.VIOLATIONANALYSISCOMMENT.VIOLATIONANALYSIS_ID }, Keys.VIOLATIONANALYSIS_PK, new TableField[] { ViolationAnalysis.VIOLATIONANALYSIS.ID }, true, ForeignKeyRule.CASCADE, ForeignKeyRule.NO_ACTION);
    public static final ForeignKey<VulnerabilitiesTagsRecord, TagRecord> VULNERABILITIES_TAGS__VULNERABILITIES_TAGS_TAG_FK = Internal.createForeignKey(VulnerabilitiesTags.VULNERABILITIES_TAGS, DSL.name("VULNERABILITIES_TAGS_TAG_FK"), new TableField[] { VulnerabilitiesTags.VULNERABILITIES_TAGS.TAG_ID }, Keys.TAG_PK, new TableField[] { Tag.TAG.ID }, true, ForeignKeyRule.CASCADE, ForeignKeyRule.NO_ACTION);
    public static final ForeignKey<VulnerabilitiesTagsRecord, VulnerabilityRecord> VULNERABILITIES_TAGS__VULNERABILITIES_TAGS_VULNERABILITY_FK = Internal.createForeignKey(VulnerabilitiesTags.VULNERABILITIES_TAGS, DSL.name("VULNERABILITIES_TAGS_VULNERABILITY_FK"), new TableField[] { VulnerabilitiesTags.VULNERABILITIES_TAGS.VULNERABILITY_ID }, Keys.VULNERABILITY_PK, new TableField[] { Vulnerability.VULNERABILITY.ID }, true, ForeignKeyRule.CASCADE, ForeignKeyRule.NO_ACTION);
    public static final ForeignKey<VulnerableSoftwareVulnerabilitiesRecord, VulnerabilityRecord> VULNERABLESOFTWARE_VULNERABILITIES_VULNERABILITY_FK = Internal.createForeignKey(VulnerableSoftwareVulnerabilities.VULNERABLESOFTWARE_VULNERABILITIES, DSL.name("VULNERABLESOFTWARE_VULNERABILITIES_VULNERABILITY_FK"), new TableField[] { VulnerableSoftwareVulnerabilities.VULNERABLESOFTWARE_VULNERABILITIES.VULNERABILITY_ID }, Keys.VULNERABILITY_PK, new TableField[] { Vulnerability.VULNERABILITY.ID }, true, ForeignKeyRule.CASCADE, ForeignKeyRule.NO_ACTION);
    public static final ForeignKey<VulnerableSoftwareVulnerabilitiesRecord, VulnerableSoftwareRecord> VULNERABLESOFTWARE_VULNERABILITIES_VULNERABLESOFTWARE_FK = Internal.createForeignKey(VulnerableSoftwareVulnerabilities.VULNERABLESOFTWARE_VULNERABILITIES, DSL.name("VULNERABLESOFTWARE_VULNERABILITIES_VULNERABLESOFTWARE_FK"), new TableField[] { VulnerableSoftwareVulnerabilities.VULNERABLESOFTWARE_VULNERABILITIES.VULNERABLESOFTWARE_ID }, Keys.VULNERABLESOFTWARE_PK, new TableField[] { VulnerableSoftware.VULNERABLESOFTWARE.ID }, true, ForeignKeyRule.CASCADE, ForeignKeyRule.NO_ACTION);
    public static final ForeignKey<WorkflowStateRecord, WorkflowStateRecord> WORKFLOW_STATE__WORKFLOW_STATE_WORKFLOW_STATE_FK = Internal.createForeignKey(WorkflowState.WORKFLOW_STATE, DSL.name("WORKFLOW_STATE_WORKFLOW_STATE_FK"), new TableField[] { WorkflowState.WORKFLOW_STATE.PARENT_STEP_ID }, Keys.WORKFLOW_STATE_PK, new TableField[] { WorkflowState.WORKFLOW_STATE.ID }, true, ForeignKeyRule.CASCADE, ForeignKeyRule.NO_ACTION);
}
