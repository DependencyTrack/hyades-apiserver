/*
 * This file is generated by jOOQ.
 */
package org.dependencytrack.persistence.jooq.generated.tables;


import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import javax.annotation.processing.Generated;

import org.dependencytrack.persistence.jooq.generated.DefaultSchema;
import org.dependencytrack.persistence.jooq.generated.Keys;
import org.dependencytrack.persistence.jooq.generated.tables.records.ConfigPropertyRecord;
import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.20.4",
        "schema version:v5.6.0-28"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class ConfigProperty extends TableImpl<ConfigPropertyRecord> {

    private static final long serialVersionUID = 1282853723;

    /**
     * The reference instance of <code>CONFIGPROPERTY</code>
     */
    public static final ConfigProperty CONFIGPROPERTY = new ConfigProperty();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ConfigPropertyRecord> getRecordType() {
        return ConfigPropertyRecord.class;
    }

    /**
     * The column <code>CONFIGPROPERTY.ID</code>.
     */
    public final TableField<ConfigPropertyRecord, Long> id = createField(DSL.name("ID"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>CONFIGPROPERTY.DESCRIPTION</code>.
     */
    public final TableField<ConfigPropertyRecord, String> description = createField(DSL.name("DESCRIPTION"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>CONFIGPROPERTY.GROUPNAME</code>.
     */
    public final TableField<ConfigPropertyRecord, String> groupName = createField(DSL.name("GROUPNAME"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>CONFIGPROPERTY.PROPERTYNAME</code>.
     */
    public final TableField<ConfigPropertyRecord, String> propertyName = createField(DSL.name("PROPERTYNAME"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>CONFIGPROPERTY.PROPERTYTYPE</code>.
     */
    public final TableField<ConfigPropertyRecord, String> propertyType = createField(DSL.name("PROPERTYTYPE"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>CONFIGPROPERTY.PROPERTYVALUE</code>.
     */
    public final TableField<ConfigPropertyRecord, String> propertyValue = createField(DSL.name("PROPERTYVALUE"), SQLDataType.VARCHAR(1024), this, "");

    private ConfigProperty(Name alias, Table<ConfigPropertyRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private ConfigProperty(Name alias, Table<ConfigPropertyRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>CONFIGPROPERTY</code> table reference
     */
    public ConfigProperty(String alias) {
        this(DSL.name(alias), CONFIGPROPERTY);
    }

    /**
     * Create an aliased <code>CONFIGPROPERTY</code> table reference
     */
    public ConfigProperty(Name alias) {
        this(alias, CONFIGPROPERTY);
    }

    /**
     * Create a <code>CONFIGPROPERTY</code> table reference
     */
    public ConfigProperty() {
        this(DSL.name("CONFIGPROPERTY"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public Identity<ConfigPropertyRecord, Long> getIdentity() {
        return (Identity<ConfigPropertyRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<ConfigPropertyRecord> getPrimaryKey() {
        return Keys.CONFIGPROPERTY_PK;
    }

    @Override
    public List<UniqueKey<ConfigPropertyRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.CONFIGPROPERTY_U1);
    }

    @Override
    public ConfigProperty as(String alias) {
        return new ConfigProperty(DSL.name(alias), this);
    }

    @Override
    public ConfigProperty as(Name alias) {
        return new ConfigProperty(alias, this);
    }

    @Override
    public ConfigProperty as(Table<?> alias) {
        return new ConfigProperty(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public ConfigProperty rename(String name) {
        return new ConfigProperty(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ConfigProperty rename(Name name) {
        return new ConfigProperty(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public ConfigProperty rename(Table<?> name) {
        return new ConfigProperty(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ConfigProperty where(Condition condition) {
        return new ConfigProperty(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ConfigProperty where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ConfigProperty where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ConfigProperty where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public ConfigProperty where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public ConfigProperty where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public ConfigProperty where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public ConfigProperty where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ConfigProperty whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ConfigProperty whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
