/*
 * This file is generated by jOOQ.
 */
package org.dependencytrack.persistence.jooq.generated.tables;


import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import javax.annotation.processing.Generated;

import org.dependencytrack.persistence.jooq.generated.DefaultSchema;
import org.dependencytrack.persistence.jooq.generated.Keys;
import org.dependencytrack.persistence.jooq.generated.tables.Policy.PolicyPath;
import org.dependencytrack.persistence.jooq.generated.tables.Tag.TagPath;
import org.dependencytrack.persistence.jooq.generated.tables.records.PolicyTagsRecord;
import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.20.4",
        "schema version:v5.6.0-28"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class PolicyTags extends TableImpl<PolicyTagsRecord> {

    private static final long serialVersionUID = 90177356;

    /**
     * The reference instance of <code>POLICY_TAGS</code>
     */
    public static final PolicyTags POLICY_TAGS = new PolicyTags();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PolicyTagsRecord> getRecordType() {
        return PolicyTagsRecord.class;
    }

    /**
     * The column <code>POLICY_TAGS.POLICY_ID</code>.
     */
    public final TableField<PolicyTagsRecord, Long> policyId = createField(DSL.name("POLICY_ID"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>POLICY_TAGS.TAG_ID</code>.
     */
    public final TableField<PolicyTagsRecord, Long> tagId = createField(DSL.name("TAG_ID"), SQLDataType.BIGINT.nullable(false), this, "");

    private PolicyTags(Name alias, Table<PolicyTagsRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private PolicyTags(Name alias, Table<PolicyTagsRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>POLICY_TAGS</code> table reference
     */
    public PolicyTags(String alias) {
        this(DSL.name(alias), POLICY_TAGS);
    }

    /**
     * Create an aliased <code>POLICY_TAGS</code> table reference
     */
    public PolicyTags(Name alias) {
        this(alias, POLICY_TAGS);
    }

    /**
     * Create a <code>POLICY_TAGS</code> table reference
     */
    public PolicyTags() {
        this(DSL.name("POLICY_TAGS"), null);
    }

    public <O extends Record> PolicyTags(Table<O> path, ForeignKey<O, PolicyTagsRecord> childPath, InverseForeignKey<O, PolicyTagsRecord> parentPath) {
        super(path, childPath, parentPath, POLICY_TAGS);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    @Generated(
        value = {
            "https://www.jooq.org",
            "jOOQ version:3.20.4",
            "schema version:v5.6.0-28"
        },
        comments = "This class is generated by jOOQ"
    )
    public static class PolicyTagsPath extends PolicyTags implements Path<PolicyTagsRecord> {

        private static final long serialVersionUID = 90177356;
        public <O extends Record> PolicyTagsPath(Table<O> path, ForeignKey<O, PolicyTagsRecord> childPath, InverseForeignKey<O, PolicyTagsRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private PolicyTagsPath(Name alias, Table<PolicyTagsRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public PolicyTagsPath as(String alias) {
            return new PolicyTagsPath(DSL.name(alias), this);
        }

        @Override
        public PolicyTagsPath as(Name alias) {
            return new PolicyTagsPath(alias, this);
        }

        @Override
        public PolicyTagsPath as(Table<?> alias) {
            return new PolicyTagsPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public UniqueKey<PolicyTagsRecord> getPrimaryKey() {
        return Keys.POLICY_TAGS_PK;
    }

    @Override
    public List<ForeignKey<PolicyTagsRecord, ?>> getReferences() {
        return Arrays.asList(Keys.POLICY_TAGS_POLICY_FK, Keys.POLICY_TAGS_TAG_FK);
    }

    private transient PolicyPath _policy;

    /**
     * Get the implicit join path to the <code>POLICY</code> table.
     */
    public PolicyPath policy() {
        if (_policy == null)
            _policy = new PolicyPath(this, Keys.POLICY_TAGS_POLICY_FK, null);

        return _policy;
    }

    private transient TagPath _tag;

    /**
     * Get the implicit join path to the <code>TAG</code> table.
     */
    public TagPath tag() {
        if (_tag == null)
            _tag = new TagPath(this, Keys.POLICY_TAGS_TAG_FK, null);

        return _tag;
    }

    @Override
    public PolicyTags as(String alias) {
        return new PolicyTags(DSL.name(alias), this);
    }

    @Override
    public PolicyTags as(Name alias) {
        return new PolicyTags(alias, this);
    }

    @Override
    public PolicyTags as(Table<?> alias) {
        return new PolicyTags(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public PolicyTags rename(String name) {
        return new PolicyTags(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public PolicyTags rename(Name name) {
        return new PolicyTags(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public PolicyTags rename(Table<?> name) {
        return new PolicyTags(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public PolicyTags where(Condition condition) {
        return new PolicyTags(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public PolicyTags where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public PolicyTags where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public PolicyTags where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public PolicyTags where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public PolicyTags where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public PolicyTags where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public PolicyTags where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public PolicyTags whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public PolicyTags whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
