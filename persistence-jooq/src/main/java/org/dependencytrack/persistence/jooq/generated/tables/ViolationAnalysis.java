/*
 * This file is generated by jOOQ.
 */
package org.dependencytrack.persistence.jooq.generated.tables;


import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.dependencytrack.persistence.jooq.generated.Indexes;
import org.dependencytrack.persistence.jooq.generated.Keys;
import org.dependencytrack.persistence.jooq.generated.Public;
import org.dependencytrack.persistence.jooq.generated.tables.Component.ComponentPath;
import org.dependencytrack.persistence.jooq.generated.tables.PolicyViolation.PolicyviolationPath;
import org.dependencytrack.persistence.jooq.generated.tables.Project.ProjectPath;
import org.dependencytrack.persistence.jooq.generated.tables.ViolationAnalysisComment.ViolationanalysiscommentPath;
import org.dependencytrack.persistence.jooq.generated.tables.records.ViolationAnalysisRecord;
import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class ViolationAnalysis extends TableImpl<ViolationAnalysisRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.VIOLATIONANALYSIS</code>
     */
    public static final ViolationAnalysis VIOLATIONANALYSIS = new ViolationAnalysis();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ViolationAnalysisRecord> getRecordType() {
        return ViolationAnalysisRecord.class;
    }

    /**
     * The column <code>public.VIOLATIONANALYSIS.ID</code>.
     */
    public final TableField<ViolationAnalysisRecord, Long> ID = createField(DSL.name("ID"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.VIOLATIONANALYSIS.STATE</code>.
     */
    public final TableField<ViolationAnalysisRecord, String> STATE = createField(DSL.name("STATE"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>public.VIOLATIONANALYSIS.COMPONENT_ID</code>.
     */
    public final TableField<ViolationAnalysisRecord, Long> COMPONENT_ID = createField(DSL.name("COMPONENT_ID"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>public.VIOLATIONANALYSIS.POLICYVIOLATION_ID</code>.
     */
    public final TableField<ViolationAnalysisRecord, Long> POLICYVIOLATION_ID = createField(DSL.name("POLICYVIOLATION_ID"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.VIOLATIONANALYSIS.PROJECT_ID</code>.
     */
    public final TableField<ViolationAnalysisRecord, Long> PROJECT_ID = createField(DSL.name("PROJECT_ID"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>public.VIOLATIONANALYSIS.SUPPRESSED</code>.
     */
    public final TableField<ViolationAnalysisRecord, Boolean> SUPPRESSED = createField(DSL.name("SUPPRESSED"), SQLDataType.BOOLEAN.nullable(false), this, "");

    private ViolationAnalysis(Name alias, Table<ViolationAnalysisRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private ViolationAnalysis(Name alias, Table<ViolationAnalysisRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.VIOLATIONANALYSIS</code> table reference
     */
    public ViolationAnalysis(String alias) {
        this(DSL.name(alias), VIOLATIONANALYSIS);
    }

    /**
     * Create an aliased <code>public.VIOLATIONANALYSIS</code> table reference
     */
    public ViolationAnalysis(Name alias) {
        this(alias, VIOLATIONANALYSIS);
    }

    /**
     * Create a <code>public.VIOLATIONANALYSIS</code> table reference
     */
    public ViolationAnalysis() {
        this(DSL.name("VIOLATIONANALYSIS"), null);
    }

    public <O extends Record> ViolationAnalysis(Table<O> path, ForeignKey<O, ViolationAnalysisRecord> childPath, InverseForeignKey<O, ViolationAnalysisRecord> parentPath) {
        super(path, childPath, parentPath, VIOLATIONANALYSIS);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class ViolationanalysisPath extends ViolationAnalysis implements Path<ViolationAnalysisRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> ViolationanalysisPath(Table<O> path, ForeignKey<O, ViolationAnalysisRecord> childPath, InverseForeignKey<O, ViolationAnalysisRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private ViolationanalysisPath(Name alias, Table<ViolationAnalysisRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public ViolationanalysisPath as(String alias) {
            return new ViolationanalysisPath(DSL.name(alias), this);
        }

        @Override
        public ViolationanalysisPath as(Name alias) {
            return new ViolationanalysisPath(alias, this);
        }

        @Override
        public ViolationanalysisPath as(Table<?> alias) {
            return new ViolationanalysisPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.VIOLATIONANALYSIS_COMPONENT_ID_IDX, Indexes.VIOLATIONANALYSIS_POLICYVIOLATION_ID_IDX);
    }

    @Override
    public Identity<ViolationAnalysisRecord, Long> getIdentity() {
        return (Identity<ViolationAnalysisRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<ViolationAnalysisRecord> getPrimaryKey() {
        return Keys.VIOLATIONANALYSIS_PK;
    }

    @Override
    public List<UniqueKey<ViolationAnalysisRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.VIOLATIONANALYSIS_COMPOSITE_IDX);
    }

    @Override
    public List<ForeignKey<ViolationAnalysisRecord, ?>> getReferences() {
        return Arrays.asList(Keys.VIOLATIONANALYSIS__VIOLATIONANALYSIS_COMPONENT_FK, Keys.VIOLATIONANALYSIS__VIOLATIONANALYSIS_POLICYVIOLATION_FK, Keys.VIOLATIONANALYSIS__VIOLATIONANALYSIS_PROJECT_FK);
    }

    private transient ComponentPath _component;

    /**
     * Get the implicit join path to the <code>public.COMPONENT</code> table.
     */
    public ComponentPath component() {
        if (_component == null)
            _component = new ComponentPath(this, Keys.VIOLATIONANALYSIS__VIOLATIONANALYSIS_COMPONENT_FK, null);

        return _component;
    }

    private transient PolicyviolationPath _policyviolation;

    /**
     * Get the implicit join path to the <code>public.POLICYVIOLATION</code>
     * table.
     */
    public PolicyviolationPath policyviolation() {
        if (_policyviolation == null)
            _policyviolation = new PolicyviolationPath(this, Keys.VIOLATIONANALYSIS__VIOLATIONANALYSIS_POLICYVIOLATION_FK, null);

        return _policyviolation;
    }

    private transient ProjectPath _project;

    /**
     * Get the implicit join path to the <code>public.PROJECT</code> table.
     */
    public ProjectPath project() {
        if (_project == null)
            _project = new ProjectPath(this, Keys.VIOLATIONANALYSIS__VIOLATIONANALYSIS_PROJECT_FK, null);

        return _project;
    }

    private transient ViolationanalysiscommentPath _violationanalysiscomment;

    /**
     * Get the implicit to-many join path to the
     * <code>public.VIOLATIONANALYSISCOMMENT</code> table
     */
    public ViolationanalysiscommentPath violationanalysiscomment() {
        if (_violationanalysiscomment == null)
            _violationanalysiscomment = new ViolationanalysiscommentPath(this, null, Keys.VIOLATIONANALYSISCOMMENT__VIOLATIONANALYSISCOMMENT_VIOLATIONANALYSIS_FK.getInverseKey());

        return _violationanalysiscomment;
    }

    @Override
    public ViolationAnalysis as(String alias) {
        return new ViolationAnalysis(DSL.name(alias), this);
    }

    @Override
    public ViolationAnalysis as(Name alias) {
        return new ViolationAnalysis(alias, this);
    }

    @Override
    public ViolationAnalysis as(Table<?> alias) {
        return new ViolationAnalysis(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public ViolationAnalysis rename(String name) {
        return new ViolationAnalysis(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ViolationAnalysis rename(Name name) {
        return new ViolationAnalysis(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public ViolationAnalysis rename(Table<?> name) {
        return new ViolationAnalysis(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ViolationAnalysis where(Condition condition) {
        return new ViolationAnalysis(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ViolationAnalysis where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ViolationAnalysis where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ViolationAnalysis where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public ViolationAnalysis where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public ViolationAnalysis where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public ViolationAnalysis where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public ViolationAnalysis where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ViolationAnalysis whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ViolationAnalysis whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
