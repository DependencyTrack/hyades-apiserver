/*
 * This file is generated by jOOQ.
 */
package org.dependencytrack.persistence.jooq.generated.tables;


import java.time.OffsetDateTime;
import java.util.Collection;

import org.dependencytrack.persistence.jooq.generated.Keys;
import org.dependencytrack.persistence.jooq.generated.Public;
import org.dependencytrack.persistence.jooq.generated.tables.records.InstalledupgradesRecord;
import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Installedupgrades extends TableImpl<InstalledupgradesRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.INSTALLEDUPGRADES</code>
     */
    public static final Installedupgrades INSTALLEDUPGRADES = new Installedupgrades();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<InstalledupgradesRecord> getRecordType() {
        return InstalledupgradesRecord.class;
    }

    /**
     * The column <code>public.INSTALLEDUPGRADES.ID</code>.
     */
    public final TableField<InstalledupgradesRecord, Long> ID = createField(DSL.name("ID"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.INSTALLEDUPGRADES.ENDTIME</code>.
     */
    public final TableField<InstalledupgradesRecord, OffsetDateTime> ENDTIME = createField(DSL.name("ENDTIME"), SQLDataType.TIMESTAMPWITHTIMEZONE(6), this, "");

    /**
     * The column <code>public.INSTALLEDUPGRADES.STARTTIME</code>.
     */
    public final TableField<InstalledupgradesRecord, OffsetDateTime> STARTTIME = createField(DSL.name("STARTTIME"), SQLDataType.TIMESTAMPWITHTIMEZONE(6), this, "");

    /**
     * The column <code>public.INSTALLEDUPGRADES.UPGRADECLASS</code>.
     */
    public final TableField<InstalledupgradesRecord, String> UPGRADECLASS = createField(DSL.name("UPGRADECLASS"), SQLDataType.VARCHAR(255), this, "");

    private Installedupgrades(Name alias, Table<InstalledupgradesRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Installedupgrades(Name alias, Table<InstalledupgradesRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.INSTALLEDUPGRADES</code> table reference
     */
    public Installedupgrades(String alias) {
        this(DSL.name(alias), INSTALLEDUPGRADES);
    }

    /**
     * Create an aliased <code>public.INSTALLEDUPGRADES</code> table reference
     */
    public Installedupgrades(Name alias) {
        this(alias, INSTALLEDUPGRADES);
    }

    /**
     * Create a <code>public.INSTALLEDUPGRADES</code> table reference
     */
    public Installedupgrades() {
        this(DSL.name("INSTALLEDUPGRADES"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public Identity<InstalledupgradesRecord, Long> getIdentity() {
        return (Identity<InstalledupgradesRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<InstalledupgradesRecord> getPrimaryKey() {
        return Keys.INSTALLEDUPGRADES_PK;
    }

    @Override
    public Installedupgrades as(String alias) {
        return new Installedupgrades(DSL.name(alias), this);
    }

    @Override
    public Installedupgrades as(Name alias) {
        return new Installedupgrades(alias, this);
    }

    @Override
    public Installedupgrades as(Table<?> alias) {
        return new Installedupgrades(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Installedupgrades rename(String name) {
        return new Installedupgrades(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Installedupgrades rename(Name name) {
        return new Installedupgrades(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Installedupgrades rename(Table<?> name) {
        return new Installedupgrades(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Installedupgrades where(Condition condition) {
        return new Installedupgrades(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Installedupgrades where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Installedupgrades where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Installedupgrades where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Installedupgrades where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Installedupgrades where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Installedupgrades where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Installedupgrades where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Installedupgrades whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Installedupgrades whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
