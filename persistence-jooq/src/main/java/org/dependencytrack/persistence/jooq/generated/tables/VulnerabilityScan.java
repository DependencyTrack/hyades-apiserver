/*
 * This file is generated by jOOQ.
 */
package org.dependencytrack.persistence.jooq.generated.tables;


import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;
import java.util.UUID;

import org.dependencytrack.persistence.jooq.generated.Keys;
import org.dependencytrack.persistence.jooq.generated.Public;
import org.dependencytrack.persistence.jooq.generated.tables.records.VulnerabilityScanRecord;
import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class VulnerabilityScan extends TableImpl<VulnerabilityScanRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.VULNERABILITYSCAN</code>
     */
    public static final VulnerabilityScan VULNERABILITYSCAN = new VulnerabilityScan();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<VulnerabilityScanRecord> getRecordType() {
        return VulnerabilityScanRecord.class;
    }

    /**
     * The column <code>public.VULNERABILITYSCAN.ID</code>.
     */
    public final TableField<VulnerabilityScanRecord, Long> ID = createField(DSL.name("ID"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.VULNERABILITYSCAN.EXPECTED_RESULTS</code>.
     */
    public final TableField<VulnerabilityScanRecord, Integer> EXPECTED_RESULTS = createField(DSL.name("EXPECTED_RESULTS"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.VULNERABILITYSCAN.FAILURE_THRESHOLD</code>.
     */
    public final TableField<VulnerabilityScanRecord, Double> FAILURE_THRESHOLD = createField(DSL.name("FAILURE_THRESHOLD"), SQLDataType.DOUBLE, this, "");

    /**
     * The column <code>public.VULNERABILITYSCAN.RECEIVED_RESULTS</code>.
     */
    public final TableField<VulnerabilityScanRecord, Integer> RECEIVED_RESULTS = createField(DSL.name("RECEIVED_RESULTS"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.VULNERABILITYSCAN.SCAN_FAILED</code>.
     */
    public final TableField<VulnerabilityScanRecord, Long> SCAN_FAILED = createField(DSL.name("SCAN_FAILED"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>public.VULNERABILITYSCAN.SCAN_TOTAL</code>.
     */
    public final TableField<VulnerabilityScanRecord, Long> SCAN_TOTAL = createField(DSL.name("SCAN_TOTAL"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>public.VULNERABILITYSCAN.STARTED_AT</code>.
     */
    public final TableField<VulnerabilityScanRecord, OffsetDateTime> STARTED_AT = createField(DSL.name("STARTED_AT"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).nullable(false), this, "");

    /**
     * The column <code>public.VULNERABILITYSCAN.STATUS</code>.
     */
    public final TableField<VulnerabilityScanRecord, String> STATUS = createField(DSL.name("STATUS"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>public.VULNERABILITYSCAN.TARGET_IDENTIFIER</code>.
     */
    public final TableField<VulnerabilityScanRecord, UUID> TARGET_IDENTIFIER = createField(DSL.name("TARGET_IDENTIFIER"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.VULNERABILITYSCAN.TARGET_TYPE</code>.
     */
    public final TableField<VulnerabilityScanRecord, String> TARGET_TYPE = createField(DSL.name("TARGET_TYPE"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>public.VULNERABILITYSCAN.TOKEN</code>.
     */
    public final TableField<VulnerabilityScanRecord, UUID> TOKEN = createField(DSL.name("TOKEN"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.VULNERABILITYSCAN.UPDATED_AT</code>.
     */
    public final TableField<VulnerabilityScanRecord, OffsetDateTime> UPDATED_AT = createField(DSL.name("UPDATED_AT"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).nullable(false), this, "");

    /**
     * The column <code>public.VULNERABILITYSCAN.VERSION</code>.
     */
    public final TableField<VulnerabilityScanRecord, Long> VERSION = createField(DSL.name("VERSION"), SQLDataType.BIGINT.nullable(false), this, "");

    private VulnerabilityScan(Name alias, Table<VulnerabilityScanRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private VulnerabilityScan(Name alias, Table<VulnerabilityScanRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.VULNERABILITYSCAN</code> table reference
     */
    public VulnerabilityScan(String alias) {
        this(DSL.name(alias), VULNERABILITYSCAN);
    }

    /**
     * Create an aliased <code>public.VULNERABILITYSCAN</code> table reference
     */
    public VulnerabilityScan(Name alias) {
        this(alias, VULNERABILITYSCAN);
    }

    /**
     * Create a <code>public.VULNERABILITYSCAN</code> table reference
     */
    public VulnerabilityScan() {
        this(DSL.name("VULNERABILITYSCAN"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public Identity<VulnerabilityScanRecord, Long> getIdentity() {
        return (Identity<VulnerabilityScanRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<VulnerabilityScanRecord> getPrimaryKey() {
        return Keys.VULNERABILITYSCAN_PK;
    }

    @Override
    public List<UniqueKey<VulnerabilityScanRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.VULNERABILITY_SCAN_TOKEN_IDX);
    }

    @Override
    public VulnerabilityScan as(String alias) {
        return new VulnerabilityScan(DSL.name(alias), this);
    }

    @Override
    public VulnerabilityScan as(Name alias) {
        return new VulnerabilityScan(alias, this);
    }

    @Override
    public VulnerabilityScan as(Table<?> alias) {
        return new VulnerabilityScan(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public VulnerabilityScan rename(String name) {
        return new VulnerabilityScan(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public VulnerabilityScan rename(Name name) {
        return new VulnerabilityScan(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public VulnerabilityScan rename(Table<?> name) {
        return new VulnerabilityScan(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public VulnerabilityScan where(Condition condition) {
        return new VulnerabilityScan(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public VulnerabilityScan where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public VulnerabilityScan where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public VulnerabilityScan where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public VulnerabilityScan where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public VulnerabilityScan where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public VulnerabilityScan where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public VulnerabilityScan where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public VulnerabilityScan whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public VulnerabilityScan whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
