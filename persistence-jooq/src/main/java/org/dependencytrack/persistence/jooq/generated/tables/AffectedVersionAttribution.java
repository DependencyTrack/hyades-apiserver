/*
 * This file is generated by jOOQ.
 */
package org.dependencytrack.persistence.jooq.generated.tables;


import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;
import java.util.UUID;

import javax.annotation.processing.Generated;

import org.dependencytrack.persistence.jooq.generated.DefaultSchema;
import org.dependencytrack.persistence.jooq.generated.Indexes;
import org.dependencytrack.persistence.jooq.generated.Keys;
import org.dependencytrack.persistence.jooq.generated.tables.Vulnerability.VulnerabilityPath;
import org.dependencytrack.persistence.jooq.generated.tables.VulnerableSoftware.VulnerableSoftwarePath;
import org.dependencytrack.persistence.jooq.generated.tables.records.AffectedVersionAttributionRecord;
import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.20.4",
        "schema version:v5.6.0-28"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class AffectedVersionAttribution extends TableImpl<AffectedVersionAttributionRecord> {

    private static final long serialVersionUID = 1168662434;

    /**
     * The reference instance of <code>AFFECTEDVERSIONATTRIBUTION</code>
     */
    public static final AffectedVersionAttribution AFFECTEDVERSIONATTRIBUTION = new AffectedVersionAttribution();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<AffectedVersionAttributionRecord> getRecordType() {
        return AffectedVersionAttributionRecord.class;
    }

    /**
     * The column <code>AFFECTEDVERSIONATTRIBUTION.ID</code>.
     */
    public final TableField<AffectedVersionAttributionRecord, Long> id = createField(DSL.name("ID"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>AFFECTEDVERSIONATTRIBUTION.FIRST_SEEN</code>.
     */
    public final TableField<AffectedVersionAttributionRecord, OffsetDateTime> firstSeen = createField(DSL.name("FIRST_SEEN"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).nullable(false), this, "");

    /**
     * The column <code>AFFECTEDVERSIONATTRIBUTION.LAST_SEEN</code>.
     */
    public final TableField<AffectedVersionAttributionRecord, OffsetDateTime> lastSeen = createField(DSL.name("LAST_SEEN"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).nullable(false), this, "");

    /**
     * The column <code>AFFECTEDVERSIONATTRIBUTION.SOURCE</code>.
     */
    public final TableField<AffectedVersionAttributionRecord, String> source = createField(DSL.name("SOURCE"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>AFFECTEDVERSIONATTRIBUTION.UUID</code>.
     */
    public final TableField<AffectedVersionAttributionRecord, UUID> uuid = createField(DSL.name("UUID"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>AFFECTEDVERSIONATTRIBUTION.VULNERABILITY</code>.
     */
    public final TableField<AffectedVersionAttributionRecord, Long> vulnerability = createField(DSL.name("VULNERABILITY"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>AFFECTEDVERSIONATTRIBUTION.VULNERABLE_SOFTWARE</code>.
     */
    public final TableField<AffectedVersionAttributionRecord, Long> vulnerableSoftware = createField(DSL.name("VULNERABLE_SOFTWARE"), SQLDataType.BIGINT.nullable(false), this, "");

    private AffectedVersionAttribution(Name alias, Table<AffectedVersionAttributionRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private AffectedVersionAttribution(Name alias, Table<AffectedVersionAttributionRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>AFFECTEDVERSIONATTRIBUTION</code> table reference
     */
    public AffectedVersionAttribution(String alias) {
        this(DSL.name(alias), AFFECTEDVERSIONATTRIBUTION);
    }

    /**
     * Create an aliased <code>AFFECTEDVERSIONATTRIBUTION</code> table reference
     */
    public AffectedVersionAttribution(Name alias) {
        this(alias, AFFECTEDVERSIONATTRIBUTION);
    }

    /**
     * Create a <code>AFFECTEDVERSIONATTRIBUTION</code> table reference
     */
    public AffectedVersionAttribution() {
        this(DSL.name("AFFECTEDVERSIONATTRIBUTION"), null);
    }

    public <O extends Record> AffectedVersionAttribution(Table<O> path, ForeignKey<O, AffectedVersionAttributionRecord> childPath, InverseForeignKey<O, AffectedVersionAttributionRecord> parentPath) {
        super(path, childPath, parentPath, AFFECTEDVERSIONATTRIBUTION);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    @Generated(
        value = {
            "https://www.jooq.org",
            "jOOQ version:3.20.4",
            "schema version:v5.6.0-28"
        },
        comments = "This class is generated by jOOQ"
    )
    public static class AffectedVersionAttributionPath extends AffectedVersionAttribution implements Path<AffectedVersionAttributionRecord> {

        private static final long serialVersionUID = 1168662434;
        public <O extends Record> AffectedVersionAttributionPath(Table<O> path, ForeignKey<O, AffectedVersionAttributionRecord> childPath, InverseForeignKey<O, AffectedVersionAttributionRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private AffectedVersionAttributionPath(Name alias, Table<AffectedVersionAttributionRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public AffectedVersionAttributionPath as(String alias) {
            return new AffectedVersionAttributionPath(DSL.name(alias), this);
        }

        @Override
        public AffectedVersionAttributionPath as(Name alias) {
            return new AffectedVersionAttributionPath(alias, this);
        }

        @Override
        public AffectedVersionAttributionPath as(Table<?> alias) {
            return new AffectedVersionAttributionPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.AFFECTEDVERSIONATTRIBUTION_KEYS_IDX);
    }

    @Override
    public Identity<AffectedVersionAttributionRecord, Long> getIdentity() {
        return (Identity<AffectedVersionAttributionRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<AffectedVersionAttributionRecord> getPrimaryKey() {
        return Keys.AFFECTEDVERSIONATTRIBUTION_PK;
    }

    @Override
    public List<UniqueKey<AffectedVersionAttributionRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.AFFECTEDVERSIONATTRIBUTION_UUID_IDX);
    }

    @Override
    public List<ForeignKey<AffectedVersionAttributionRecord, ?>> getReferences() {
        return Arrays.asList(Keys.AFFECTEDVERSIONATTRIBUTION_VULNERABILITY_FK, Keys.AFFECTEDVERSIONATTRIBUTION_VULNERABLESOFTWARE_FK);
    }

    private transient VulnerabilityPath _vulnerability;

    /**
     * Get the implicit join path to the <code>VULNERABILITY</code> table.
     */
    public VulnerabilityPath vulnerability() {
        if (_vulnerability == null)
            _vulnerability = new VulnerabilityPath(this, Keys.AFFECTEDVERSIONATTRIBUTION_VULNERABILITY_FK, null);

        return _vulnerability;
    }

    private transient VulnerableSoftwarePath _vulnerableSoftware;

    /**
     * Get the implicit join path to the <code>VULNERABLESOFTWARE</code> table.
     */
    public VulnerableSoftwarePath vulnerableSoftware() {
        if (_vulnerableSoftware == null)
            _vulnerableSoftware = new VulnerableSoftwarePath(this, Keys.AFFECTEDVERSIONATTRIBUTION_VULNERABLESOFTWARE_FK, null);

        return _vulnerableSoftware;
    }

    @Override
    public AffectedVersionAttribution as(String alias) {
        return new AffectedVersionAttribution(DSL.name(alias), this);
    }

    @Override
    public AffectedVersionAttribution as(Name alias) {
        return new AffectedVersionAttribution(alias, this);
    }

    @Override
    public AffectedVersionAttribution as(Table<?> alias) {
        return new AffectedVersionAttribution(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public AffectedVersionAttribution rename(String name) {
        return new AffectedVersionAttribution(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public AffectedVersionAttribution rename(Name name) {
        return new AffectedVersionAttribution(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public AffectedVersionAttribution rename(Table<?> name) {
        return new AffectedVersionAttribution(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public AffectedVersionAttribution where(Condition condition) {
        return new AffectedVersionAttribution(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public AffectedVersionAttribution where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public AffectedVersionAttribution where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public AffectedVersionAttribution where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public AffectedVersionAttribution where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public AffectedVersionAttribution where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public AffectedVersionAttribution where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public AffectedVersionAttribution where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public AffectedVersionAttribution whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public AffectedVersionAttribution whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
