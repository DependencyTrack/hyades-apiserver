/*
 * This file is generated by jOOQ.
 */
package org.dependencytrack.persistence.jooq.generated.tables;


import java.util.Arrays;
import java.util.Collection;
import java.util.List;
import java.util.UUID;

import javax.annotation.processing.Generated;

import org.dependencytrack.persistence.jooq.generated.DefaultSchema;
import org.dependencytrack.persistence.jooq.generated.Indexes;
import org.dependencytrack.persistence.jooq.generated.Keys;
import org.dependencytrack.persistence.jooq.generated.tables.Component.ComponentPath;
import org.dependencytrack.persistence.jooq.generated.tables.LicenseGroupLicense.LicenseGroupLicensePath;
import org.dependencytrack.persistence.jooq.generated.tables.records.LicenseRecord;
import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.20.4",
        "schema version:v5.6.0-28"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class License extends TableImpl<LicenseRecord> {

    private static final long serialVersionUID = 1708455947;

    /**
     * The reference instance of <code>LICENSE</code>
     */
    public static final License LICENSE = new License();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<LicenseRecord> getRecordType() {
        return LicenseRecord.class;
    }

    /**
     * The column <code>LICENSE.ID</code>.
     */
    public final TableField<LicenseRecord, Long> id = createField(DSL.name("ID"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>LICENSE.COMMENT</code>.
     */
    public final TableField<LicenseRecord, String> comment = createField(DSL.name("COMMENT"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>LICENSE.ISCUSTOMLICENSE</code>.
     */
    public final TableField<LicenseRecord, Boolean> isCustomLicense = createField(DSL.name("ISCUSTOMLICENSE"), SQLDataType.BOOLEAN, this, "");

    /**
     * The column <code>LICENSE.ISDEPRECATED</code>.
     */
    public final TableField<LicenseRecord, Boolean> isDeprecated = createField(DSL.name("ISDEPRECATED"), SQLDataType.BOOLEAN.nullable(false), this, "");

    /**
     * The column <code>LICENSE.FSFLIBRE</code>.
     */
    public final TableField<LicenseRecord, Boolean> fsfLibre = createField(DSL.name("FSFLIBRE"), SQLDataType.BOOLEAN, this, "");

    /**
     * The column <code>LICENSE.HEADER</code>.
     */
    public final TableField<LicenseRecord, String> header = createField(DSL.name("HEADER"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>LICENSE.LICENSEID</code>.
     */
    public final TableField<LicenseRecord, String> licenseId = createField(DSL.name("LICENSEID"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>LICENSE.NAME</code>.
     */
    public final TableField<LicenseRecord, String> name = createField(DSL.name("NAME"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>LICENSE.ISOSIAPPROVED</code>.
     */
    public final TableField<LicenseRecord, Boolean> isOsiApproved = createField(DSL.name("ISOSIAPPROVED"), SQLDataType.BOOLEAN.nullable(false), this, "");

    /**
     * The column <code>LICENSE.SEEALSO</code>.
     */
    public final TableField<LicenseRecord, byte[]> seeAlso = createField(DSL.name("SEEALSO"), SQLDataType.BLOB, this, "");

    /**
     * The column <code>LICENSE.TEMPLATE</code>.
     */
    public final TableField<LicenseRecord, String> template = createField(DSL.name("TEMPLATE"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>LICENSE.TEXT</code>.
     */
    public final TableField<LicenseRecord, String> text = createField(DSL.name("TEXT"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>LICENSE.UUID</code>.
     */
    public final TableField<LicenseRecord, UUID> uuid = createField(DSL.name("UUID"), SQLDataType.UUID.nullable(false), this, "");

    private License(Name alias, Table<LicenseRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private License(Name alias, Table<LicenseRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>LICENSE</code> table reference
     */
    public License(String alias) {
        this(DSL.name(alias), LICENSE);
    }

    /**
     * Create an aliased <code>LICENSE</code> table reference
     */
    public License(Name alias) {
        this(alias, LICENSE);
    }

    /**
     * Create a <code>LICENSE</code> table reference
     */
    public License() {
        this(DSL.name("LICENSE"), null);
    }

    public <O extends Record> License(Table<O> path, ForeignKey<O, LicenseRecord> childPath, InverseForeignKey<O, LicenseRecord> parentPath) {
        super(path, childPath, parentPath, LICENSE);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    @Generated(
        value = {
            "https://www.jooq.org",
            "jOOQ version:3.20.4",
            "schema version:v5.6.0-28"
        },
        comments = "This class is generated by jOOQ"
    )
    public static class LicensePath extends License implements Path<LicenseRecord> {

        private static final long serialVersionUID = 1708455947;
        public <O extends Record> LicensePath(Table<O> path, ForeignKey<O, LicenseRecord> childPath, InverseForeignKey<O, LicenseRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private LicensePath(Name alias, Table<LicenseRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public LicensePath as(String alias) {
            return new LicensePath(DSL.name(alias), this);
        }

        @Override
        public LicensePath as(Name alias) {
            return new LicensePath(alias, this);
        }

        @Override
        public LicensePath as(Table<?> alias) {
            return new LicensePath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.LICENSE_LICENSEID_IDX, Indexes.LICENSE_NAME_IDX);
    }

    @Override
    public Identity<LicenseRecord, Long> getIdentity() {
        return (Identity<LicenseRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<LicenseRecord> getPrimaryKey() {
        return Keys.LICENSE_PK;
    }

    @Override
    public List<UniqueKey<LicenseRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.LICENSE_UUID_IDX);
    }

    private transient ComponentPath _component;

    /**
     * Get the implicit to-many join path to the <code>COMPONENT</code> table
     */
    public ComponentPath component() {
        if (_component == null)
            _component = new ComponentPath(this, null, Keys.COMPONENT_LICENSE_FK.getInverseKey());

        return _component;
    }

    private transient LicenseGroupLicensePath _licenseGroupLicense;

    /**
     * Get the implicit to-many join path to the
     * <code>LICENSEGROUP_LICENSE</code> table
     */
    public LicenseGroupLicensePath licenseGroupLicense() {
        if (_licenseGroupLicense == null)
            _licenseGroupLicense = new LicenseGroupLicensePath(this, null, Keys.LICENSEGROUP_LICENSE_LICENSE_FK.getInverseKey());

        return _licenseGroupLicense;
    }

    @Override
    public License as(String alias) {
        return new License(DSL.name(alias), this);
    }

    @Override
    public License as(Name alias) {
        return new License(alias, this);
    }

    @Override
    public License as(Table<?> alias) {
        return new License(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public License rename(String name) {
        return new License(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public License rename(Name name) {
        return new License(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public License rename(Table<?> name) {
        return new License(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public License where(Condition condition) {
        return new License(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public License where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public License where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public License where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public License where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public License where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public License where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public License where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public License whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public License whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
