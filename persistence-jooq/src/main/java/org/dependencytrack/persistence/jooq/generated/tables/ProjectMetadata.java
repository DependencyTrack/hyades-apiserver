/*
 * This file is generated by jOOQ.
 */
package org.dependencytrack.persistence.jooq.generated.tables;


import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import javax.annotation.processing.Generated;

import org.dependencytrack.persistence.jooq.generated.DefaultSchema;
import org.dependencytrack.persistence.jooq.generated.Indexes;
import org.dependencytrack.persistence.jooq.generated.Keys;
import org.dependencytrack.persistence.jooq.generated.tables.Project.ProjectPath;
import org.dependencytrack.persistence.jooq.generated.tables.records.ProjectMetadataRecord;
import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.20.4",
        "schema version:v5.6.0-28"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class ProjectMetadata extends TableImpl<ProjectMetadataRecord> {

    private static final long serialVersionUID = -599705872;

    /**
     * The reference instance of <code>PROJECT_METADATA</code>
     */
    public static final ProjectMetadata PROJECT_METADATA = new ProjectMetadata();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ProjectMetadataRecord> getRecordType() {
        return ProjectMetadataRecord.class;
    }

    /**
     * The column <code>PROJECT_METADATA.ID</code>.
     */
    public final TableField<ProjectMetadataRecord, Long> id = createField(DSL.name("ID"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>PROJECT_METADATA.PROJECT_ID</code>.
     */
    public final TableField<ProjectMetadataRecord, Long> projectId = createField(DSL.name("PROJECT_ID"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>PROJECT_METADATA.SUPPLIER</code>.
     */
    public final TableField<ProjectMetadataRecord, String> supplier = createField(DSL.name("SUPPLIER"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>PROJECT_METADATA.AUTHORS</code>.
     */
    public final TableField<ProjectMetadataRecord, String> authors = createField(DSL.name("AUTHORS"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>PROJECT_METADATA.TOOLS</code>.
     */
    public final TableField<ProjectMetadataRecord, String> tools = createField(DSL.name("TOOLS"), SQLDataType.CLOB, this, "");

    private ProjectMetadata(Name alias, Table<ProjectMetadataRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private ProjectMetadata(Name alias, Table<ProjectMetadataRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>PROJECT_METADATA</code> table reference
     */
    public ProjectMetadata(String alias) {
        this(DSL.name(alias), PROJECT_METADATA);
    }

    /**
     * Create an aliased <code>PROJECT_METADATA</code> table reference
     */
    public ProjectMetadata(Name alias) {
        this(alias, PROJECT_METADATA);
    }

    /**
     * Create a <code>PROJECT_METADATA</code> table reference
     */
    public ProjectMetadata() {
        this(DSL.name("PROJECT_METADATA"), null);
    }

    public <O extends Record> ProjectMetadata(Table<O> path, ForeignKey<O, ProjectMetadataRecord> childPath, InverseForeignKey<O, ProjectMetadataRecord> parentPath) {
        super(path, childPath, parentPath, PROJECT_METADATA);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    @Generated(
        value = {
            "https://www.jooq.org",
            "jOOQ version:3.20.4",
            "schema version:v5.6.0-28"
        },
        comments = "This class is generated by jOOQ"
    )
    public static class ProjectMetadataPath extends ProjectMetadata implements Path<ProjectMetadataRecord> {

        private static final long serialVersionUID = -599705872;
        public <O extends Record> ProjectMetadataPath(Table<O> path, ForeignKey<O, ProjectMetadataRecord> childPath, InverseForeignKey<O, ProjectMetadataRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private ProjectMetadataPath(Name alias, Table<ProjectMetadataRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public ProjectMetadataPath as(String alias) {
            return new ProjectMetadataPath(DSL.name(alias), this);
        }

        @Override
        public ProjectMetadataPath as(Name alias) {
            return new ProjectMetadataPath(alias, this);
        }

        @Override
        public ProjectMetadataPath as(Table<?> alias) {
            return new ProjectMetadataPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.PROJECT_METADATA_PROJECT_ID_IDX);
    }

    @Override
    public Identity<ProjectMetadataRecord, Long> getIdentity() {
        return (Identity<ProjectMetadataRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<ProjectMetadataRecord> getPrimaryKey() {
        return Keys.PROJECT_METADATA_PK;
    }

    @Override
    public List<ForeignKey<ProjectMetadataRecord, ?>> getReferences() {
        return Arrays.asList(Keys.PROJECT_METADATA_PROJECT_ID_FK);
    }

    private transient ProjectPath _project;

    /**
     * Get the implicit join path to the <code>PROJECT</code> table.
     */
    public ProjectPath project() {
        if (_project == null)
            _project = new ProjectPath(this, Keys.PROJECT_METADATA_PROJECT_ID_FK, null);

        return _project;
    }

    @Override
    public ProjectMetadata as(String alias) {
        return new ProjectMetadata(DSL.name(alias), this);
    }

    @Override
    public ProjectMetadata as(Name alias) {
        return new ProjectMetadata(alias, this);
    }

    @Override
    public ProjectMetadata as(Table<?> alias) {
        return new ProjectMetadata(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public ProjectMetadata rename(String name) {
        return new ProjectMetadata(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ProjectMetadata rename(Name name) {
        return new ProjectMetadata(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public ProjectMetadata rename(Table<?> name) {
        return new ProjectMetadata(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ProjectMetadata where(Condition condition) {
        return new ProjectMetadata(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ProjectMetadata where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ProjectMetadata where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ProjectMetadata where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public ProjectMetadata where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public ProjectMetadata where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public ProjectMetadata where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public ProjectMetadata where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ProjectMetadata whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ProjectMetadata whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
