/*
 * This file is generated by jOOQ.
 */
package org.dependencytrack.persistence.jooq.generated.tables;


import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import javax.annotation.processing.Generated;

import org.dependencytrack.persistence.jooq.generated.DefaultSchema;
import org.dependencytrack.persistence.jooq.generated.Keys;
import org.dependencytrack.persistence.jooq.generated.tables.NotificationRule.NotificationRulePath;
import org.dependencytrack.persistence.jooq.generated.tables.Tag.TagPath;
import org.dependencytrack.persistence.jooq.generated.tables.records.NotificationRuleTagsRecord;
import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.20.4",
        "schema version:v5.6.0-28"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class NotificationRuleTags extends TableImpl<NotificationRuleTagsRecord> {

    private static final long serialVersionUID = 2086958220;

    /**
     * The reference instance of <code>NOTIFICATIONRULE_TAGS</code>
     */
    public static final NotificationRuleTags NOTIFICATIONRULE_TAGS = new NotificationRuleTags();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<NotificationRuleTagsRecord> getRecordType() {
        return NotificationRuleTagsRecord.class;
    }

    /**
     * The column <code>NOTIFICATIONRULE_TAGS.NOTIFICATIONRULE_ID</code>.
     */
    public final TableField<NotificationRuleTagsRecord, Long> notificationRuleId = createField(DSL.name("NOTIFICATIONRULE_ID"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>NOTIFICATIONRULE_TAGS.TAG_ID</code>.
     */
    public final TableField<NotificationRuleTagsRecord, Long> tagId = createField(DSL.name("TAG_ID"), SQLDataType.BIGINT.nullable(false), this, "");

    private NotificationRuleTags(Name alias, Table<NotificationRuleTagsRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private NotificationRuleTags(Name alias, Table<NotificationRuleTagsRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>NOTIFICATIONRULE_TAGS</code> table reference
     */
    public NotificationRuleTags(String alias) {
        this(DSL.name(alias), NOTIFICATIONRULE_TAGS);
    }

    /**
     * Create an aliased <code>NOTIFICATIONRULE_TAGS</code> table reference
     */
    public NotificationRuleTags(Name alias) {
        this(alias, NOTIFICATIONRULE_TAGS);
    }

    /**
     * Create a <code>NOTIFICATIONRULE_TAGS</code> table reference
     */
    public NotificationRuleTags() {
        this(DSL.name("NOTIFICATIONRULE_TAGS"), null);
    }

    public <O extends Record> NotificationRuleTags(Table<O> path, ForeignKey<O, NotificationRuleTagsRecord> childPath, InverseForeignKey<O, NotificationRuleTagsRecord> parentPath) {
        super(path, childPath, parentPath, NOTIFICATIONRULE_TAGS);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    @Generated(
        value = {
            "https://www.jooq.org",
            "jOOQ version:3.20.4",
            "schema version:v5.6.0-28"
        },
        comments = "This class is generated by jOOQ"
    )
    public static class NotificationRuleTagsPath extends NotificationRuleTags implements Path<NotificationRuleTagsRecord> {

        private static final long serialVersionUID = 2086958220;
        public <O extends Record> NotificationRuleTagsPath(Table<O> path, ForeignKey<O, NotificationRuleTagsRecord> childPath, InverseForeignKey<O, NotificationRuleTagsRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private NotificationRuleTagsPath(Name alias, Table<NotificationRuleTagsRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public NotificationRuleTagsPath as(String alias) {
            return new NotificationRuleTagsPath(DSL.name(alias), this);
        }

        @Override
        public NotificationRuleTagsPath as(Name alias) {
            return new NotificationRuleTagsPath(alias, this);
        }

        @Override
        public NotificationRuleTagsPath as(Table<?> alias) {
            return new NotificationRuleTagsPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public UniqueKey<NotificationRuleTagsRecord> getPrimaryKey() {
        return Keys.NOTIFICATIONRULE_TAGS_PK;
    }

    @Override
    public List<ForeignKey<NotificationRuleTagsRecord, ?>> getReferences() {
        return Arrays.asList(Keys.NOTIFICATIONRULE_TAGS_NOTIFICATIONRULE_FK, Keys.NOTIFICATIONRULE_TAGS_TAG_FK);
    }

    private transient NotificationRulePath _notificationRule;

    /**
     * Get the implicit join path to the <code>NOTIFICATIONRULE</code> table.
     */
    public NotificationRulePath notificationRule() {
        if (_notificationRule == null)
            _notificationRule = new NotificationRulePath(this, Keys.NOTIFICATIONRULE_TAGS_NOTIFICATIONRULE_FK, null);

        return _notificationRule;
    }

    private transient TagPath _tag;

    /**
     * Get the implicit join path to the <code>TAG</code> table.
     */
    public TagPath tag() {
        if (_tag == null)
            _tag = new TagPath(this, Keys.NOTIFICATIONRULE_TAGS_TAG_FK, null);

        return _tag;
    }

    @Override
    public NotificationRuleTags as(String alias) {
        return new NotificationRuleTags(DSL.name(alias), this);
    }

    @Override
    public NotificationRuleTags as(Name alias) {
        return new NotificationRuleTags(alias, this);
    }

    @Override
    public NotificationRuleTags as(Table<?> alias) {
        return new NotificationRuleTags(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public NotificationRuleTags rename(String name) {
        return new NotificationRuleTags(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public NotificationRuleTags rename(Name name) {
        return new NotificationRuleTags(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public NotificationRuleTags rename(Table<?> name) {
        return new NotificationRuleTags(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public NotificationRuleTags where(Condition condition) {
        return new NotificationRuleTags(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public NotificationRuleTags where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public NotificationRuleTags where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public NotificationRuleTags where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public NotificationRuleTags where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public NotificationRuleTags where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public NotificationRuleTags where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public NotificationRuleTags where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public NotificationRuleTags whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public NotificationRuleTags whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
