/*
 * This file is generated by jOOQ.
 */
package org.dependencytrack.persistence.jooq.generated.tables;


import java.util.Arrays;
import java.util.Collection;
import java.util.List;
import java.util.UUID;

import javax.annotation.processing.Generated;

import org.dependencytrack.persistence.jooq.generated.DefaultSchema;
import org.dependencytrack.persistence.jooq.generated.Indexes;
import org.dependencytrack.persistence.jooq.generated.Keys;
import org.dependencytrack.persistence.jooq.generated.tables.records.VulnerabilityAliasRecord;
import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.20.4",
        "schema version:v5.6.0-28"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class VulnerabilityAlias extends TableImpl<VulnerabilityAliasRecord> {

    private static final long serialVersionUID = 1062762774;

    /**
     * The reference instance of <code>VULNERABILITYALIAS</code>
     */
    public static final VulnerabilityAlias VULNERABILITYALIAS = new VulnerabilityAlias();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<VulnerabilityAliasRecord> getRecordType() {
        return VulnerabilityAliasRecord.class;
    }

    /**
     * The column <code>VULNERABILITYALIAS.ID</code>.
     */
    public final TableField<VulnerabilityAliasRecord, Long> id = createField(DSL.name("ID"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>VULNERABILITYALIAS.CVE_ID</code>.
     */
    public final TableField<VulnerabilityAliasRecord, String> cveId = createField(DSL.name("CVE_ID"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>VULNERABILITYALIAS.GHSA_ID</code>.
     */
    public final TableField<VulnerabilityAliasRecord, String> ghsaId = createField(DSL.name("GHSA_ID"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>VULNERABILITYALIAS.GSD_ID</code>.
     */
    public final TableField<VulnerabilityAliasRecord, String> gsdId = createField(DSL.name("GSD_ID"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>VULNERABILITYALIAS.INTERNAL_ID</code>.
     */
    public final TableField<VulnerabilityAliasRecord, String> internalId = createField(DSL.name("INTERNAL_ID"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>VULNERABILITYALIAS.OSV_ID</code>.
     */
    public final TableField<VulnerabilityAliasRecord, String> osvId = createField(DSL.name("OSV_ID"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>VULNERABILITYALIAS.SNYK_ID</code>.
     */
    public final TableField<VulnerabilityAliasRecord, String> snykId = createField(DSL.name("SNYK_ID"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>VULNERABILITYALIAS.SONATYPE_ID</code>.
     */
    public final TableField<VulnerabilityAliasRecord, String> sonatypeId = createField(DSL.name("SONATYPE_ID"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>VULNERABILITYALIAS.UUID</code>.
     */
    public final TableField<VulnerabilityAliasRecord, UUID> uuid = createField(DSL.name("UUID"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>VULNERABILITYALIAS.VULNDB_ID</code>.
     */
    public final TableField<VulnerabilityAliasRecord, String> vulnDbId = createField(DSL.name("VULNDB_ID"), SQLDataType.VARCHAR(255), this, "");

    private VulnerabilityAlias(Name alias, Table<VulnerabilityAliasRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private VulnerabilityAlias(Name alias, Table<VulnerabilityAliasRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>VULNERABILITYALIAS</code> table reference
     */
    public VulnerabilityAlias(String alias) {
        this(DSL.name(alias), VULNERABILITYALIAS);
    }

    /**
     * Create an aliased <code>VULNERABILITYALIAS</code> table reference
     */
    public VulnerabilityAlias(Name alias) {
        this(alias, VULNERABILITYALIAS);
    }

    /**
     * Create a <code>VULNERABILITYALIAS</code> table reference
     */
    public VulnerabilityAlias() {
        this(DSL.name("VULNERABILITYALIAS"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.VULNERABILITYALIAS_CVE_ID_IDX, Indexes.VULNERABILITYALIAS_GHSA_ID_IDX, Indexes.VULNERABILITYALIAS_GSD_ID_IDX, Indexes.VULNERABILITYALIAS_INTERNAL_ID_IDX, Indexes.VULNERABILITYALIAS_OSV_ID_IDX, Indexes.VULNERABILITYALIAS_SNYK_ID_IDX, Indexes.VULNERABILITYALIAS_SONATYPE_ID_IDX, Indexes.VULNERABILITYALIAS_VULNDB_ID_IDX);
    }

    @Override
    public Identity<VulnerabilityAliasRecord, Long> getIdentity() {
        return (Identity<VulnerabilityAliasRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<VulnerabilityAliasRecord> getPrimaryKey() {
        return Keys.VULNERABILITYALIAS_PK;
    }

    @Override
    public List<UniqueKey<VulnerabilityAliasRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.VULNERABILITYALIAS_UUID_IDX);
    }

    @Override
    public VulnerabilityAlias as(String alias) {
        return new VulnerabilityAlias(DSL.name(alias), this);
    }

    @Override
    public VulnerabilityAlias as(Name alias) {
        return new VulnerabilityAlias(alias, this);
    }

    @Override
    public VulnerabilityAlias as(Table<?> alias) {
        return new VulnerabilityAlias(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public VulnerabilityAlias rename(String name) {
        return new VulnerabilityAlias(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public VulnerabilityAlias rename(Name name) {
        return new VulnerabilityAlias(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public VulnerabilityAlias rename(Table<?> name) {
        return new VulnerabilityAlias(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public VulnerabilityAlias where(Condition condition) {
        return new VulnerabilityAlias(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public VulnerabilityAlias where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public VulnerabilityAlias where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public VulnerabilityAlias where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public VulnerabilityAlias where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public VulnerabilityAlias where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public VulnerabilityAlias where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public VulnerabilityAlias where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public VulnerabilityAlias whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public VulnerabilityAlias whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
