/*
 * This file is part of Dependency-Track.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * SPDX-License-Identifier: Apache-2.0
 * Copyright (c) OWASP Foundation. All Rights Reserved.
 */
package org.dependencytrack.tasks.maintenance;

import org.dependencytrack.PersistenceCapableTest;
import org.dependencytrack.event.maintenance.VulnerabilityDatabaseMaintenanceEvent;
import org.dependencytrack.model.Vulnerability;
import org.dependencytrack.model.VulnerableSoftware;
import org.junit.Test;

import javax.jdo.JDOObjectNotFoundException;
import java.util.List;

import static org.assertj.core.api.Assertions.assertThatExceptionOfType;
import static org.assertj.core.api.Assertions.assertThatNoException;

public class VulnerabilityDatabaseMaintenanceTaskTest extends PersistenceCapableTest {

    @Test
    public void test() {
        final var vuln = new Vulnerability();
        vuln.setVulnId("CVE-123");
        vuln.setSource(Vulnerability.Source.NVD);
        qm.persist(vuln);

        final var vs = new VulnerableSoftware();
        vs.setVulnerabilities(List.of(vuln));
        qm.persist(vs);

        final var vsOrphaned = new VulnerableSoftware();
        qm.persist(vsOrphaned);

        final var task = new VulnerabilityDatabaseMaintenanceTask();
        assertThatNoException().isThrownBy(() -> task.inform(new VulnerabilityDatabaseMaintenanceEvent()));

        assertThatNoException()
                .isThrownBy(() -> qm.getObjectById(VulnerableSoftware.class, vs.getId()));
        assertThatExceptionOfType(JDOObjectNotFoundException.class)
                .isThrownBy(() -> qm.getObjectById(VulnerableSoftware.class, vsOrphaned.getId()));
    }

}