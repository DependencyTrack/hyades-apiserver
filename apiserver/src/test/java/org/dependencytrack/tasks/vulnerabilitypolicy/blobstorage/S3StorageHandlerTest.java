/*
 * This file is part of Dependency-Track.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * SPDX-License-Identifier: Apache-2.0
 * Copyright (c) OWASP Foundation. All Rights Reserved.
 */
package org.dependencytrack.tasks.vulnerabilitypolicy.blobstorage;


import io.minio.MakeBucketArgs;
import io.minio.PutObjectArgs;
import org.dependencytrack.PersistenceCapableTest;
import org.dependencytrack.tasks.vulnerabilitypolicy.S3Client;
import org.junit.After;
import org.junit.Before;
import org.junit.Rule;
import org.junit.Test;
import org.junit.contrib.java.lang.system.EnvironmentVariables;
import org.junit.jupiter.api.Assertions;

import java.nio.charset.StandardCharsets;
import java.nio.file.Files;
import java.nio.file.Path;
import java.util.ArrayList;
import java.util.List;
import java.util.NoSuchElementException;
import java.util.zip.ZipEntry;
import java.util.zip.ZipInputStream;

import static org.apache.commons.io.IOUtils.resourceToString;
import static org.assertj.core.api.Assertions.assertThat;
import static org.dependencytrack.tasks.vulnerabilitypolicy.VulnerabilityPolicyTestUtil.createPolicyBundle;

public class S3StorageHandlerTest extends PersistenceCapableTest {

    private static final String ACCESS_KEY = "MINIO_ACCESS_KEY";
    private static final String SECRET_KEY = "MINIO_SECRET_KEY";
    MinioContainer minioContainer;
    S3StorageHandler s3StorageHandler;

    @Rule
    public EnvironmentVariables environmentVariables = new EnvironmentVariables();

    @Before
    public void beforeTest() {
        environmentVariables.set("VULNERABILITY_POLICY_ANALYSIS_ENABLED", "true");
        environmentVariables.set("VULNERABILITY_POLICY_BUNDLE_SOURCE_TYPE", "s3");
        minioContainer = new MinioContainer(
                new MinioContainer.CredentialsProvider(ACCESS_KEY, SECRET_KEY));
        minioContainer.start();

    }

    @After
    public void afterTest() {
        environmentVariables.clear("VULNERABILITY_POLICY_ANALYSIS_ENABLED", "VULNERABILITY_POLICY_BUNDLE_SOURCE_TYPE");
        minioContainer.stop();
    }

    @Test
    public void testVerifyDownloadNeededBucketDoesNotExist() {
        S3Client s3Client = new S3Client("http://" + minioContainer.getHostAddress(),
                "test.zip", "MINIO_ACCESS_KEY", "MINIO_SECRET_KEY", "testbucket", null);
        s3StorageHandler = new S3StorageHandler(s3Client);
        Assertions.assertThrows(NoSuchElementException.class, s3StorageHandler::verifyDownloadNeeded);
    }

    @Test
    public void testVerifyDownloadNeededBucketExist() throws Exception {
        S3Client s3Client = new S3Client("http://" + minioContainer.getHostAddress(),
                "test.zip", "MINIO_ACCESS_KEY", "MINIO_SECRET_KEY", "testbucket", null);

        final Path bundleFilePath = createPolicyBundle(List.of(
                resourceToString("/unit/tasks/vulnerabilitypolicy/sample.yaml", StandardCharsets.UTF_8),
                resourceToString("/unit/tasks/vulnerabilitypolicy/sample 2.yaml", StandardCharsets.UTF_8)
        ));
        s3Client.getMinioClient().makeBucket(MakeBucketArgs.builder().bucket("testbucket").build());
        s3Client.getMinioClient().putObject(PutObjectArgs.builder().bucket("testbucket").
                object("test.zip").stream(Files.newInputStream(bundleFilePath), -1, 10485760).build());
        s3StorageHandler = new S3StorageHandler(s3Client);
        Assertions.assertTrue(s3StorageHandler.verifyDownloadNeeded());
    }

    @Test
    public void testDownload() throws Exception {
        S3Client s3Client = new S3Client("http://" + minioContainer.getHostAddress(),
                "test.zip", "MINIO_ACCESS_KEY", "MINIO_SECRET_KEY", "testbucket", null);
        final Path bundleFilePath = createPolicyBundle(List.of(
                resourceToString("/unit/tasks/vulnerabilitypolicy/sample.yaml", StandardCharsets.UTF_8),
                resourceToString("/unit/tasks/vulnerabilitypolicy/sample 2.yaml", StandardCharsets.UTF_8)
        ));
        s3Client.getMinioClient().makeBucket(MakeBucketArgs.builder().bucket("testbucket").build());
        s3Client.getMinioClient().putObject(PutObjectArgs.builder().bucket("testbucket").
                object("test.zip").stream(Files.newInputStream(bundleFilePath), -1, 10485760).build());
        s3StorageHandler = new S3StorageHandler(s3Client);
        final VulnerabilityPolicyBundleFile bundleFile = s3StorageHandler.download();
        ArrayList<ZipEntry> zipEntries;
        try (ZipInputStream zipInputStream = new ZipInputStream(Files.newInputStream(bundleFile.filePath()))) {
            ZipEntry zipEntry = zipInputStream.getNextEntry();
            zipEntries = new ArrayList<>();
            while (zipEntry != null) {
                if (!(zipEntry.getName().startsWith(".") || zipEntry.getName().startsWith("_")) && (zipEntry.getName().contains(".yaml") || zipEntry.getName().contains(".yml"))) {
                    zipEntries.add(zipEntry);
                }
                zipEntry = zipInputStream.getNextEntry();
            }
        }
        assertThat(zipEntries).hasSize(2);
    }
}
