/*
 * This file is part of Dependency-Track.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * SPDX-License-Identifier: Apache-2.0
 * Copyright (c) OWASP Foundation. All Rights Reserved.
 */
package org.dependencytrack.tasks.vulnerabilitypolicy.blobstorage;

import alpine.test.config.ConfigPropertyRule;
import alpine.test.config.WithConfigProperty;
import com.github.tomakehurst.wiremock.client.WireMock;
import com.github.tomakehurst.wiremock.junit.WireMockRule;
import org.apache.http.HttpStatus;
import org.assertj.core.api.Assertions;
import org.dependencytrack.PersistenceCapableTest;
import org.dependencytrack.model.ConfigPropertyConstants;
import org.junit.Rule;
import org.junit.Test;
import org.junit.rules.RuleChain;

import java.io.IOException;

import static com.github.tomakehurst.wiremock.core.WireMockConfiguration.options;
import static org.assertj.core.api.Assertions.assertThat;
import static org.junit.Assert.assertThrows;

public class NginxStorageHandlerTest extends PersistenceCapableTest {

    private final WireMockRule wireMockRule = new WireMockRule(options().dynamicPort());

    private final ConfigPropertyRule configPropertyRule = new ConfigPropertyRule()
            .withProperty("vulnerability.policy.bundle.url", () -> wireMockRule.baseUrl() + "/bundles/test.zip")
            .withProperty("vulnerability.policy.bundle.source.type", "NGINX");

    @Rule
    public final RuleChain ruleChain = RuleChain.outerRule(wireMockRule).around(configPropertyRule);

    @Test
    @WithConfigProperty(value = {
            "vulnerability.policy.bundle.auth.username=test",
            "vulnerability.policy.bundle.auth.password=test"
    })
    public void getHeaderWithUsername() {
        NginxStorageHandler nginxStorageHandler = new NginxStorageHandler();
        String result = nginxStorageHandler.getAuthorizationHeader(nginxStorageHandler.username, nginxStorageHandler.password, nginxStorageHandler.bearerToken);
        Assertions.assertThat(result).isEqualTo("Basic dGVzdDp0ZXN0");
    }

    @Test
    @WithConfigProperty("vulnerability.policy.bundle.auth.bearer.token=test")
    public void getHeaderWithBearerToken() {
        NginxStorageHandler nginxStorageHandler = new NginxStorageHandler();
        String result = nginxStorageHandler.getAuthorizationHeader(nginxStorageHandler.username, nginxStorageHandler.password, nginxStorageHandler.bearerToken);
        Assertions.assertThat(result).isEqualTo("Bearer test");
    }

    @Test
    @WithConfigProperty(value = {
            "vulnerability.policy.bundle.auth.bearer.token=test",
            "vulnerability.policy.bundle.auth.username=test",
            "vulnerability.policy.bundle.auth.password=test"
    })
    public void getHeaderWithBearerTokenAndUserName() {
        NginxStorageHandler nginxStorageHandler = new NginxStorageHandler();
        String result = nginxStorageHandler.getAuthorizationHeader(nginxStorageHandler.username, nginxStorageHandler.password, nginxStorageHandler.bearerToken);
        Assertions.assertThat(result).isEqualTo("Basic dGVzdDp0ZXN0");
    }

    @Test
    public void testVerifyDownloadNeeded() throws IOException {
        WireMock.stubFor(WireMock.head(WireMock.urlPathMatching("/bundles/test.zip"))
                .willReturn(WireMock.aResponse().withStatus(HttpStatus.SC_OK)
                        .withHeader("ETag", "65708810-3a5")));
        NginxStorageHandler nginxStorageHandler = new NginxStorageHandler();
        assertThat(nginxStorageHandler.verifyDownloadNeeded()).isTrue();

    }

    @Test
    public void testVerifyDownloadNeededWithLastModifiedNull() throws IOException {
        if (qm.getConfigProperty(ConfigPropertyConstants.VULNERABILITY_POLICY_FILE_LAST_MODIFIED_HASH.getGroupName(),
                ConfigPropertyConstants.VULNERABILITY_POLICY_FILE_LAST_MODIFIED_HASH.getPropertyName()) == null) {
            qm.createConfigProperty(ConfigPropertyConstants.VULNERABILITY_POLICY_FILE_LAST_MODIFIED_HASH.getGroupName(),
                    ConfigPropertyConstants.VULNERABILITY_POLICY_FILE_LAST_MODIFIED_HASH.getPropertyName(),
                    null,
                    ConfigPropertyConstants.VULNERABILITY_POLICY_FILE_LAST_MODIFIED_HASH.getPropertyType(),
                    ConfigPropertyConstants.VULNERABILITY_POLICY_FILE_LAST_MODIFIED_HASH.getDescription());
        } else {
            qm.getConfigProperty(ConfigPropertyConstants.VULNERABILITY_POLICY_FILE_LAST_MODIFIED_HASH.getGroupName(),
                    ConfigPropertyConstants.VULNERABILITY_POLICY_FILE_LAST_MODIFIED_HASH.getPropertyName()).setPropertyValue(null);
        }
        WireMock.stubFor(WireMock.head(WireMock.urlPathMatching("/bundles/test.zip"))
                .willReturn(WireMock.aResponse().withStatus(HttpStatus.SC_OK)
                        .withHeader("Last-Modified", "Wed, 06 Dec 2023 14:41:20 GMT")
                        .withHeader("ETag", "65708810-3a5")));
        NginxStorageHandler nginxStorageHandler = new NginxStorageHandler();
        assertThat(nginxStorageHandler.verifyDownloadNeeded()).isTrue();

    }

    @Test
    public void testVerifyDownloadNeededWithLastModifiedSameAsUpstream() throws IOException {
        if (qm.getConfigProperty(ConfigPropertyConstants.VULNERABILITY_POLICY_FILE_LAST_MODIFIED_HASH.getGroupName(),
                ConfigPropertyConstants.VULNERABILITY_POLICY_FILE_LAST_MODIFIED_HASH.getPropertyName()) == null) {
            qm.createConfigProperty(ConfigPropertyConstants.VULNERABILITY_POLICY_FILE_LAST_MODIFIED_HASH.getGroupName(),
                    ConfigPropertyConstants.VULNERABILITY_POLICY_FILE_LAST_MODIFIED_HASH.getPropertyName(),
                    "65708810-3a5",
                    ConfigPropertyConstants.VULNERABILITY_POLICY_FILE_LAST_MODIFIED_HASH.getPropertyType(),
                    ConfigPropertyConstants.VULNERABILITY_POLICY_FILE_LAST_MODIFIED_HASH.getDescription());
        } else {
            qm.getConfigProperty(ConfigPropertyConstants.VULNERABILITY_POLICY_FILE_LAST_MODIFIED_HASH.getGroupName(),
                    ConfigPropertyConstants.VULNERABILITY_POLICY_FILE_LAST_MODIFIED_HASH.getPropertyName()).setPropertyValue("65708810-3a5");
        }
        WireMock.stubFor(WireMock.head(WireMock.urlPathMatching("/bundles/test.zip"))
                .willReturn(WireMock.aResponse().withStatus(HttpStatus.SC_OK)
                        .withHeader("Last-Modified", "Wed, 06 Dec 2023 14:41:20 GMT")
                        .withHeader("ETag", "65708810-3a5")));
        NginxStorageHandler nginxStorageHandler = new NginxStorageHandler();
        assertThat(nginxStorageHandler.verifyDownloadNeeded()).isFalse();

    }

    @Test
    public void testVerifyDownloadNeededEndPointReturningNon200Status() {
        WireMock.stubFor(WireMock.head(WireMock.urlPathMatching("/bundles/test.zip"))
                .willReturn(WireMock.aResponse()
                        .withStatus(HttpStatus.SC_NOT_FOUND)));
        NginxStorageHandler nginxStorageHandler = new NginxStorageHandler();
        assertThrows(IOException.class, nginxStorageHandler::verifyDownloadNeeded);
    }
}
