/*
 * This file is part of Dependency-Track.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * SPDX-License-Identifier: Apache-2.0
 * Copyright (c) OWASP Foundation. All Rights Reserved.
 */
package org.dependencytrack.resources.v1;

import alpine.server.filters.ApiFilter;
import alpine.server.filters.AuthenticationFilter;
import org.apache.http.HttpStatus;
import org.dependencytrack.JerseyTestRule;
import org.dependencytrack.ResourceTest;
import org.dependencytrack.event.VulnerabilityPolicyFetchEvent;
import org.dependencytrack.model.WorkflowState;
import org.dependencytrack.model.WorkflowStatus;
import org.dependencytrack.model.WorkflowStep;
import org.dependencytrack.persistence.jdbi.VulnerabilityPolicyDao;
import org.dependencytrack.policy.vulnerability.VulnerabilityPolicy;
import org.dependencytrack.policy.vulnerability.VulnerabilityPolicyAnalysis;
import org.dependencytrack.policy.vulnerability.VulnerabilityPolicyOperation;
import org.dependencytrack.policy.vulnerability.VulnerabilityPolicyRating;
import org.glassfish.jersey.server.ResourceConfig;
import org.junit.ClassRule;
import org.junit.Rule;
import org.junit.Test;
import org.junit.contrib.java.lang.system.EnvironmentVariables;

import jakarta.json.JsonArray;
import jakarta.ws.rs.core.Response;
import java.util.Date;
import java.util.List;
import java.util.concurrent.ArrayBlockingQueue;
import java.util.concurrent.CountDownLatch;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.TimeUnit;

import static net.javacrumbs.jsonunit.assertj.JsonAssertions.assertThatJson;
import static org.assertj.core.api.Assertions.assertThat;
import static org.dependencytrack.common.ConfigKey.VULNERABILITY_POLICY_ANALYSIS_ENABLED;
import static org.dependencytrack.persistence.jdbi.JdbiFactory.useJdbiHandle;

public class VulnerabilityPolicyResourceTest extends ResourceTest {

    @Rule
    public final EnvironmentVariables environmentVariables = new EnvironmentVariables();

    @ClassRule
    public static JerseyTestRule jersey = new JerseyTestRule(
            new ResourceConfig(VulnerabilityPolicyResource.class)
                    .register(ApiFilter.class)
                    .register(AuthenticationFilter.class));

    @Test
    public void testVulnerablePolicies() {
        var vulnPolicy = getVulnerabilityPolicyInstance(0);
        useJdbiHandle(handle -> handle.attach(VulnerabilityPolicyDao.class).create(vulnPolicy));
        final Response response = jersey.target(V1_VULNERABILITY_POLICY)
                .request()
                .header(X_API_KEY, apiKey)
                .get();

        assertThat(response.getStatus()).isEqualTo(HttpStatus.SC_OK);
        assertThatJson(getPlainTextBody(response))
                .isEqualTo("""
                        [
                            {
                                "name": "name 0",
                                "description": null,
                                "author": null,
                                "created": "${json-unit.any-number}",
                                "updated": null,
                                "validFrom": null,
                                "validUntil": null,
                                "conditions": [
                                    "vuln.id == \\"CVE-123\\" || vuln.aliases.exists(alias, alias.id == \\"CVE-123\\")",
                                    "component.name == \\"foo\\" && project.name == \\"bar\\" && \\"internal\\" in project.tags && !component.is_dependency_of(org.dependencytrack.policy.v1.Component{group: \\"org.springframework.boot\\"}"
                                ],
                                "analysis": {
                                    "state": "NOT_AFFECTED",
                                    "justification": "CODE_NOT_REACHABLE",
                                    "vendorResponse": null,
                                    "details": "something",
                                    "suppress": true
                                },
                                "ratings": [
                                    {
                                        "method": "CVSSV3",
                                        "severity": "HIGH",
                                        "vector": "CVSS:3.0/AV:N/AC:L/PR:L/UI:N/S:U/C:L/I:L/A:L",
                                        "score": 6.3
                                    }
                                ],
                                "operationMode": "APPLY"
                            }
                        ]

                        """);
    }

    @Test
    public void getVulnerabilityPoliciesTest() {
        for (int i = 0; i < 1000; i++) {
            var vulnPolicy = getVulnerabilityPolicyInstance(i);
            useJdbiHandle(handle -> handle.attach(VulnerabilityPolicyDao.class).create(vulnPolicy));
        }

        final Response response = jersey.target(V1_VULNERABILITY_POLICY)
                .request()
                .header(X_API_KEY, apiKey)
                .get();

        assertThat(response.getStatus()).isEqualTo(HttpStatus.SC_OK);
        assertThat(response.getHeaderString(TOTAL_COUNT_HEADER)).isEqualTo("1000");

        final JsonArray json = parseJsonArray(response);
        assertThat(json).isNotNull();
        assertThat(json).hasSize(100);
        assertThat(json.getJsonObject(0).getString("name")).isEqualTo("name 0");
    }

    @Test
    public void triggerVulnerabilityPolicyBundleSyncTest() {
        environmentVariables.set(VULNERABILITY_POLICY_ANALYSIS_ENABLED.name(), "true");

        // Trigger the workflow for the first time.
        Response response = jersey.target(V1_VULNERABILITY_POLICY + "/bundle/sync")
                .request()
                .header(X_API_KEY, apiKey)
                .post(null);
        assertThat(response.getStatus()).isEqualTo(202);
        assertThatJson(getPlainTextBody(response)).isEqualTo("""
                {
                  "token": "bc106cf4-3993-4e38-952d-d2f5f11412ed"
                }
                """);

        // Workflow is still in progress, trying to trigger it again will not work.
        response = jersey.target(V1_VULNERABILITY_POLICY + "/bundle/sync")
                .request()
                .header(X_API_KEY, apiKey)
                .post(null);
        assertThat(response.getStatus()).isEqualTo(409);
        assertThatJson(getPlainTextBody(response)).isEqualTo("""
                {
                  "message": "Bundle synchronization is already in progress"
                }
                """);

        // Move workflow to COMPLETE state.
        qm.updateWorkflowStateToComplete(qm.getWorkflowStateByTokenAndStep(
                VulnerabilityPolicyFetchEvent.CHAIN_IDENTIFIER,
                WorkflowStep.POLICY_BUNDLE_SYNC
        ));

        // Triggering the workflow should be allowed again.
        response = jersey.target(V1_VULNERABILITY_POLICY + "/bundle/sync")
                .request()
                .header(X_API_KEY, apiKey)
                .post(null);
        assertThat(response.getStatus()).isEqualTo(202);
        assertThatJson(getPlainTextBody(response)).isEqualTo("""
                {
                  "token": "bc106cf4-3993-4e38-952d-d2f5f11412ed"
                }
                """);
    }

    @Test
    public void triggerVulnerabilityPolicyBundleSyncThreadSafetyForCreateTest() throws Exception {
        environmentVariables.set(VULNERABILITY_POLICY_ANALYSIS_ENABLED.name(), "true");

        final ExecutorService executor = Executors.newFixedThreadPool(10);
        final var countDownLatch = new CountDownLatch(1);

        final var responses = new ArrayBlockingQueue<Response>(50);
        for (int i = 0; i < 50; i++) {
            executor.submit(() -> {
                try {
                    countDownLatch.await();
                } catch (InterruptedException e) {
                    throw new RuntimeException(e);
                }

                final Response response = jersey.target(V1_VULNERABILITY_POLICY + "/bundle/sync")
                        .request()
                        .header(X_API_KEY, apiKey)
                        .post(null);
                responses.offer(response);
            });
        }

        countDownLatch.countDown();
        executor.shutdown();
        assertThat(executor.awaitTermination(15, TimeUnit.SECONDS)).isTrue();

        assertThat(responses).hasSize(50);
        assertThat(responses).satisfiesOnlyOnce(response -> assertThat(response.getStatus()).isEqualTo(202));
        assertThat(responses.stream().map(Response::getStatus).filter(status -> status != 202)).containsOnly(409);
    }

    @Test
    public void triggerVulnerabilityPolicyBundleSyncThreadSafetyForUpdateTest() throws Exception {
        environmentVariables.set(VULNERABILITY_POLICY_ANALYSIS_ENABLED.name(), "true");

        final ExecutorService executor = Executors.newFixedThreadPool(10);
        final var countDownLatch = new CountDownLatch(1);

        // Create an existing workflow state that has a terminal status.
        // Trigger requests will reset it to a PENDING state.
        final WorkflowState workflowState = new WorkflowState();
        workflowState.setStep(WorkflowStep.POLICY_BUNDLE_SYNC);
        workflowState.setStatus(WorkflowStatus.COMPLETED);
        workflowState.setToken(VulnerabilityPolicyFetchEvent.CHAIN_IDENTIFIER);
        workflowState.setUpdatedAt(new Date());
        qm.getPersistenceManager().makePersistent(workflowState);

        final var responses = new ArrayBlockingQueue<Response>(50);
        for (int i = 0; i < 50; i++) {
            executor.submit(() -> {
                try {
                    countDownLatch.await();
                } catch (InterruptedException e) {
                    throw new RuntimeException(e);
                }

                final Response response = jersey.target(V1_VULNERABILITY_POLICY + "/bundle/sync")
                        .request()
                        .header(X_API_KEY, apiKey)
                        .post(null);
                responses.offer(response);
            });
        }

        countDownLatch.countDown();
        executor.shutdown();
        assertThat(executor.awaitTermination(20, TimeUnit.SECONDS)).isTrue();

        assertThat(responses).hasSize(50);
        assertThat(responses).satisfiesOnlyOnce(response -> assertThat(response.getStatus()).isEqualTo(202));
        assertThat(responses.stream().map(Response::getStatus).filter(status -> status != 202)).containsOnly(409);
    }

    @Test
    public void triggerVulnerabilityPolicyBundleSyncWithFeatureDisabledTest() {
        final Response response = jersey.target(V1_VULNERABILITY_POLICY + "/bundle/sync")
                .request()
                .header(X_API_KEY, apiKey)
                .post(null);

        assertThat(response.getStatus()).isEqualTo(400);
        assertThat(getPlainTextBody(response)).isEqualTo("The vulnerability policy feature has not been enabled by the instance administrator");
    }

    private static VulnerabilityPolicy getVulnerabilityPolicyInstance(int i) {
        VulnerabilityPolicy vulnPolicy = new VulnerabilityPolicy();
        vulnPolicy.setConditions(List.of(
                "vuln.id == \"CVE-123\" || vuln.aliases.exists(alias, alias.id == \"CVE-123\")",
                "component.name == \"foo\" && project.name == \"bar\" && \"internal\" in project.tags && !component.is_dependency_of(org.dependencytrack.policy.v1.Component{group: \"org.springframework.boot\"}"
        ));
        vulnPolicy.setName("name " + i);
        VulnerabilityPolicyAnalysis vulnerabilityPolicyAnalysis = new VulnerabilityPolicyAnalysis();
        vulnerabilityPolicyAnalysis.setState(VulnerabilityPolicyAnalysis.State.NOT_AFFECTED);
        vulnerabilityPolicyAnalysis.setJustification(VulnerabilityPolicyAnalysis.Justification.CODE_NOT_REACHABLE);
        vulnerabilityPolicyAnalysis.setDetails("something");
        vulnerabilityPolicyAnalysis.setSuppress(true);
        vulnPolicy.setAnalysis(vulnerabilityPolicyAnalysis);
        VulnerabilityPolicyRating rating = new VulnerabilityPolicyRating();
        rating.setSeverity(VulnerabilityPolicyRating.Severity.HIGH);
        rating.setMethod(VulnerabilityPolicyRating.Method.CVSSV3);
        rating.setScore(6.3);
        rating.setVector("CVSS:3.0/AV:N/AC:L/PR:L/UI:N/S:U/C:L/I:L/A:L");
        vulnPolicy.setRatings(List.of(rating));
        vulnPolicy.setOperationMode(VulnerabilityPolicyOperation.APPLY);
        return vulnPolicy;
    }

}
