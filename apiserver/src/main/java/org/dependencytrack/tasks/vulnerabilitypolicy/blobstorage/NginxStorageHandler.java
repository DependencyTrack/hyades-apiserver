/*
 * This file is part of Dependency-Track.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * SPDX-License-Identifier: Apache-2.0
 * Copyright (c) OWASP Foundation. All Rights Reserved.
 */
package org.dependencytrack.tasks.vulnerabilitypolicy.blobstorage;

import alpine.Config;
import alpine.common.logging.Logger;
import org.apache.commons.codec.binary.Hex;
import org.apache.commons.codec.digest.DigestUtils;
import org.apache.commons.io.IOUtils;
import org.apache.http.Header;
import org.apache.http.HttpStatus;
import org.apache.http.client.methods.CloseableHttpResponse;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.client.methods.HttpHead;
import org.apache.http.util.EntityUtils;
import org.dependencytrack.common.ConfigKey;
import org.dependencytrack.common.HttpClientPool;
import org.dependencytrack.util.HttpUtil;
import org.dependencytrack.util.VulnerabilityPolicyUtil;

import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.nio.file.Files;
import java.nio.file.Path;
import java.security.DigestOutputStream;
import java.security.MessageDigest;
import java.util.Arrays;
import java.util.Optional;

public class NginxStorageHandler implements BlobStorageAccessHandler {

    private static final Logger LOGGER = Logger.getLogger(NginxStorageHandler.class);

    final String username;
    final String password;
    final String bearerToken;

    public NginxStorageHandler() {
        final Config config = Config.getInstance();
        this.username = config.getProperty(ConfigKey.VULNERABILITY_POLICY_BUNDLE_AUTH_USERNAME);
        this.password = config.getProperty(ConfigKey.VULNERABILITY_POLICY_BUNDLE_AUTH_PASSWORD);
        this.bearerToken = config.getProperty(ConfigKey.VULNERABILITY_POLICY_BUNDLE_AUTH_BEARER_TOKEN);
    }

    @Override
    public boolean verifyDownloadNeeded() throws IOException {
        final var request = new HttpHead(Config.getInstance().getProperty(ConfigKey.VULNERABILITY_POLICY_BUNDLE_URL));
        request.addHeader("Authorization", getAuthorizationHeader(username, password, bearerToken));

        try (CloseableHttpResponse response = HttpClientPool.getClient().execute(request)) {
            assertStatusCode(response, HttpStatus.SC_OK);

            //there is a possiblility that etag header is not present in the response from policy bundle server
            //when etag header not found, we still want to update the lastmodified hash as null
            Header[] httpHeaders = response.getAllHeaders();
            Optional<Header> headerOptional = Arrays.stream(httpHeaders)
                    .filter(header -> header.getName().equalsIgnoreCase("ETag"))
                    .findFirst();
            return headerOptional
                    .map(header -> VulnerabilityPolicyUtil.matchWithHashConfigProperty(header.getValue()))
                    .orElseGet(() -> VulnerabilityPolicyUtil.matchWithHashConfigProperty(null));
        }
    }

    @Override
    public VulnerabilityPolicyBundleFile download() throws IOException {
        final var request = new HttpGet(Config.getInstance().getProperty(ConfigKey.VULNERABILITY_POLICY_BUNDLE_URL));
        request.addHeader("Authorization", getAuthorizationHeader(username, password, bearerToken));

        final Path bundleFilePath;
        final String bundleFileHash;
        try (final CloseableHttpResponse response = HttpClientPool.getClient().execute(request)) {
            assertStatusCode(response, HttpStatus.SC_OK);

            bundleFilePath = Files.createTempFile(null, ".zip");
            bundleFilePath.toFile().deleteOnExit();
            LOGGER.debug("Downloading policy bundle to %s".formatted(bundleFilePath));

            final MessageDigest bundleFileDigest = DigestUtils.getSha256Digest();
            try (final OutputStream fileOutputStream = Files.newOutputStream(bundleFilePath);
                 final var digestOutputStream = new DigestOutputStream(fileOutputStream, bundleFileDigest);
                 final InputStream responseEntityInputStream = response.getEntity().getContent()) {
                IOUtils.copy(responseEntityInputStream, digestOutputStream);
            }

            bundleFileHash = Hex.encodeHexString(bundleFileDigest.digest());
        }

        return new VulnerabilityPolicyBundleFile(
                Config.getInstance().getProperty(ConfigKey.VULNERABILITY_POLICY_BUNDLE_URL),
                bundleFileHash,
                bundleFilePath
        );
    }

    String getAuthorizationHeader(String username, String password, String bearerToken) {
        if (username != null && !username.isBlank()) {
            return HttpUtil.basicAuthHeaderValue(username, password);
        } else if (bearerToken != null && !bearerToken.isBlank()) {
            return "Bearer " + bearerToken;
        }
        return null;
    }

    private static void assertStatusCode(final CloseableHttpResponse response, final int statusCode) throws IOException {
        if (response.getStatusLine().getStatusCode() != statusCode) {
            final String requestUrl = Config.getInstance().getProperty(ConfigKey.VULNERABILITY_POLICY_BUNDLE_URL);
            final var message = "Received unexpected response code %d from bundle endpoint %s (expected %d)"
                    .formatted(response.getStatusLine().getStatusCode(), requestUrl, statusCode);
            if (LOGGER.isDebugEnabled()) {
                LOGGER.debug("%s; Response: %s".formatted(message, EntityUtils.toString(response.getEntity())));
            }

            throw new IOException(message);
        }
    }

}
