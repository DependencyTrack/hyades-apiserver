/*
 * This file is part of Dependency-Track.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * SPDX-License-Identifier: Apache-2.0
 * Copyright (c) OWASP Foundation. All Rights Reserved.
 */
package org.dependencytrack.tasks.vulnerabilitypolicy.blobstorage;

import alpine.Config;
import alpine.common.logging.Logger;
import org.apache.commons.codec.binary.Hex;
import org.apache.commons.codec.digest.DigestUtils;
import org.apache.commons.io.IOUtils;
import org.dependencytrack.common.ConfigKey;
import org.dependencytrack.tasks.vulnerabilitypolicy.S3Client;
import org.dependencytrack.util.VulnerabilityPolicyUtil;

import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.nio.file.Files;
import java.nio.file.Path;
import java.security.DigestOutputStream;
import java.security.MessageDigest;
import java.util.NoSuchElementException;

public class S3StorageHandler implements BlobStorageAccessHandler {

    private static final Logger LOGGER = Logger.getLogger(S3StorageHandler.class);

    private final S3Client s3Client;

    public S3StorageHandler() {
        this.s3Client = new S3Client(Config.getInstance().getProperty(ConfigKey.VULNERABILITY_POLICY_BUNDLE_URL), Config.getInstance().getProperty(ConfigKey.VULNERABILITY_POLICY_S3_BUNDLE_NAME),
                Config.getInstance().getProperty(ConfigKey.VULNERABILITY_POLICY_S3_ACCESS_KEY), Config.getInstance().getProperty(ConfigKey.VULNERABILITY_POLICY_S3_SECRET_KEY),
                Config.getInstance().getProperty(ConfigKey.VULNERABILITY_POLICY_S3_BUCKET_NAME), Config.getInstance().getProperty(ConfigKey.VULNERABILITY_POLICY_S3_REGION));
    }

    S3StorageHandler(S3Client s3Client) {
        this.s3Client = s3Client;
    }

    @Override
    public boolean verifyDownloadNeeded() throws IOException {
        if (s3Client.doesBucketExist()) {
            //perform head request check on the object of interest
            return VulnerabilityPolicyUtil.matchWithHashConfigProperty(s3Client.getObjectEtag());
        } else {
            throw new NoSuchElementException("Provided bucket %s not found in the s3 bucket".formatted(s3Client.getS3BucketName()));
        }
    }

    @Override
    public VulnerabilityPolicyBundleFile download() throws IOException {
        final var bundleUrl = "%s/%s/%s".formatted(Config.getInstance().getProperty(ConfigKey.VULNERABILITY_POLICY_BUNDLE_URL), s3Client.getS3BucketName(), s3Client.getBundleToFetch());

        final Path bundleFilePath = Files.createTempFile(null, ".zip");
        bundleFilePath.toFile().deleteOnExit();
        LOGGER.debug("Downloading policy bundle to %s".formatted(bundleFilePath));

        final MessageDigest bundleFileDigest = DigestUtils.getSha256Digest();
        try (final OutputStream fileOutputStream = Files.newOutputStream(bundleFilePath);
             final var digestOutputStream = new DigestOutputStream(fileOutputStream, bundleFileDigest);
             final InputStream objectInputStream = s3Client.getObject()) {
            IOUtils.copy(objectInputStream, digestOutputStream);
        }

        return new VulnerabilityPolicyBundleFile(bundleUrl, Hex.encodeHexString(bundleFileDigest.digest()), bundleFilePath);
    }

}
