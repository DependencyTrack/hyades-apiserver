/*
 * This file is part of Dependency-Track.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * SPDX-License-Identifier: Apache-2.0
 * Copyright (c) OWASP Foundation. All Rights Reserved.
 */
package org.dependencytrack.event;

import alpine.event.framework.Event;
import com.github.packageurl.PackageURL;
import org.dependencytrack.model.Component;
import org.dependencytrack.model.VulnerabilityAnalysisLevel;

import java.util.Objects;
import java.util.Optional;
import java.util.UUID;

/**
 * Defines an {@link Event} triggered when requesting a component to be analyzed for vulnerabilities.
 *
 * @param token     The scan token
 * @param uuid      The {@link UUID} of the {@link Component} to scan
 * @param purl      The package URL of the {@link Component} to scan
 * @param cpe       The CPE of the {@link Component} to scan
 * @param swidTagId The SWID tag ID of the {@link Component} to scan
 * @param internal  Whether the {@link Component} is internal
 * @param level     The {@link VulnerabilityAnalysisLevel} of the scan
 */
public record ComponentVulnerabilityAnalysisEvent(UUID token, UUID uuid, String purl, String cpe,
                                                  String swidTagId, Boolean internal,
                                                  VulnerabilityAnalysisLevel level, Boolean isNewComponent) implements Event {

    public ComponentVulnerabilityAnalysisEvent(final UUID token, final UUID uuid, final String purl, final String cpe,
                                               final String swidTagId, final Boolean internal, final VulnerabilityAnalysisLevel level, Boolean isNewComponent) {
        this.token = Objects.requireNonNull(token);
        this.uuid = Objects.requireNonNull(uuid);
        this.purl = purl;
        this.cpe = cpe;
        this.swidTagId = swidTagId;
        this.internal = internal;
        this.level = Objects.requireNonNull(level);
        this.isNewComponent = isNewComponent;
    }

    public ComponentVulnerabilityAnalysisEvent(final UUID token, final Component component, VulnerabilityAnalysisLevel level, Boolean isNewComponent) {
        this(token, component.getUuid(), Optional.ofNullable(component.getPurl()).map(PackageURL::canonicalize).orElse(null),
                component.getCpe(), component.getSwidTagId(), component.isInternal(), level, isNewComponent);
    }

}
