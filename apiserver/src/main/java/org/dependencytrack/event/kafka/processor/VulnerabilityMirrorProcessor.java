/*
 * This file is part of Dependency-Track.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * SPDX-License-Identifier: Apache-2.0
 * Copyright (c) OWASP Foundation. All Rights Reserved.
 */
package org.dependencytrack.event.kafka.processor;

import alpine.common.logging.Logger;
import org.apache.kafka.clients.consumer.ConsumerRecord;
import org.cyclonedx.proto.v1_6.Bom;
import org.dependencytrack.event.kafka.processor.api.Processor;
import org.dependencytrack.model.Vulnerability;
import org.dependencytrack.model.VulnerableSoftware;
import org.dependencytrack.parser.dependencytrack.BovModelConverter;
import org.dependencytrack.persistence.QueryManager;

import java.util.List;

import static org.datanucleus.PropertyNames.PROPERTY_PERSISTENCE_BY_REACHABILITY_AT_COMMIT;

/**
 * A {@link Processor} that ingests vulnerability data from CycloneDX Bill of Vulnerabilities.
 */
public class VulnerabilityMirrorProcessor implements Processor<String, Bom> {

    static final String PROCESSOR_NAME = "vuln.mirror";

    private static final Logger LOGGER = Logger.getLogger(VulnerabilityMirrorProcessor.class);

    @Override
    public void process(final ConsumerRecord<String, Bom> record) {
        LOGGER.debug("Synchronizing Mirrored Vulnerability : " + record.key());
        final Bom bov = record.value();
        final String mirrorSource = record.key().substring(0, record.key().indexOf("/"));
        final Vulnerability.Source source = Vulnerability.Source.valueOf(mirrorSource);

        // Alias synchronization across multiple sources is too unreliable right now.
        // We can re-enable this once we have more confidence in data quality, or a better
        // way of auditing reported aliases. See also: https://github.com/google/osv.dev/issues/888
        final Vulnerability vulnerability = BovModelConverter.convert(bov, bov.getVulnerabilities(0), /* isAliasSyncEnabled */ false);
        final List<VulnerableSoftware> vsList = BovModelConverter.extractVulnerableSoftware(bov);

        try (final var qm = new QueryManager()) {
            qm.getPersistenceManager().setProperty(PROPERTY_PERSISTENCE_BY_REACHABILITY_AT_COMMIT, "false");

            qm.runInTransaction(() -> {
                final Vulnerability persistentVuln = qm.synchronizeVulnerability(vulnerability, false);
                qm.synchronizeVulnerableSoftware(persistentVuln, vsList, source);
            });
        }
    }

}
